import{_ as e,o as r,c as o,Q as t}from"./chunks/framework.419948d5.js";const k=JSON.parse('{"title":"Docker 架构","description":"","frontmatter":{"title":"Docker 架构","date":"2023-01-28T00:00:00.000Z"},"headers":[],"relativePath":"devops/docker/1.2-framework.md","filePath":"devops/docker/1.2-framework.md"}'),a={name:"devops/docker/1.2-framework.md"},c=t('<h2 id="docker-架构" tabindex="-1">Docker 架构 <a class="header-anchor" href="#docker-架构" aria-label="Permalink to &quot;Docker 架构&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">基本概念</p><p>Docker 包含三个基本概念：</p><ul><li><p><strong>镜像</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。</p></li><li><p><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p></li><li><p><strong>仓库（Repository）</strong>：仓库可看着一个代码控制中心，用来保存镜像。</p></li></ul></div><h3 id="镜像-image" tabindex="-1">镜像（Image） <a class="header-anchor" href="#镜像-image" aria-label="Permalink to &quot;镜像（Image）&quot;">​</a></h3><p>我们都知道，操作系统分为 <strong>内核</strong> 和 <strong>用户空间</strong>。对于 <code>Linux</code> 而言，内核启动后，会挂载 <code>root</code> 文件系统为其提供用户空间支持。而 <strong>Docker 镜像</strong>（<code>Image</code>），就相当于是一个 <code>root</code> 文件系统。比如官方镜像 <code>ubuntu:18.04</code> 就包含了完整的一套 Ubuntu 18.04 最小系统的 <code>root</code> 文件系统。</p><p><strong>Docker 镜像</strong> 是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像 <strong>不包含</strong> 任何动态数据，其内容在构建之后也不会被改变。</p><p>因为镜像包含操作系统完整的 root 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用<code>Union FS</code>的技术，将其设计为<strong>分层存储</strong>的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p><p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜 像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p><h3 id="容器-container" tabindex="-1">容器（Container） <a class="header-anchor" href="#容器-container" aria-label="Permalink to &quot;容器（Container）&quot;">​</a></h3><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p><p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 <strong>容器存储层</strong>。</p><p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p><p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p><p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p><h3 id="仓库-repository" tabindex="-1">仓库（Repository） <a class="header-anchor" href="#仓库-repository" aria-label="Permalink to &quot;仓库（Repository）&quot;">​</a></h3><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，<a href="https://vuepress.mirror.docker-practice.com/repository/registry.html" target="_blank" rel="noreferrer">Docker Registry</a> 就是这样的服务。</p><p>一个 <strong>Docker Registry</strong> 中可以包含多个 <strong>仓库</strong>（<code>Repository</code>）；每个仓库可以包含多个 <strong>标签</strong>（<code>Tag</code>）；每个标签对应一个镜像。</p><p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt;</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <code>latest</code> 作为默认标签。</p><p>以 Ubuntu 镜像为例，ubuntu 是仓库的名字，其内包含有不同的版本标签，如，16.04, 18.04。我们可以通过 ubuntu:16.04，或者 ubuntu:18.04 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 ubuntu，那将视为 ubuntu:latest。</p><p>仓库名经常以 <em>两段式路径</em> 形式出现，比如 <code>jwilder/nginx-proxy</code>，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。</p><p>Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务，官方的 <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub</a> 国内访问较慢，Docker 官方和国内很多云服务商都提供了国内加速器服务，比如：</p><ul><li>阿里云的加速器：<a href="https://help.aliyun.com/document_detail/60750.html" target="_blank" rel="noreferrer">https://help.aliyun.com/document_detail/60750.html</a></li><li>网易加速器：<a href="http://hub-mirror.c.163.com" target="_blank" rel="noreferrer">http://hub-mirror.c.163.com</a></li><li>Docker 官方中国加速器：<a href="https://registry.docker-cn.com" target="_blank" rel="noreferrer">https://registry.docker-cn.com</a></li><li>ustc 的镜像：<a href="https://docker.mirrors.ustc.edu.cn" target="_blank" rel="noreferrer">https://docker.mirrors.ustc.edu.cn</a></li><li>daocloud：<a href="https://www.daocloud.io/mirror#accelerator-doc%EF%BC%88%E6%B3%A8%E5%86%8C%E5%90%8E%E4%BD%BF%E7%94%A8%EF%BC%89" target="_blank" rel="noreferrer">https://www.daocloud.io/mirror#accelerator-doc（注册后使用）</a></li></ul><p>当然了，在内部项目中，还可以自己搭建私有的 Docker Registry 服务，官方提供了 <a href="https://hub.docker.com/_/registry/" target="_blank" rel="noreferrer">Docker Register</a> 镜像。</p>',24),n=[c];function s(i,d,l,p,u,g){return r(),o("div",null,n)}const m=e(a,[["render",s]]);export{k as __pageData,m as default};

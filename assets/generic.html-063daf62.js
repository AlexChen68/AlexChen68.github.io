import{_ as t,W as p,X as l,Y as a,a0 as n,Z as e,a1 as c,C as o}from"./framework-35f74cfc.js";const i={},u=c(`<h2 id="为什么会引入泛型" tabindex="-1"><a class="header-anchor" href="#为什么会引入泛型" aria-hidden="true">#</a> 为什么会引入泛型</h2><p>引入泛型的意义在于：</p><ul><li>适用于多种数据类型执行相同的代码（代码复用）</li><li>泛型中的类型在使用时指定，不需要强制类型转换（类型安全，编译器会检查类型）</li></ul><h2 id="泛型的基本使用" tabindex="-1"><a class="header-anchor" href="#泛型的基本使用" aria-hidden="true">#</a> 泛型的基本使用</h2><ul><li>泛型接口和泛型类</li></ul><p>在接口和类的名称后面，通过 <code>&lt;Name1, Name2, ...&gt;</code> 的格式定义一至多个泛型类型，在该接口或者类中都可以该类型。</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>
        <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多元泛型：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>
    <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>泛型方法</li></ul><p>在返回值前面通过 <code>&lt;Name1, Name2, ...&gt;</code> 的格式定义一个或多个泛型类型，可以在该方法的作用域范围类使用。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> c<span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> elements<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> element <span class="token operator">:</span> elements<span class="token punctuation">)</span>
          result <span class="token operator">|=</span> c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型的上限和下限" tabindex="-1"><a class="header-anchor" href="#泛型的上限和下限" aria-hidden="true">#</a> 泛型的上限和下限</h2><p>在使用泛型的时候，我们可以为传入的泛型类型实参进行上下边界的限制，如：类型实参只准传入某种类型的父类或某种类型的子类。</p><p>泛型的定义可以使用如下三种方式：</p><ul><li><code>&lt;?&gt;</code> 无限制通配符</li><li><code>&lt;? extends E&gt;</code> extends 关键字声明了类型的上界，表示参数化的类型可能是所指定的类型，或者是此类型的子类</li><li><code>&lt;? super E&gt;</code> super 关键字声明了类型的下界，表示参数化的类型可能是指定的类型，或者是此类型的父类</li></ul><p>《Effictive Java》中对泛型的使用原则：为了获得最大限度的灵活性，要在表示 生产者或者消费者 的输入参数上使用通配符，使用的规则就是：生产者有上限、消费者有下限</p><ol><li>如果参数化类型表示一个 T 的生产者，使用 <code>&lt;? extends T&gt;</code>;</li><li>如果它表示一个 T 的消费者，就使用 <code>&lt;? super T&gt;</code>；</li><li>如果既是生产又是消费，那使用通配符就没什么意义了，因为你需要的是精确的参数类型。</li></ol><h2 id="泛型的类型擦除" tabindex="-1"><a class="header-anchor" href="#泛型的类型擦除" aria-hidden="true">#</a> 泛型的类型擦除</h2><blockquote><p>Java 泛型这个特性是从 JDK 1.5 才开始加入的，因此为了兼容之前的版本，Java 泛型的实现采取了“伪泛型”的策略，即 Java 在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。理解类型擦除对于用好泛型是很有帮助的，尤其是一些看起来“疑难杂症”的问题，弄明白了类型擦除也就迎刃而解了。</p></blockquote><p>Java 编译器是通过先检查代码中泛型的类型，然后在进行类型擦除，再进行编译。</p><p><strong>泛型的类型擦除原则</strong>是：</p><ul><li><p>消除类型参数声明，即删除<code>&lt;&gt;</code>及其包围的部分。</p></li><li><p>根据类型参数的上下界推断并替换所有的类型参数为原生态类型：如果类型参数是无限制通配符或没有上下界限定则替换为 Object，如果存在上下界限定则根据子类替换原则取类型参数的最左边限定类型（即父类）。</p></li><li><p>为了保证类型安全，必要时插入强制类型转换代码。</p></li><li><p>自动产生“桥接方法”以保证擦除类型后的代码仍然具有泛型的“多态性”。</p></li></ul><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h2><ul><li>基本类型不能作为泛型类型</li><li>泛型类型不能实例化</li><li>类型擦除会造成多态的冲突，而 JVM 解决方法就是桥接方法。</li><li>泛型类中的<em>静态方法</em>和<em>静态变量</em>不可以使用泛型类所声明的泛型类型参数</li><li>不能抛出也不能捕获泛型类的对象，因为类型擦除后，异常类型都是 Object，同样不也能再 catch 子句中使用泛型变量；但是在异常声明中可以使用类型变量，例如：<code>&lt;T extends Throwable&gt;</code></li></ul><hr><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,28),r={href:"https://blog.csdn.net/qq_37080455/article/details/127851686",target:"_blank",rel:"noopener noreferrer"},d={href:"https://pdai.tech/md/java/basic/java-basic-x-generic.html",target:"_blank",rel:"noopener noreferrer"};function k(m,v){const s=o("ExternalLinkIcon");return p(),l("div",null,[u,a("ul",null,[a("li",null,[a("a",r,[n("Java 基础五大机制 —— 泛型机制解析（一）"),e(s)])]),a("li",null,[a("a",d,[n("Java 基础 - 泛型机制详解"),e(s)])])])])}const g=t(i,[["render",k],["__file","generic.html.vue"]]);export{g as default};

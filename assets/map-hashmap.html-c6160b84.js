const e=JSON.parse(`{"key":"v-3f64b4c2","path":"/md/java/collection/map-hashmap.html","title":"Map - HashMap 源码分析","lang":"zh-CN","frontmatter":{"title":"Map - HashMap 源码分析","date":"2022-09-30T00:00:00.000Z","tag":["Collection"],"category":["Java Collection"],"order":6,"description":"概述 HashMap 是 java 中 Map 接口基于哈希表的实现，用于存储 key-value 键值对的数据结构，提供平均时间复杂度为 O(1) 的、基于 key 级别的 get/put 等操作。 哈希表（又成散列表）是一种根据关键码值(Key-value)而直接进行访问的数据结构，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。 不同的 key，经过哈希函数转换后，可能得到同一个地址，这种情况称为哈希冲突。在 Java 的 HashMap 中，解决冲突的方式是使用链表法：通过将数组的每个元素对应一个链表，我们将相同的 hash(key) % size 放到对应下标的链表中即可。","head":[["meta",{"property":"og:url","content":"https://AlexChen68.github.com/blog/md/java/collection/map-hashmap.html"}],["meta",{"property":"og:site_name","content":"AlexChen's Blog"}],["meta",{"property":"og:title","content":"Map - HashMap 源码分析"}],["meta",{"property":"og:description","content":"概述 HashMap 是 java 中 Map 接口基于哈希表的实现，用于存储 key-value 键值对的数据结构，提供平均时间复杂度为 O(1) 的、基于 key 级别的 get/put 等操作。 哈希表（又成散列表）是一种根据关键码值(Key-value)而直接进行访问的数据结构，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做散列函数，存放记录的数组叫做散列表。 不同的 key，经过哈希函数转换后，可能得到同一个地址，这种情况称为哈希冲突。在 Java 的 HashMap 中，解决冲突的方式是使用链表法：通过将数组的每个元素对应一个链表，我们将相同的 hash(key) % size 放到对应下标的链表中即可。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-02-28T19:53:35.000Z"}],["meta",{"property":"article:tag","content":"Collection"}],["meta",{"property":"article:published_time","content":"2022-09-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-02-28T19:53:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Map - HashMap 源码分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-30T00:00:00.000Z\\",\\"dateModified\\":\\"2023-02-28T19:53:35.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"类图","slug":"类图","link":"#类图","children":[]},{"level":2,"title":"属性","slug":"属性","link":"#属性","children":[]},{"level":2,"title":"内部类","slug":"内部类","link":"#内部类","children":[{"level":3,"title":"Node<K, V>","slug":"node-k-v","link":"#node-k-v","children":[]},{"level":3,"title":"TreeNode<K, V>","slug":"treenode-k-v","link":"#treenode-k-v","children":[]}]},{"level":2,"title":"构造方法","slug":"构造方法","link":"#构造方法","children":[{"level":3,"title":"指定容量和负载因子","slug":"指定容量和负载因子","link":"#指定容量和负载因子","children":[]},{"level":3,"title":"指定容量","slug":"指定容量","link":"#指定容量","children":[]},{"level":3,"title":"无参构造","slug":"无参构造","link":"#无参构造","children":[]},{"level":3,"title":"指定 Map","slug":"指定-map","link":"#指定-map","children":[]}]},{"level":2,"title":"哈希函数","slug":"哈希函数","link":"#哈希函数","children":[]},{"level":2,"title":"数组扩容","slug":"数组扩容","link":"#数组扩容","children":[]},{"level":2,"title":"Map操作","slug":"map操作","link":"#map操作","children":[{"level":3,"title":"添加键值对","slug":"添加键值对","link":"#添加键值对","children":[]},{"level":3,"title":"查找键值对","slug":"查找键值对","link":"#查找键值对","children":[]},{"level":3,"title":"链表转为树","slug":"链表转为树","link":"#链表转为树","children":[]},{"level":3,"title":"清空 Map","slug":"清空-map","link":"#清空-map","children":[]},{"level":3,"title":"序列化","slug":"序列化","link":"#序列化","children":[]},{"level":3,"title":"反序列化","slug":"反序列化","link":"#反序列化","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1677486677000,"updatedTime":1677614015000,"contributors":[{"name":"AlexChen","email":"1274812218@qq.com","commits":2}]},"readingTime":{"minutes":16.02,"words":4806},"filePathRelative":"md/java/collection/map-hashmap.md","localizedDate":"2022年9月30日","excerpt":"<h2> 概述</h2>\\n<p><code>HashMap</code> 是 java 中 Map 接口基于哈希表的实现，用于存储 key-value 键值对的数据结构，提供平均时间复杂度为 O(1) 的、基于 key 级别的 get/put 等操作。</p>\\n<p><strong>哈希表</strong>（又成散列表）是一种根据关键码值(Key-value)而直接进行访问的数据结构，它通过把关键码值映射到表中一个位置来访问记录，以加快查找的速度。这个映射函数叫做<strong>散列函数</strong>，存放记录的数组叫做散列表。</p>\\n<p>不同的 key，经过哈希函数转换后，可能得到同一个地址，这种情况称为<strong>哈希冲突</strong>。在 Java 的 HashMap 中，解决冲突的方式是使用<strong>链表法</strong>：通过将数组的每个元素对应一个链表，我们将相同的 <code>hash(key) % size</code> 放到对应下标的链表中即可。</p>","autoDesc":true}`);export{e as data};

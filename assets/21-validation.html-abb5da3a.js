import{_ as n,W as s,X as a,a1 as t}from"./framework-ea95e8eb.js";const e={},o=t(`<h2 id="数据验证" tabindex="-1"><a class="header-anchor" href="#数据验证" aria-hidden="true">#</a> 数据验证</h2><p>Spring 提供了 <code>Validator</code> 接口用来进行对象的数据验证。<code>Validator</code> 接口在进行数据验证的时候会要求传入一个 <code>Errors</code> 对象，当有错误产生时会将错误信息放入该对象。</p><p><code>Validator</code> 接口：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Validator</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Errors</span> errors<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Spring 提供了 <code>ValidationUtils</code> 工具类用来在数据验证错误时，封装错误信息返回。</p><h2 id="数据绑定" tabindex="-1"><a class="header-anchor" href="#数据绑定" aria-hidden="true">#</a> 数据绑定</h2><h3 id="beanwrapper" tabindex="-1"><a class="header-anchor" href="#beanwrapper" aria-hidden="true">#</a> BeanWrapper</h3><p><code>org.springframework.beans</code> 包的 <code>BeanWrapper</code> 类是 Bean 的包装器，它的主要工作，就是对任何一个 bean，进行属性（包括内嵌属性）的设置和方法的调用，<code>BeanWrapper</code> 的默认实现类是 <code>BeanWrapperImpl</code>。</p><p>设置和获取属性是通过使用 <code>BeanWrapper</code>的 <code>setPropertyValue</code>和 <code>getPropertyValues</code> 方法完成的。</p><p>JavaBeans 规范具有指示对象属性的约定：</p><table><thead><tr><th style="text-align:left;">Expression</th><th style="text-align:left;">Explanation</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;">表示属性 <code>name</code> 与 <code>getName()</code> 或 <code>isName()</code> 和 <code>setName(..)</code> 方法相对应</td></tr><tr><td style="text-align:left;"><code>account.name</code></td><td style="text-align:left;">表示 <code>account</code> 属性的嵌套属性 <code>name</code> 与 <code>getAccount().setName()</code> 或 <code>getAccount().getName()</code> 相对应。</td></tr><tr><td style="text-align:left;"><code>account[2]</code></td><td style="text-align:left;">表示索引属性 <code>account</code> 的第_3_个属性。索引属性可以是 <code>array</code>, <code>list</code>，其他自然排序的集合。</td></tr><tr><td style="text-align:left;"><code>account[COMPANYNAME]</code></td><td style="text-align:left;">表示映射属性 <code>account</code> 是键为 <code>COMPANYNAME</code> 的值。</td></tr></tbody></table><p>使用示例：</p><p>Company 类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Employee</span> managingDirector<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Employee</span> <span class="token function">getManagingDirector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>managingDirector<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setManagingDirector</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> managingDirector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>managingDirector <span class="token operator">=</span> managingDirector<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Employee 类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">float</span> salary<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> salary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSalary</span><span class="token punctuation">(</span><span class="token keyword">float</span> salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>属性设置示例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BeanWrapper</span> company <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanWrapperImpl</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Company</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// setting the company name..</span>
company<span class="token punctuation">.</span><span class="token function">setPropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Some Company Inc.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ... can also be done like this:</span>
<span class="token class-name">PropertyValue</span> value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Some Company Inc.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
company<span class="token punctuation">.</span><span class="token function">setPropertyValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// ok, let&#39;s create the director and tie it to the company:</span>
<span class="token class-name">BeanWrapper</span> jim <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanWrapperImpl</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
jim<span class="token punctuation">.</span><span class="token function">setPropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Jim Stravinsky&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
company<span class="token punctuation">.</span><span class="token function">setPropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;managingDirector&quot;</span><span class="token punctuation">,</span> jim<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// retrieving the salary of the managingDirector through the company</span>
<span class="token class-name">Float</span> salary <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Float</span><span class="token punctuation">)</span> company<span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span><span class="token string">&quot;managingDirector.salary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="propertyeditor-简介" tabindex="-1"><a class="header-anchor" href="#propertyeditor-简介" aria-hidden="true">#</a> PropertyEditor 简介</h3><p>Spring 使用 <code>PropertyEditor</code>的概念来实现 Object 和 String 的转换，简单说就是字符串和其他对象的类型转换器，通过 setAsText 设置，再通过 getValue 获取转换值。</p><p><code>PropertyEditor</code> 位于 JDK 的扩展包 <strong>rt.jar</strong> 的 <code>java.beans</code> 包中，其子类 <code>PropertyEditorSupport</code> 提供了默认的实现，Spring 中提供了很多不同类型的 PropertyEditor 实现都继承了 <code>PropertyEditorSupport</code>。</p><p>在 Spring 中使用属性编辑的几个示例：</p><ul><li>通过使用 <code>PropertyEditor</code> 实现来设置 bean 的属性。当您使用 <code>java.lang.String</code> 作为您在 XML 文件中声明的某个 bean 的属性的值时，Spring 将 (如果相应属性的 setter 具有类参数) 使用 <code>ClassEditor</code> 尝试将参数解析为类对象。</li><li>在 Spring 的 MVC 框架中解析 HTTP 请求参数是通过使用各种 <code>PropertyEditor</code> 实现来完成的，您可以在 <code>CommandController</code> 的所有子类中手动绑定它们。</li></ul><p>Spring 内置了许多 <code>PropertyEditor</code> 用于简化处理。它们都位于 <code>org.springframework.beans.propertyeditors</code> 包中。大多数 (但不是全部，如下表所示) 默认情况下由 <code>BeanWrapperImpl</code> 注册。当属性编辑器以某种方式进行配置时，开发者仍可以注册自定义的变体用于覆盖默认的变量。下表描述了 Spring 提供的各种 <code>PropertyEditor</code> 实现：</p><table><thead><tr><th style="text-align:left;">类</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ByteArrayPropertyEditor</code></td><td style="text-align:left;">字节数组的编辑器。将字符串转换为其对应的字节表示形式。 <code>BeanWrapperImpl</code> 默认注册。</td></tr><tr><td style="text-align:left;"><code>ClassEditor</code></td><td style="text-align:left;">将表示类的字符串解析为实际的类，反之亦然。找不到类时，抛出 <code>IllegalArgumentException</code>。默认情况下，由 <code>BeanWrapperImpl</code> 注册。</td></tr><tr><td style="text-align:left;"><code>CustomBooleanEditor</code></td><td style="text-align:left;"><code>Boolean</code> 属性的可自定义属性编辑器。默认情况下，由 <code>BeanWrapperImpl</code> 注册，但可以通过将其自定义实例注册为自定义编辑器来覆盖。</td></tr><tr><td style="text-align:left;"><code>CustomCollectionEditor</code></td><td style="text-align:left;"><code>Collection</code> 的属性编辑器，将任何源 <code>Collection</code> 转换为给定的目标 <code>Collection</code> 类型。</td></tr><tr><td style="text-align:left;"><code>CustomDateEditor</code></td><td style="text-align:left;"><code>java.util.Date</code> 的可自定义属性编辑器，支持自定义 <code>DateFormat</code>. 默认未注册。必须根据需要使用适当的格式进行用户注册。</td></tr><tr><td style="text-align:left;"><code>CustomNumberEditor</code></td><td style="text-align:left;">任何 <code>Number</code> 子类的可自定义属性编辑器，例如 <code>Integer</code>， <code>Long</code>， <code>Float</code> 或 <code>Double</code>。默认情况下，由 <code>BeanWrapperImpl</code> 注册，但可以通过将其自定义实例注册为自定义编辑器来覆盖。</td></tr><tr><td style="text-align:left;"><code>FileEditor</code></td><td style="text-align:left;">将字符串解析为 <code>java.io.File</code> 对象。默认情况下，由 <code>BeanWrapperImpl</code> 注册。</td></tr><tr><td style="text-align:left;"><code>InputStreamEditor</code></td><td style="text-align:left;">单向属性编辑器，可以获取字符串并生成 (通过中间 <code>ResourceEditor</code> 和 <code>Resource</code>) <code>InputStream</code>，以便 <code>InputStream</code> 属性可以直接设置为字符串。请注意，默认用法不会为您关闭 <code>InputStream</code>. 默认情况下，由 <code>BeanWrapperImpl</code> 注册。</td></tr><tr><td style="text-align:left;"><code>LocaleEditor</code></td><td style="text-align:left;">可以将字符串解析为 <code>Locale</code> 对象，反之亦然 (字符串格式为 <code>*[country]*[variant]</code>，与 <code>Locale</code> 的 <code>toString()</code> 方法相同) 。默认情况下，由 <code>BeanWrapperImpl</code> 注册。</td></tr><tr><td style="text-align:left;"><code>PatternEditor</code></td><td style="text-align:left;">可以将字符串解析为 <code>java.util.regex.Pattern</code> 对象，反之亦然。</td></tr><tr><td style="text-align:left;"><code>PropertiesEditor</code></td><td style="text-align:left;">可以将字符串 (使用 <code>java.util.Properties</code> 类的 javadoc 中定义的格式进行格式化) 转换为 <code>Properties</code> 对象。默认情况下，由 <code>BeanWrapperImpl</code> 注册。</td></tr><tr><td style="text-align:left;"><code>StringTrimmerEditor</code></td><td style="text-align:left;">修剪字符串的属性编辑器。 (可选) 允许将空字符串转换为 <code>null</code>。默认情况下未注册 - 必须是用户注册的。</td></tr><tr><td style="text-align:left;"><code>URLEditor</code></td><td style="text-align:left;">可以将 URL 的字符串表示形式解析为实际的 <code>URL</code> 对象。默认情况下，由 <code>BeanWrapperImpl</code> 注册。</td></tr></tbody></table><h3 id="自定义-propertyeditor" tabindex="-1"><a class="header-anchor" href="#自定义-propertyeditor" aria-hidden="true">#</a> 自定义 PropertyEditor</h3><p>可以通过直接实现 <code>PropertyEditor</code> 接口或者继承 <code>PropertyEditorSupport</code>类实现自定义的 PropertyEditor 实现。一个 TimeZoneEditor 示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeZoneEditor</span> <span class="token keyword">extends</span> <span class="token class-name">PropertyEditorSupport</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAsText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			text <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">parseTimeZoneString</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAsText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">TimeZone</span> value <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">TimeZone</span><span class="token punctuation">)</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> value<span class="token punctuation">.</span><span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Spring 中实现自定义的 PropertyEditor 后，还需要将自定义的 PropertyEditor 注测到 Spring 容器中。</p><h3 id="注册-propertyeditor" tabindex="-1"><a class="header-anchor" href="#注册-propertyeditor" aria-hidden="true">#</a> 注册 PropertyEditor</h3><h4 id="使用-propertyeditorregistrar" tabindex="-1"><a class="header-anchor" href="#使用-propertyeditorregistrar" aria-hidden="true">#</a> 使用 <code>PropertyEditorRegistrar</code></h4><p>使用 Spring 容器注册属性编辑器的一个策略是创建和使用 <code>PropertyEditorRegistrar</code>，<code>PropertyEditorRegistrar</code> 与另外一个称为 <code>PropertyEditorRegistry</code> 的接口一起工作。</p><p><code>org.springframework.beans.PropertyEditorRegistry</code> 是 Spring 中的 <code>PropertyEditor</code> 注册器接口，通过 <code>registerCustomEditor</code> 方法，可以将适用某一对象类型的 PropertyEditor 实现类注册到 Spring 中，<code>PropertyEditorRegistrySupport</code> 是其默认实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">CustomPropertyEditorRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">PropertyEditorRegistrar</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerCustomEditors</span><span class="token punctuation">(</span><span class="token class-name">PropertyEditorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registry<span class="token punctuation">.</span><span class="token function">registerCustomEditor</span><span class="token punctuation">(</span><span class="token class-name">ExoticType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ExoticTypeEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-customeditorconfigurer" tabindex="-1"><a class="header-anchor" href="#使用-customeditorconfigurer" aria-hidden="true">#</a> 使用 <code>CustomEditorConfigurer</code></h4><p>通过 <code>customEditorConfigurer</code> 配置类的 <code>setCustomEditors</code> 方法，可以以 Map 的形式，注册 PropertyEditor 的实现类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">CustomEditorConfigurer</span> <span class="token function">customEditorConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CustomEditorConfigurer</span> configurer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomEditorConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">PropertyEditor</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> editors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    editors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token constant">URL</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">URLEditor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    configurer<span class="token punctuation">.</span><span class="token function">setCustomEditors</span><span class="token punctuation">(</span>editors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> configurer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以使用 <code>customEditorConfigurer</code> 注册 <code>PropertyEditorRegistrar</code> 实例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">CustomPropertyEditorRegistrar</span> <span class="token function">customPropertyEditorRegistrar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CustomPropertyEditorRegistrar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">CustomEditorConfigurer</span> <span class="token function">customEditorConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">CustomEditorConfigurer</span> configurer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomEditorConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    configurer<span class="token punctuation">.</span><span class="token function">setPropertyEditorRegistrars</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PropertyEditorRegistrar</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token function">customPropertyEditorRegistrar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> configurer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2>`,40),p=[o];function c(l,i){return s(),a("div",null,p)}const d=n(e,[["render",c],["__file","21-validation.html.vue"]]);export{d as default};

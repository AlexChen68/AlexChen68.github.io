const e=JSON.parse(`{"key":"v-0a9faa24","path":"/md/java/concurrency/basic/thread.html","title":"Java 线程类和接口","lang":"zh-CN","frontmatter":{"title":"Java 线程类和接口","date":"2022-09-30T00:00:00.000Z","tag":"JUC","category":"Concurrency","description":"Thread 类和 Runnable 接口 在 Java 中，我们是如何使用多线程的呢？ 首先，我们需要有一个“线程”类。JDK 提供了 Thread 类和 Runnable 接口来让我们实现自己的“线程”类。 继承 Thread 类，并重写 run 方法； 实现 Runnable 接口的 run 方法。 继承 Thread 类","head":[["meta",{"property":"og:url","content":"https://github.com/AlexChen68/AlexChen68.github.io/md/java/concurrency/basic/thread.html"}],["meta",{"property":"og:site_name","content":"AlexChen's Blog"}],["meta",{"property":"og:title","content":"Java 线程类和接口"}],["meta",{"property":"og:description","content":"Thread 类和 Runnable 接口 在 Java 中，我们是如何使用多线程的呢？ 首先，我们需要有一个“线程”类。JDK 提供了 Thread 类和 Runnable 接口来让我们实现自己的“线程”类。 继承 Thread 类，并重写 run 方法； 实现 Runnable 接口的 run 方法。 继承 Thread 类"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-22T17:38:15.000Z"}],["meta",{"property":"article:tag","content":"JUC"}],["meta",{"property":"article:published_time","content":"2022-09-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-22T17:38:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 线程类和接口\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-09-30T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-22T17:38:15.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Thread 类和 Runnable 接口","slug":"thread-类和-runnable-接口","link":"#thread-类和-runnable-接口","children":[{"level":3,"title":"继承 Thread 类","slug":"继承-thread-类","link":"#继承-thread-类","children":[]},{"level":3,"title":"实现 Runnable 接口","slug":"实现-runnable-接口","link":"#实现-runnable-接口","children":[]}]},{"level":2,"title":"Callable、Future 与 FutureTask","slug":"callable、future-与-futuretask","link":"#callable、future-与-futuretask","children":[{"level":3,"title":"实现 Callable 接口","slug":"实现-callable-接口","link":"#实现-callable-接口","children":[]},{"level":3,"title":"Future 接口","slug":"future-接口","link":"#future-接口","children":[]},{"level":3,"title":"FutureTask 类","slug":"futuretask-类","link":"#futuretask-类","children":[]},{"level":3,"title":"CompletableFuture 类","slug":"completablefuture-类","link":"#completablefuture-类","children":[]}]},{"level":2,"title":"Thread 常用方法","slug":"thread-常用方法","link":"#thread-常用方法","children":[{"level":3,"title":"start()","slug":"start","link":"#start","children":[]},{"level":3,"title":"yield()","slug":"yield","link":"#yield","children":[]},{"level":3,"title":"sleep()","slug":"sleep","link":"#sleep","children":[]},{"level":3,"title":"join()","slug":"join","link":"#join","children":[]},{"level":3,"title":"setDaemon()","slug":"setdaemon","link":"#setdaemon","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1678731122000,"updatedTime":1679506695000,"contributors":[{"name":"AlexChen","email":"1274812218@qq.com","commits":2},{"name":"alexchen68","email":"1274812218@qq.com","commits":1}]},"readingTime":{"minutes":8.56,"words":2568},"filePathRelative":"md/java/concurrency/basic/thread.md","localizedDate":"2022年9月30日","excerpt":"<h2> Thread 类和 Runnable 接口</h2>\\n<p>在 Java 中，我们是如何使用多线程的呢？</p>\\n<p>首先，我们需要有一个“线程”类。JDK 提供了 <code>Thread</code> 类和 <code>Runnable</code> 接口来让我们实现自己的“线程”类。</p>\\n<ul>\\n<li>继承 <code>Thread</code> 类，并重写 <code>run</code> 方法；</li>\\n<li>实现 <code>Runnable</code> 接口的 <code>run</code> 方法。</li>\\n</ul>\\n<h3> 继承 Thread 类 </h3>","autoDesc":true}`);export{e as data};

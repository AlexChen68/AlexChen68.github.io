import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.419948d5.js";const m=JSON.parse('{"title":"Mysql 主从复制和读写分离","description":"","frontmatter":{"title":"Mysql 主从复制和读写分离","date":"2023-06-15T00:00:00.000Z"},"headers":[],"relativePath":"database/mysql/3.4-master-slave.md","filePath":"database/mysql/3.4-master-slave.md","lastUpdated":1697399636000}'),p={name:"database/mysql/3.4-master-slave.md"},o=l(`<h2 id="mysql-主从" tabindex="-1">Mysql 主从 <a class="header-anchor" href="#mysql-主从" aria-label="Permalink to &quot;Mysql 主从&quot;">​</a></h2><h3 id="什么是-mysql-主从复制" tabindex="-1">什么是 Mysql 主从复制 <a class="header-anchor" href="#什么是-mysql-主从复制" aria-label="Permalink to &quot;什么是 Mysql 主从复制&quot;">​</a></h3><p>两台或以上的数据库实例，通过binlog日志实现数据异步同步的关系。</p><h3 id="主从复制原理" tabindex="-1">主从复制原理 <a class="header-anchor" href="#主从复制原理" aria-label="Permalink to &quot;主从复制原理&quot;">​</a></h3><p>(1) change ,start slave 语句后，从库获取主库复制信息，启动复制线程</p><p>(2) IO线程,读取master.info 获取连接信息，连接主库，主库分配DUMP</p><p>(3) IO线程,通过<a href="http://master.xn--info-e76fo7jgudfupcwqph7f" target="_blank" rel="noreferrer">http://master.info获取复制信息</a>，向主库Dump线程请求binlog</p><p>(4) DUMP 返回binlog日志信息。</p><p>(5) IO线程 接收日志 。存储到TCPIP 缓存中。</p><p>(6) IO线程写日志到relaylog中，更新master.info</p><p>(7) SQL线程读取relay-log.info ,执行新的relay。更新relay-log.info</p><p>(8) relaylog定期自动删除</p><p>(9) 主库有通知从库有新日志产生。</p><h3 id="配置-mysql-主从" tabindex="-1">配置 Mysql 主从 <a class="header-anchor" href="#配置-mysql-主从" aria-label="Permalink to &quot;配置 Mysql 主从&quot;">​</a></h3><ol><li>启动两个 mysql 实例，一台主服务器，一台从服务器</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># 创建网络</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">network</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mysql</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 启动主节点</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mysql-master</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--net</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mysql</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3306</span><span style="color:#9ECBFF;">:3306</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">D:/Docker/mysql-slave/conf:/etc/mysql/conf.d</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">D:/Docker/mysql-slave/data:/var/lib/mysql</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">D:/Docker/mysql-slave/logs:/var/log/mysql</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">MYSQL_ROOT_PASSWORD=root</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mysql</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 启动从节点</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mysql-slave</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--net</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mysql</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">13306</span><span style="color:#9ECBFF;">:3306</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">D:/Docker/mysql-slave/conf:/etc/mysql/conf.d</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">D:/Docker/mysql-slave/data:/var/lib/mysql</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">D:/Docker/mysql-slave/logs:/var/log/mysql</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">MYSQL_ROOT_PASSWORD=root</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mysql</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># 创建网络</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">network</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysql</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 启动主节点</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysql-master</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--net</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysql</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3306</span><span style="color:#032F62;">:3306</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">D:/Docker/mysql-slave/conf:/etc/mysql/conf.d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">D:/Docker/mysql-slave/data:/var/lib/mysql</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">D:/Docker/mysql-slave/logs:/var/log/mysql</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MYSQL_ROOT_PASSWORD=root</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysql</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 启动从节点</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysql-slave</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--net</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysql</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">13306</span><span style="color:#032F62;">:3306</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">D:/Docker/mysql-slave/conf:/etc/mysql/conf.d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">D:/Docker/mysql-slave/data:/var/lib/mysql</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> </span><span style="color:#032F62;">D:/Docker/mysql-slave/logs:/var/log/mysql</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MYSQL_ROOT_PASSWORD=root</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mysql</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="2"><li>增加主服务器配置 <code>/etc/mysql/conf.d/my.cnf</code>，然后重启数据库</li></ol><div class="language-ini vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">[mysqld]</span></span>
<span class="line"><span style="color:#F97583;">server-id</span><span style="color:#E1E4E8;"> = 1        </span><span style="color:#6A737D;"># 节点ID，确保唯一</span></span>
<span class="line"><span style="color:#6A737D;"># log config</span></span>
<span class="line"><span style="color:#F97583;">log-bin</span><span style="color:#E1E4E8;"> = mysql-bin     </span><span style="color:#6A737D;">#开启mysql的binlog日志功能，binlog日志位置</span></span>
<span class="line"><span style="color:#F97583;">sync_binlog</span><span style="color:#E1E4E8;"> = 1         </span><span style="color:#6A737D;">#控制数据库的binlog刷到磁盘上去 , 0 不控制，性能最好，1每次事物提交都会刷到日志文件中，性能最差，最安全</span></span>
<span class="line"><span style="color:#F97583;">binlog_format</span><span style="color:#E1E4E8;"> = mixed   </span><span style="color:#6A737D;">#binlog日志格式，mysql默认采用statement，建议使用mixed</span></span>
<span class="line"><span style="color:#F97583;">expire_logs_days</span><span style="color:#E1E4E8;"> = 7                           </span><span style="color:#6A737D;">#binlog过期清理时间</span></span>
<span class="line"><span style="color:#F97583;">max_binlog_size</span><span style="color:#E1E4E8;"> = 100m                    </span><span style="color:#6A737D;">#binlog每个日志文件大小</span></span>
<span class="line"><span style="color:#F97583;">binlog_cache_size</span><span style="color:#E1E4E8;"> = 4m                        </span><span style="color:#6A737D;">#binlog缓存大小</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">binlog-do-db</span><span style="color:#E1E4E8;">=daydayup </span><span style="color:#6A737D;">#需要同步的数据库</span></span>
<span class="line"><span style="color:#F97583;">max_binlog_cache_size</span><span style="color:#E1E4E8;">= 512m              </span><span style="color:#6A737D;">#最大binlog缓存大</span></span>
<span class="line"><span style="color:#F97583;">binlog-ignore-db</span><span style="color:#E1E4E8;">=mysql </span><span style="color:#6A737D;">#不生成日志文件的数据库，多个忽略数据库可以用逗号拼接，或者复制这句话，写多行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">auto-increment-offset</span><span style="color:#E1E4E8;"> = 1     </span><span style="color:#6A737D;"># 自增值的偏移量</span></span>
<span class="line"><span style="color:#F97583;">auto-increment-increment</span><span style="color:#E1E4E8;"> = 1  </span><span style="color:#6A737D;"># 自增值的自增量</span></span>
<span class="line"><span style="color:#F97583;">replica_skip_errors</span><span style="color:#E1E4E8;"> = all </span><span style="color:#6A737D;">#跳过从库错误</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">[mysqld]</span></span>
<span class="line"><span style="color:#D73A49;">server-id</span><span style="color:#24292E;"> = 1        </span><span style="color:#6A737D;"># 节点ID，确保唯一</span></span>
<span class="line"><span style="color:#6A737D;"># log config</span></span>
<span class="line"><span style="color:#D73A49;">log-bin</span><span style="color:#24292E;"> = mysql-bin     </span><span style="color:#6A737D;">#开启mysql的binlog日志功能，binlog日志位置</span></span>
<span class="line"><span style="color:#D73A49;">sync_binlog</span><span style="color:#24292E;"> = 1         </span><span style="color:#6A737D;">#控制数据库的binlog刷到磁盘上去 , 0 不控制，性能最好，1每次事物提交都会刷到日志文件中，性能最差，最安全</span></span>
<span class="line"><span style="color:#D73A49;">binlog_format</span><span style="color:#24292E;"> = mixed   </span><span style="color:#6A737D;">#binlog日志格式，mysql默认采用statement，建议使用mixed</span></span>
<span class="line"><span style="color:#D73A49;">expire_logs_days</span><span style="color:#24292E;"> = 7                           </span><span style="color:#6A737D;">#binlog过期清理时间</span></span>
<span class="line"><span style="color:#D73A49;">max_binlog_size</span><span style="color:#24292E;"> = 100m                    </span><span style="color:#6A737D;">#binlog每个日志文件大小</span></span>
<span class="line"><span style="color:#D73A49;">binlog_cache_size</span><span style="color:#24292E;"> = 4m                        </span><span style="color:#6A737D;">#binlog缓存大小</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">binlog-do-db</span><span style="color:#24292E;">=daydayup </span><span style="color:#6A737D;">#需要同步的数据库</span></span>
<span class="line"><span style="color:#D73A49;">max_binlog_cache_size</span><span style="color:#24292E;">= 512m              </span><span style="color:#6A737D;">#最大binlog缓存大</span></span>
<span class="line"><span style="color:#D73A49;">binlog-ignore-db</span><span style="color:#24292E;">=mysql </span><span style="color:#6A737D;">#不生成日志文件的数据库，多个忽略数据库可以用逗号拼接，或者复制这句话，写多行</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">auto-increment-offset</span><span style="color:#24292E;"> = 1     </span><span style="color:#6A737D;"># 自增值的偏移量</span></span>
<span class="line"><span style="color:#D73A49;">auto-increment-increment</span><span style="color:#24292E;"> = 1  </span><span style="color:#6A737D;"># 自增值的自增量</span></span>
<span class="line"><span style="color:#D73A49;">replica_skip_errors</span><span style="color:#24292E;"> = all </span><span style="color:#6A737D;">#跳过从库错误</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ol start="3"><li>增加从服务器配置 <code>/etc/mysql/conf.d/my.cnf</code>，然后重启数据库</li></ol><div class="language-ini vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">[mysqld]</span></span>
<span class="line"><span style="color:#F97583;">server-id</span><span style="color:#E1E4E8;">=2</span></span>
<span class="line"><span style="color:#F97583;">log-bin</span><span style="color:#E1E4E8;">=mysql-bin </span><span style="color:#6A737D;"># 如果从数据库，不需要再往其他数据库同步，可以注释掉</span></span>
<span class="line"><span style="color:#F97583;">relay-log</span><span style="color:#E1E4E8;">=slave-relay-bin </span><span style="color:#6A737D;"># 必须开启，从主数据库同步的binlog会写入到该目录下</span></span>
<span class="line"><span style="color:#F97583;">relay-log-index</span><span style="color:#E1E4E8;">=slave-relay-bin</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">[mysqld]</span></span>
<span class="line"><span style="color:#D73A49;">server-id</span><span style="color:#24292E;">=2</span></span>
<span class="line"><span style="color:#D73A49;">log-bin</span><span style="color:#24292E;">=mysql-bin </span><span style="color:#6A737D;"># 如果从数据库，不需要再往其他数据库同步，可以注释掉</span></span>
<span class="line"><span style="color:#D73A49;">relay-log</span><span style="color:#24292E;">=slave-relay-bin </span><span style="color:#6A737D;"># 必须开启，从主数据库同步的binlog会写入到该目录下</span></span>
<span class="line"><span style="color:#D73A49;">relay-log-index</span><span style="color:#24292E;">=slave-relay-bin</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="4"><li>（可选）在主服务器创建一个用户，专门用来同步数据</li></ol><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">#如果使用navicate创建用户，需要修改加密方式</span></span>
<span class="line"><span style="color:#F97583;">alter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">user</span><span style="color:#E1E4E8;"> xxx identified </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> mysql_native_password </span><span style="color:#F97583;">by</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;password&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">#修改host改为所有ip</span></span>
<span class="line"><span style="color:#F97583;">update</span><span style="color:#E1E4E8;"> user </span><span style="color:#F97583;">set</span><span style="color:#E1E4E8;"> host</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;%&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">where</span><span style="color:#E1E4E8;"> user</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;xxx&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">#授权不需要加密码</span></span>
<span class="line"><span style="color:#F97583;">grant</span><span style="color:#E1E4E8;"> replication SLAVE </span><span style="color:#F97583;">on</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">.</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">to</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;xxx&#39;</span><span style="color:#E1E4E8;">@</span><span style="color:#9ECBFF;">&#39;%&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">#如果使用navicate创建用户，需要修改加密方式</span></span>
<span class="line"><span style="color:#D73A49;">alter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">user</span><span style="color:#24292E;"> xxx identified </span><span style="color:#D73A49;">with</span><span style="color:#24292E;"> mysql_native_password </span><span style="color:#D73A49;">by</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;password&#39;</span></span>
<span class="line"><span style="color:#24292E;">#修改host改为所有ip</span></span>
<span class="line"><span style="color:#D73A49;">update</span><span style="color:#24292E;"> user </span><span style="color:#D73A49;">set</span><span style="color:#24292E;"> host</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;%&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">where</span><span style="color:#24292E;"> user</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;xxx&#39;</span></span>
<span class="line"><span style="color:#24292E;">#授权不需要加密码</span></span>
<span class="line"><span style="color:#D73A49;">grant</span><span style="color:#24292E;"> replication SLAVE </span><span style="color:#D73A49;">on</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">.</span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">to</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;xxx&#39;</span><span style="color:#24292E;">@</span><span style="color:#032F62;">&#39;%&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="5"><li>登录主服务器，查看主服务器 master 状态</li></ol><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">show </span><span style="color:#F97583;">master</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">status</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">show </span><span style="color:#D73A49;">master</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">status</span><span style="color:#24292E;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>记录下 <code>file</code> 和 <code>position</code> 属性</p><ol start="6"><li>登录从服务器，设置 slave 信息</li></ol><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;"># 先停止 slave 服务</span></span>
<span class="line"><span style="color:#F97583;">stop</span><span style="color:#E1E4E8;"> slave;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 设置 </span><span style="color:#F97583;">master</span><span style="color:#E1E4E8;"> 同步信息，修改信息为实际信息，后两项为上面从主服务器获取的 </span><span style="color:#9ECBFF;">\`file\`</span><span style="color:#E1E4E8;"> 和 </span><span style="color:#9ECBFF;">\`position\`</span><span style="color:#E1E4E8;"> 属性</span></span>
<span class="line"><span style="color:#E1E4E8;">change </span><span style="color:#F97583;">master</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">to</span><span style="color:#E1E4E8;"> master_host</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;172.18.0.2&#39;</span><span style="color:#E1E4E8;">, master_port</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">3306</span><span style="color:#E1E4E8;">,master_user</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">, master_password</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">,master_log_file</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;mysql-bin.000004&#39;</span><span style="color:#E1E4E8;">,master_log_pos</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">5018</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 启动 slave 服务</span></span>
<span class="line"><span style="color:#F97583;">start</span><span style="color:#E1E4E8;"> slave;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"># 查看 slave 状态，观察到如下图所示启动成功</span></span>
<span class="line"><span style="color:#E1E4E8;">show slave </span><span style="color:#F97583;">status</span><span style="color:#E1E4E8;"> \\G;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;"># 先停止 slave 服务</span></span>
<span class="line"><span style="color:#D73A49;">stop</span><span style="color:#24292E;"> slave;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># 设置 </span><span style="color:#D73A49;">master</span><span style="color:#24292E;"> 同步信息，修改信息为实际信息，后两项为上面从主服务器获取的 </span><span style="color:#032F62;">\`file\`</span><span style="color:#24292E;"> 和 </span><span style="color:#032F62;">\`position\`</span><span style="color:#24292E;"> 属性</span></span>
<span class="line"><span style="color:#24292E;">change </span><span style="color:#D73A49;">master</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">to</span><span style="color:#24292E;"> master_host</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;172.18.0.2&#39;</span><span style="color:#24292E;">, master_port</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">3306</span><span style="color:#24292E;">,master_user</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">, master_password</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">,master_log_file</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;mysql-bin.000004&#39;</span><span style="color:#24292E;">,master_log_pos</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">5018</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># 启动 slave 服务</span></span>
<span class="line"><span style="color:#D73A49;">start</span><span style="color:#24292E;"> slave;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"># 查看 slave 状态，观察到如下图所示启动成功</span></span>
<span class="line"><span style="color:#24292E;">show slave </span><span style="color:#D73A49;">status</span><span style="color:#24292E;"> \\G;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/images/2023/1686762625238.png" alt=""></p><ol start="7"><li>在主服务器增加数据，自动同步数据到从数据库相应数据库即设置成功（同步哪些数据库由上述的配置文件设定）</li></ol><h2 id="读写分离" tabindex="-1">读写分离 <a class="header-anchor" href="#读写分离" aria-label="Permalink to &quot;读写分离&quot;">​</a></h2><h3 id="什么是读写分离" tabindex="-1">什么是读写分离？ <a class="header-anchor" href="#什么是读写分离" aria-label="Permalink to &quot;什么是读写分离？&quot;">​</a></h3><p><strong>读写分离主要是为了将对数据库的读写操作分散到不同的数据库节点上</strong>。 这样的话，就能够小幅提升写性能，大幅提升读性能。</p><p>一般情况下，我们都会选择一主多从，也就是一台主数据库负责写，其他的从数据库负责读。主库和从库之间会进行数据同步，以保证从库中数据的准确性。这样的架构实现起来比较简单，并且也符合系统的写少读多的特点。</p><h3 id="读写分离会带来什么问题-如何解决" tabindex="-1">读写分离会带来什么问题？如何解决？ <a class="header-anchor" href="#读写分离会带来什么问题-如何解决" aria-label="Permalink to &quot;读写分离会带来什么问题？如何解决？&quot;">​</a></h3><p>问题：</p><p>读写分离对于提升数据库的并发非常有效，但是，同时也会引来一个问题：主库和从库的数据存在延迟，比如你写完主库之后，主库的数据同步到从库是需要时间的，这个时间差就导致了主库和从库的数据不一致性问题。这也就是我们经常说的<strong>主从同步延迟</strong> 。</p><p>解决方案：</p><ol><li>强制将读请求路由到主库处理。</li></ol><p>既然你从库的数据过期了，那我就直接从主库读取嘛！这种方案虽然会增加主库的压力，但是，实现起来比较简单，也是我了解到的使用最多的一种方式。</p><p>比如 Sharding-JDBC 就是采用的这种方案。通过使用 Sharding-JDBC 的 HintManager 分片键值管理器，我们可以强制使用主库。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">HintManager hintManager </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> HintManager.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">hintManager.</span><span style="color:#B392F0;">setMasterRouteOnly</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 继续JDBC操作</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">HintManager hintManager </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> HintManager.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">hintManager.</span><span style="color:#6F42C1;">setMasterRouteOnly</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// 继续JDBC操作</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>对于这种方案，你可以将那些必须获取最新数据的读请求都交给主库处理。</p><ol start="2"><li>延迟读取。</li></ol><p>还有一些朋友肯定会想既然主从同步存在延迟，那我就在延迟之后读取啊，比如主从同步延迟 0.5s,那我就 1s 之后再读取数据。这样多方便啊！方便是方便，但是也很扯淡。</p><p>不过，如果你是这样设计业务流程就会好很多：对于一些对数据比较敏感的场景，你可以在完成写请求之后，避免立即进行请求操作。比如你支付成功之后，跳转到一个支付成功的页面，当你点击返回之后才返回自己的账户。</p><h3 id="shardingsphere-实现读写分离" tabindex="-1">ShardingSphere 实现读写分离 <a class="header-anchor" href="#shardingsphere-实现读写分离" aria-label="Permalink to &quot;ShardingSphere 实现读写分离&quot;">​</a></h3><blockquote><p>TODO</p></blockquote>`,47),e=[o];function r(c,t,y,i,E,d){return a(),n("div",null,e)}const F=s(p,[["render",r]]);export{m as __pageData,F as default};

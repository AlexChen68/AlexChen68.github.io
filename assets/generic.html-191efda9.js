const e=JSON.parse(`{"key":"v-44a72397","path":"/java/basic/generic.html","title":"Java 泛型机制","lang":"zh-CN","frontmatter":{"title":"Java 泛型机制","category":"Java","order":5,"date":"2023-04-13T00:00:00.000Z","description":"为什么会引入泛型 引入泛型的意义在于： 适用于多种数据类型执行相同的代码（代码复用） 泛型中的类型在使用时指定，不需要强制类型转换（类型安全，编译器会检查类型） 泛型的基本使用 泛型接口和泛型类 在接口和类的名称后面，通过 &lt;Name1, Name2, ...&gt; 的格式定义一至多个泛型类型，在该接口或者类中都可以该类型。 public interface List&lt;E&gt; extends Collection&lt;E&gt; { }","head":[["meta",{"property":"og:url","content":"https://github.com/AlexChen68/AlexChen68.github.io/java/basic/generic.html"}],["meta",{"property":"og:site_name","content":"AlexChen's Blog"}],["meta",{"property":"og:title","content":"Java 泛型机制"}],["meta",{"property":"og:description","content":"为什么会引入泛型 引入泛型的意义在于： 适用于多种数据类型执行相同的代码（代码复用） 泛型中的类型在使用时指定，不需要强制类型转换（类型安全，编译器会检查类型） 泛型的基本使用 泛型接口和泛型类 在接口和类的名称后面，通过 &lt;Name1, Name2, ...&gt; 的格式定义一至多个泛型类型，在该接口或者类中都可以该类型。 public interface List&lt;E&gt; extends Collection&lt;E&gt; { }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-13T11:38:25.000Z"}],["meta",{"property":"article:author","content":"AlexChen"}],["meta",{"property":"article:published_time","content":"2023-04-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-13T11:38:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 泛型机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-13T11:38:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AlexChen\\",\\"url\\":\\"https://github.com/AlexChen68\\"}]}"]]},"headers":[{"level":2,"title":"为什么会引入泛型","slug":"为什么会引入泛型","link":"#为什么会引入泛型","children":[]},{"level":2,"title":"泛型的基本使用","slug":"泛型的基本使用","link":"#泛型的基本使用","children":[]},{"level":2,"title":"泛型的上限和下限","slug":"泛型的上限和下限","link":"#泛型的上限和下限","children":[]},{"level":2,"title":"泛型的类型擦除","slug":"泛型的类型擦除","link":"#泛型的类型擦除","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1681385905000,"updatedTime":1681385905000,"contributors":[{"name":"alexchen68","email":"1274812218@qq.com","commits":1}]},"readingTime":{"minutes":3.68,"words":1105},"filePathRelative":"java/basic/generic.md","localizedDate":"2023年4月13日","excerpt":"<h2> 为什么会引入泛型</h2>\\n<p>引入泛型的意义在于：</p>\\n<ul>\\n<li>适用于多种数据类型执行相同的代码（代码复用）</li>\\n<li>泛型中的类型在使用时指定，不需要强制类型转换（类型安全，编译器会检查类型）</li>\\n</ul>\\n<h2> 泛型的基本使用</h2>\\n<ul>\\n<li>泛型接口和泛型类</li>\\n</ul>\\n<p>在接口和类的名称后面，通过 <code>&lt;Name1, Name2, ...&gt;</code> 的格式定义一至多个泛型类型，在该接口或者类中都可以该类型。</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">E</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Collection</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">E</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token punctuation\\">{</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}`);export{e as data};

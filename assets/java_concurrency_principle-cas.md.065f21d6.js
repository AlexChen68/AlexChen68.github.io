import{_ as n,C as p,o as e,c as l,k as s,a as o,H as c,Q as t}from"./chunks/framework.419948d5.js";const F=JSON.parse('{"title":"原理篇 - CAS 与原子操作","description":"","frontmatter":{"title":"原理篇 - CAS 与原子操作","date":"2023-03-17T00:00:00.000Z"},"headers":[],"relativePath":"java/concurrency/principle-cas.md","filePath":"java/concurrency/principle-cas.md","lastUpdated":1697504454000}'),r={name:"java/concurrency/principle-cas.md"},i=t(`<h2 id="乐观锁与悲观锁的概念" tabindex="-1">乐观锁与悲观锁的概念 <a class="header-anchor" href="#乐观锁与悲观锁的概念" aria-label="Permalink to &quot;乐观锁与悲观锁的概念&quot;">​</a></h2><p>锁可以从不同的角度分类。其中，乐观锁和悲观锁是一种分类方式。</p><p><strong>悲观锁：</strong></p><p>悲观锁就是我们常说的锁。对于悲观锁来说，它总是认为每次访问共享资源时会发生冲突，所以必须对每次数据操作加上锁，以保证临界区的程序同一时间只能有一个线程在执行。</p><p><strong>乐观锁：</strong></p><p>乐观锁又称为“无锁”，顾名思义，它是乐观派。乐观锁总是假设对共享资源的访问没有冲突，线程可以不停地执行，无需加锁也无需等待。而一旦多个线程发生冲突，乐观锁通常是使用一种称为 CAS 的技术来保证线程执行的安全性。</p><p>由于无锁操作中没有锁的存在，因此不可能出现死锁的情况，也就是说<strong>乐观锁天生免疫死锁</strong>。</p><p>乐观锁多用于“读多写少“的环境，避免频繁加锁影响性能；而悲观锁多用于”写多读少“的环境，避免频繁失败和重试影响性能。</p><h2 id="cas-的概念" tabindex="-1">CAS 的概念 <a class="header-anchor" href="#cas-的概念" aria-label="Permalink to &quot;CAS 的概念&quot;">​</a></h2><p>CAS 的全称是：比较并交换（Compare And Swap）。在 CAS 中，有这样三个值：</p><ul><li>V：要更新的变量 (var)</li><li>E：预期值 (expected)</li><li>N：新值 (new)</li></ul><p>比较并交换的过程如下：</p><p>判断 V 是否等于 E，如果等于，将 V 的值设置为 N；如果不等，说明已经有其它线程更新了 V，则当前线程放弃更新，什么都不做。</p><p>所以这里的<strong>预期值 E 本质上指的是“旧值”</strong>。</p><p>我们以一个简单的例子来解释这个过程：</p><ol><li>如果有一个多个线程共享的变量<code>i</code>原本等于 5，我现在在线程 A 中，想把它设置为新的值 6;</li><li>我们使用 CAS 来做这个事情；</li><li>首先我们用 i 去与 5 对比，发现它等于 5，说明没有被其它线程改过，那我就把它设置为新的值 6，此次 CAS 成功，<code>i</code>的值被设置成了 6；</li><li>如果不等于 5，说明<code>i</code>被其它线程改过了（比如现在<code>i</code>的值为 2），那么我就什么也不做，此次 CAS 失败，<code>i</code>的值仍然为 2。</li></ol><p>在这个例子中，<code>i</code>就是 V，5 就是 E，6 就是 N。</p><p>那有没有可能我在判断了<code>i</code>为 5 之后，正准备更新它的新值的时候，被其它线程更改了<code>i</code>的值呢？</p><p>不会的。因为 CAS 是一种原子操作，它是一种系统原语，是一条 CPU 的原子指令，从 CPU 层面保证它的原子性</p><p><strong>当多个线程同时使用 CAS 操作一个变量时，只有一个会胜出，并成功更新，其余均会失败，但失败的线程并不会被挂起，仅是被告知失败，并且允许再次尝试，当然也允许失败的线程放弃操作。</strong></p><h2 id="java-实现-cas-的原理-unsafe-类" tabindex="-1">Java 实现 CAS 的原理 - Unsafe 类 <a class="header-anchor" href="#java-实现-cas-的原理-unsafe-类" aria-label="Permalink to &quot;Java 实现 CAS 的原理 - Unsafe 类&quot;">​</a></h2><p>前面提到，CAS 是一种原子操作。那么 Java 是怎样来使用 CAS 的呢？我们知道，在 Java 中，如果一个方法是 native 的，那 Java 就不负责具体实现它，而是交给底层的 JVM 使用 c 或者 c++去实现。</p><p>在 Java 中，有一个<code>Unsafe</code>类，它在<code>sun.misc</code>包中。它里面是一些<code>native</code>方法，其中就有几个关于 CAS 的：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compareAndSwapObject</span><span style="color:#E1E4E8;">(Object o, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> offset,Object expected, Object x);</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compareAndSwapInt</span><span style="color:#E1E4E8;">(Object o, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> offset,</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> expected,</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x);</span></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compareAndSwapLong</span><span style="color:#E1E4E8;">(Object o, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> offset,</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> expected,</span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> x);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compareAndSwapObject</span><span style="color:#24292E;">(Object o, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> offset,Object expected, Object x);</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compareAndSwapInt</span><span style="color:#24292E;">(Object o, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> offset,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> expected,</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x);</span></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compareAndSwapLong</span><span style="color:#24292E;">(Object o, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> offset,</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> expected,</span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> x);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当然，他们都是<code>public native</code>的。</p><p>Unsafe 中对 CAS 的实现是 C++写的，它的具体实现和操作系统、CPU 都有关系。</p><p>Linux 的 X86 下主要是通过<code>cmpxchgl</code>这个指令在 CPU 级完成 CAS 操作的，但在多处理器情况下必须使用<code>lock</code>指令加锁来完成。当然不同的操作系统和处理器的实现会有所不同，大家可以自行了解。</p><p>当然，Unsafe 类里面还有其它方法用于不同的用途。比如支持线程挂起和恢复的<code>park</code>和<code>unpark</code>，LockSupport 类底层就是调用了这两个方法。还有支持反射操作的<code>allocateInstance()</code>方法。</p><h2 id="原子操作-atomicinteger-类源码简析" tabindex="-1">原子操作-AtomicInteger 类源码简析 <a class="header-anchor" href="#原子操作-atomicinteger-类源码简析" aria-label="Permalink to &quot;原子操作-AtomicInteger 类源码简析&quot;">​</a></h2><p>上面介绍了 Unsafe 类的几个支持 CAS 的方法。那 Java 具体是如何使用这几个方法来实现原子操作的呢？</p><p>JDK 提供了一些用于原子操作的类，在<code>java.util.concurrent.atomic</code>包下面。在 JDK 11 中，有如下 17 个类：</p><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/blog/java/%E5%8E%9F%E5%AD%90%E7%B1%BB.jpg" alt="原子类"></p><p>从名字就可以看得出来这些类大概的用途：</p><ul><li>原子更新基本类型</li><li>原子更新数组</li><li>原子更新引用</li><li>原子更新字段（属性）</li></ul><p>这里我们以<code>AtomicInteger</code>类的<code>getAndAdd(int delta)</code>方法为例，来看看 Java 是如何实现原子操作的。</p><p>先看看这个方法的源码：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAndAdd</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> delta) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> U.</span><span style="color:#B392F0;">getAndAddInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">, VALUE, delta);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAndAdd</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> delta) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> U.</span><span style="color:#6F42C1;">getAndAddInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">, VALUE, delta);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这里的 U 其实就是一个<code>Unsafe</code>对象：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> jdk.internal.misc.Unsafe U </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> jdk.internal.misc.Unsafe.</span><span style="color:#B392F0;">getUnsafe</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> jdk.internal.misc.Unsafe U </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> jdk.internal.misc.Unsafe.</span><span style="color:#6F42C1;">getUnsafe</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>所以其实<code>AtomicInteger</code>类的<code>getAndAdd(int delta)</code>方法是调用<code>Unsafe</code>类的方法来实现的：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">HotSpotIntrinsicCandidate</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getAndAddInt</span><span style="color:#E1E4E8;">(Object o, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> offset, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> delta) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> v;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">do</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        v </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getIntVolatile</span><span style="color:#E1E4E8;">(o, offset);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#B392F0;">weakCompareAndSetInt</span><span style="color:#E1E4E8;">(o, offset, v, v </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> delta));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> v;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">HotSpotIntrinsicCandidate</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getAndAddInt</span><span style="color:#24292E;">(Object o, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> offset, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> delta) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> v;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">do</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        v </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getIntVolatile</span><span style="color:#24292E;">(o, offset);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">weakCompareAndSetInt</span><span style="color:#24292E;">(o, offset, v, v </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> delta));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> v;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>注：这个方法是在 JDK 1.8 才新增的。在 JDK1.8 之前，<code>AtomicInteger</code>源码实现有所不同，是基于 for 死循环的，有兴趣的读者可以自行了解一下。</p></blockquote><p>我们来一步步解析这段源码。首先，对象<code>o</code>是<code>this</code>，也就是一个<code>AtomicInteger</code>对象。然后<code>offset</code>是一个常量<code>VALUE</code>。这个常量是在<code>AtomicInteger</code>类中声明的：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> VALUE </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> U.</span><span style="color:#B392F0;">objectFieldOffset</span><span style="color:#E1E4E8;">(AtomicInteger.class, </span><span style="color:#9ECBFF;">&quot;value&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> VALUE </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> U.</span><span style="color:#6F42C1;">objectFieldOffset</span><span style="color:#24292E;">(AtomicInteger.class, </span><span style="color:#032F62;">&quot;value&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>同样是调用的<code>Unsafe</code>的方法。从方法名字上来看，是得到了一个对象字段偏移量。</p><blockquote><p>用于获取某个字段相对 Java 对象的“起始地址”的偏移量。</p><p>一个 java 对象可以看成是一段内存，各个字段都得按照一定的顺序放在这段内存里，同时考虑到对齐要求，可能这些字段不是连续放置的，</p><p>用这个方法能准确地告诉你某个字段相对于对象的起始内存地址的字节偏移量，因为是相对偏移量，所以它其实跟某个具体对象又没什么太大关系，跟 class 的定义和虚拟机的内存模型的实现细节更相关。</p></blockquote><p>继续看源码。前面我们讲到，CAS 是“无锁”的基础，它允许更新失败。所以经常会与 while 循环搭配，在失败后不断去重试。</p><p>这里声明了一个 v，也就是要返回的值。从<code>getAndAddInt</code>来看，它返回的应该是原来的值，而新的值的<code>v + delta</code>。</p><p>这里使用的是<strong>do-while 循环</strong>。这种循环不多见，它的目的是<strong>保证循环体内的语句至少会被执行一遍</strong>。这样才能保证 return 的值<code>v</code>是我们期望的值。</p><p>循环体的条件是一个 CAS 方法：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">weakCompareAndSetInt</span><span style="color:#E1E4E8;">(Object o, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> offset,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                          </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> expected,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                          </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compareAndSetInt</span><span style="color:#E1E4E8;">(o, offset, expected, x);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">native</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compareAndSetInt</span><span style="color:#E1E4E8;">(Object o, </span><span style="color:#F97583;">long</span><span style="color:#E1E4E8;"> offset,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                             </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> expected,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                             </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> x);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">weakCompareAndSetInt</span><span style="color:#24292E;">(Object o, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> offset,</span></span>
<span class="line"><span style="color:#24292E;">                                          </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> expected,</span></span>
<span class="line"><span style="color:#24292E;">                                          </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compareAndSetInt</span><span style="color:#24292E;">(o, offset, expected, x);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">native</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compareAndSetInt</span><span style="color:#24292E;">(Object o, </span><span style="color:#D73A49;">long</span><span style="color:#24292E;"> offset,</span></span>
<span class="line"><span style="color:#24292E;">                                             </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> expected,</span></span>
<span class="line"><span style="color:#24292E;">                                             </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> x);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>可以看到，最终其实是调用的我们之前说到了 CAS <code>native</code>方法。那为什么要经过一层<code>weakCompareAndSetInt</code>呢？从 JDK 源码上看不出来什么。在 JDK 8 及之前的版本，这两个方法是一样的。</p><blockquote><p>而在 JDK 9 开始，这两个方法上面增加了@HotSpotIntrinsicCandidate 注解。这个注解允许 HotSpot VM 自己来写汇编或 IR 编译器来实现该方法以提供性能。也就是说虽然外面看到的在 JDK9 中 weakCompareAndSet 和 compareAndSet 底层依旧是调用了一样的代码，但是不排除 HotSpot VM 会手动来实现 weakCompareAndSet 真正含义的功能的可能性。</p></blockquote><p>根据本文第二篇参考文章（文末链接），它跟<code>volatile</code>有关。</p><p>简单来说，<code>weakCompareAndSet</code>操作仅保留了<code>volatile</code>自身变量的特性，而除去了 happens-before 规则带来的内存语义。也就是说，<code>weakCompareAndSet</code>**无法保证处理操作目标的 volatile 变量外的其他变量的执行顺序 ( 编译器和处理器为了优化程序性能而对指令序列进行重新排序 )，同时也无法保证这些变量的可见性。**这在一定程度上可以提高性能。</p><p>再回到循环条件上来，可以看到它是在不断尝试去用 CAS 更新。如果更新失败，就继续重试。那为什么要把获取“旧值”v 的操作放到循环体内呢？其实这也很好理解。前面我们说了，CAS 如果旧值 V 不等于预期值 E，它就会更新失败。说明旧的值发生了变化。那我们当然需要返回的是被其他线程改变之后的旧值了，因此放在了 do 循环体内。</p><h2 id="cas-实现原子操作的三大问题" tabindex="-1">CAS 实现原子操作的三大问题 <a class="header-anchor" href="#cas-实现原子操作的三大问题" aria-label="Permalink to &quot;CAS 实现原子操作的三大问题&quot;">​</a></h2><p>这里介绍一下 CAS 实现原子操作的三大问题及其解决方案。</p><h3 id="aba-问题" tabindex="-1">ABA 问题 <a class="header-anchor" href="#aba-问题" aria-label="Permalink to &quot;ABA 问题&quot;">​</a></h3><p>所谓 ABA 问题，就是一个值原来是 A，变成了 B，又变回了 A。这个时候使用 CAS 是检查不出变化的，但实际上却被更新了两次。</p><p>ABA 问题的解决思路是在变量前面追加上<strong>版本号或者时间戳</strong>。从 JDK 1.5 开始，JDK 的 atomic 包里提供了一个类<code>AtomicStampedReference</code>类来解决 ABA 问题。</p><p>这个类的<code>compareAndSet</code>方法的作用是首先检查当前引用是否等于预期引用，并且检查当前标志是否等于预期标志，如果二者都相等，才使用 CAS 设置为新的值和标志。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">compareAndSet</span><span style="color:#E1E4E8;">(V   expectedReference,</span></span>
<span class="line"><span style="color:#E1E4E8;">                             V   newReference,</span></span>
<span class="line"><span style="color:#E1E4E8;">                             </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> expectedStamp,</span></span>
<span class="line"><span style="color:#E1E4E8;">                             </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> newStamp) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Pair&lt;</span><span style="color:#F97583;">V</span><span style="color:#E1E4E8;">&gt; current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pair;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">        expectedReference </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> current.reference </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        expectedStamp </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> current.stamp </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ((newReference </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> current.reference </span><span style="color:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="color:#E1E4E8;">          newStamp </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> current.stamp) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#B392F0;">casPair</span><span style="color:#E1E4E8;">(current, Pair.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(newReference, newStamp)));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">compareAndSet</span><span style="color:#24292E;">(V   expectedReference,</span></span>
<span class="line"><span style="color:#24292E;">                             V   newReference,</span></span>
<span class="line"><span style="color:#24292E;">                             </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> expectedStamp,</span></span>
<span class="line"><span style="color:#24292E;">                             </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> newStamp) {</span></span>
<span class="line"><span style="color:#24292E;">    Pair&lt;</span><span style="color:#D73A49;">V</span><span style="color:#24292E;">&gt; current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pair;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">        expectedReference </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> current.reference </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        expectedStamp </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> current.stamp </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">        ((newReference </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> current.reference </span><span style="color:#D73A49;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292E;">          newStamp </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> current.stamp) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">         </span><span style="color:#6F42C1;">casPair</span><span style="color:#24292E;">(current, Pair.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(newReference, newStamp)));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="循环时间长开销大" tabindex="-1">循环时间长开销大 <a class="header-anchor" href="#循环时间长开销大" aria-label="Permalink to &quot;循环时间长开销大&quot;">​</a></h3><p>CAS 多与自旋结合。如果自旋 CAS 长时间不成功，会占用大量的 CPU 资源。</p><p>解决思路是让 JVM 支持处理器提供的<strong>pause 指令</strong>。</p><p>pause 指令能让自旋失败时 cpu 睡眠一小段时间再继续自旋，从而使得读操作的频率低很多，为解决内存顺序冲突而导致的 CPU 流水线重排的代价也会小很多。</p><h3 id="只能保证一个共享变量的原子操作" tabindex="-1">只能保证一个共享变量的原子操作 <a class="header-anchor" href="#只能保证一个共享变量的原子操作" aria-label="Permalink to &quot;只能保证一个共享变量的原子操作&quot;">​</a></h3><p>这个问题你可能已经知道怎么解决了。有两种解决方案：</p><ol><li>使用 JDK 1.5 开始就提供的<code>AtomicReference</code>类保证对象之间的原子性，把多个变量放到一个对象里面进行 CAS 操作；</li><li>使用锁。锁内的临界区代码可以保证只有当前线程能操作。</li></ol><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2>`,71),E=s("a",{href:"http://concurrent.redspider.group/article/02/10.html",target:"_blank",rel:"noreferrer"},"CAS 与原子操作",-1),y=s("li",null,[s("a",{href:"http://www.importnew.com/27596.html",target:"_blank",rel:"noreferrer"},"对 volatile、compareAndSet、weakCompareAndSet 的一些思考")],-1),d=s("li",null,"《Java 并发编程的艺术》",-1);function b(u,A,m,h,g,v){const a=p("Badge");return e(),l("div",null,[i,s("ul",null,[s("li",null,[E,o(),c(a,{text:"原文",type:"tip"})]),y,d])])}const C=n(r,[["render",b]]);export{F as __pageData,C as default};

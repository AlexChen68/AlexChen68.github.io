import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.01af844e.js";const d=JSON.parse('{"title":"Java 日志框架","description":"","frontmatter":{"title":"Java 日志框架","date":"2022-09-30T00:00:00.000Z","tag":"日志"},"headers":[],"relativePath":"java/tool/1-log.md","filePath":"java/tool/1-log.md","lastUpdated":1701689478000}'),o={name:"java/tool/1-log.md"},p=l(`<h1 id="日志框架" tabindex="-1">日志框架 <a class="header-anchor" href="#日志框架" aria-label="Permalink to &quot;日志框架&quot;">​</a></h1><h2 id="日志简介" tabindex="-1">日志简介 <a class="header-anchor" href="#日志简介" aria-label="Permalink to &quot;日志简介&quot;">​</a></h2><p>在 Java 开发中，有各式各样的日志工具库来实现日志功能，本文介绍日志框架中的日志门面和日志库的区别以及常用的日志工具。</p><p>日志门面是日志功能的接口定义，而日志库是接口的实现。</p><p>常用的日志门面有：</p><ul><li><p>apache 的开源日志门面框架 common-logging</p></li><li><p>大神 Ceki Gulcu 开发的 slf4j 框架</p></li></ul><p>常用的日志库有：</p><ul><li>java.util.logging (JUL)</li><li>Log4j</li><li>Logback</li><li>Log4j2</li></ul><h2 id="日志门面" tabindex="-1">日志门面 <a class="header-anchor" href="#日志门面" aria-label="Permalink to &quot;日志门面&quot;">​</a></h2><h3 id="common-logging" tabindex="-1">common-logging <a class="header-anchor" href="#common-logging" aria-label="Permalink to &quot;common-logging&quot;">​</a></h3><blockquote><p>common-logging 是 apache 的一个开源项目。也称 Jakarta Commons Logging，缩写 JCL。</p></blockquote><p>common-logging 的功能是提供日志功能的 API 接口，本身并不提供日志的具体实现（当然，common-logging 内部有一个 Simple logger 的简单实现，但是功能很弱，直接忽略），而是在运行时动态的绑定日志实现组件来工作（如 log4j、java.util.loggin）。</p><p>官网地址：<a href="http://commons.apache.org/proper/commons-logging/" target="_blank" rel="noreferrer">http://commons.apache.org/proper/commons-logging/ (opens new window)</a></p><h3 id="slf4j" tabindex="-1">slf4j <a class="header-anchor" href="#slf4j" aria-label="Permalink to &quot;slf4j&quot;">​</a></h3><blockquote><p>全称为 Simple Logging Facade for Java，即 java 简单日志门面。</p></blockquote><p>类似于 Common-Logging，slf4j 是对不同日志框架提供的一个 API 封装，可以在部署的时候不修改任何配置即可接入一种日志实现方案。但是，slf4j 在编译时静态绑定真正的 Log 库。使用 SLF4J 时，如果你需要使用某一种日志实现，那么你必须选择正确的 SLF4J 的 jar 包的集合（各种桥接包）。</p><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/blog/java/slf4j_dependcies.png" alt="slf4j"></p><h3 id="比较" tabindex="-1">比较 <a class="header-anchor" href="#比较" aria-label="Permalink to &quot;比较&quot;">​</a></h3><p>slf4j 库类似于 Apache Common-Logging。但是，他在编译时静态绑定真正的日志库。这点似乎很麻烦，其实也不过是导入桥接 jar 包而已。</p><p>同时，slf4j 使用 <code>{}</code>作为字符串替换符，解决了需要使用 <code>logger.isDebugEnabled()</code> 来解决日志因为字符拼接产生的性能问题。</p><h2 id="日志库" tabindex="-1">日志库 <a class="header-anchor" href="#日志库" aria-label="Permalink to &quot;日志库&quot;">​</a></h2><h3 id="java-util-logging-jul" tabindex="-1">java.util.logging (JUL) <a class="header-anchor" href="#java-util-logging-jul" aria-label="Permalink to &quot;java.util.logging (JUL)&quot;">​</a></h3><p>JDK1.4 开始，通过 java.util.logging 提供日志功能。虽然是官方自带的 log lib，JUL 的使用确不广泛。主要原因：</p><ul><li>JUL 从 JDK1.4 才开始加入 (2002 年)，当时各种第三方 log lib 已经被广泛使用了</li><li>JUL 早期存在性能问题，到 JDK1.5 上才有了不错的进步，但现在和 Logback/Log4j2 相比还是有所不如</li><li>JUL的功能不如Logback/Log4j2等完善，比如Output Handler就没有Logback/Log4j2的丰富，有时候需要自己来继承定制，又比如默认没有从ClassPath里加载配置文件的功能</li></ul><h3 id="log4j" tabindex="-1">Log4j <a class="header-anchor" href="#log4j" aria-label="Permalink to &quot;Log4j&quot;">​</a></h3><p>Log4j 是 apache 的一个开源项目，创始人 Ceki Gulcu。Log4j 应该说是 Java 领域资格最老，应用最广的日志工具。Log4j 是高度可配置的，并可通过在运行时的外部文件配置。它根据记录的优先级别，并提供机制，以指示记录信息到许多的目的地，诸如：数据库，文件，控制台，UNIX 系统日志等。</p><p>Log4j 中有三个主要组成部分：</p><ul><li>loggers - 负责捕获记录信息。</li><li>appenders - 负责发布日志信息，以不同的首选目的地。</li><li>layouts - 负责格式化不同风格的日志信息。</li></ul><p>官网地址：<a href="http://logging.apache.org/log4j/2.x/" target="_blank" rel="noreferrer">http://logging.apache.org/log4j/2.x/ (opens new window)</a></p><p>Log4j 的短板在于性能，在 Logback 和 Log4j2 出来之后，Log4j 的使用也减少了。</p><h3 id="logback" tabindex="-1">Logback <a class="header-anchor" href="#logback" aria-label="Permalink to &quot;Logback&quot;">​</a></h3><p>Logback 是由 log4j 创始人 Ceki Gulcu 设计的又一个开源日志组件，是作为 Log4j 的继承者来开发的，提供了性能更好的实现，异步 logger，Filter 等更多的特性。</p><p>logback 当前分成三个模块：logback-core、logback-classic 和 logback-access。</p><ul><li>logback-core - 是其它两个模块的基础模块。</li><li>logback-classic - 是 log4j 的一个 改良版本。此外 logback-classic 完整实现 SLF4J API 使你可以很方便地更换成其它日志系统如 log4j 或 JDK14 Logging。</li><li>logback-access - 访问模块与 Servlet 容器集成提供通过 Http 来访问日志的功能。</li></ul><p>官网地址：<a href="http://logback.qos.ch/" target="_blank" rel="noreferrer">http://logback.qos.ch/ (opens new window)</a></p><h3 id="log4j2" tabindex="-1">Log4j2 <a class="header-anchor" href="#log4j2" aria-label="Permalink to &quot;Log4j2&quot;">​</a></h3><p>维护 Log4j 的人为了性能又搞出了 Log4j2。</p><p>Log4j2 和 Log4j1.x 并不兼容，设计上很大程度上模仿了 SLF4J/Logback，性能上也获得了很大的提升。</p><p>Log4j2 也做了 Facade/Implementation 分离的设计，分成了 log4j-api 和 log4j-core。</p><p>官网地址：<a href="http://logging.apache.org/log4j/2.x/" target="_blank" rel="noreferrer">http://logging.apache.org/log4j/2.x/ (opens new window)</a></p><h3 id="比较-1" tabindex="-1">比较 <a class="header-anchor" href="#比较-1" aria-label="Permalink to &quot;比较&quot;">​</a></h3><p>需要追求性能，选用 Log4j；否则 Logback + slf4j 的生态更强。</p><h2 id="slf4j-logback-的使用" tabindex="-1">Slf4j + Logback 的使用 <a class="header-anchor" href="#slf4j-logback-的使用" aria-label="Permalink to &quot;Slf4j + Logback 的使用&quot;">​</a></h2><ol><li>添加 maven 依赖，logback-classic 会自动将 slf4j-api 和 logback-core 也添加到你的项目中：</li></ol><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;ch.qos.logback&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;logback-classic&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;1.0.13&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;ch.qos.logback&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;logback-classic&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;1.0.13&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li>日志库配置</li></ol><p>logback 配置示例如下：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;?</span><span style="color:#85E89D;">xml</span><span style="color:#B392F0;"> version</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;1.0&quot;</span><span style="color:#B392F0;"> encoding</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;UTF-8&quot;</span><span style="color:#E1E4E8;">?&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;CONSOLE&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">encoder</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">encoder</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;FILE&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">encoder</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">charset</span><span style="color:#E1E4E8;">&gt;utf-8&lt;/</span><span style="color:#85E89D;">charset</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">encoder</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">file</span><span style="color:#E1E4E8;">&gt;log/output.log&lt;/</span><span style="color:#85E89D;">file</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">rollingPolicy</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">fileNamePattern</span><span style="color:#E1E4E8;">&gt;log/output.log.%i&lt;/</span><span style="color:#85E89D;">fileNamePattern</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">rollingPolicy</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">triggeringPolicy</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">MaxFileSize</span><span style="color:#E1E4E8;">&gt;1MB&lt;/</span><span style="color:#85E89D;">MaxFileSize</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">triggeringPolicy</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">level</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;INFO&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">appender-ref</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;CONSOLE&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">appender-ref</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;FILE&quot;</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">root</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;?</span><span style="color:#22863A;">xml</span><span style="color:#6F42C1;"> version</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;1.0&quot;</span><span style="color:#6F42C1;"> encoding</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;UTF-8&quot;</span><span style="color:#24292E;">?&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">appender</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;CONSOLE&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">appender</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">appender</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;FILE&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&lt;/</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">charset</span><span style="color:#24292E;">&gt;utf-8&lt;/</span><span style="color:#22863A;">charset</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">file</span><span style="color:#24292E;">&gt;log/output.log&lt;/</span><span style="color:#22863A;">file</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">rollingPolicy</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">fileNamePattern</span><span style="color:#24292E;">&gt;log/output.log.%i&lt;/</span><span style="color:#22863A;">fileNamePattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">rollingPolicy</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">triggeringPolicy</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">MaxFileSize</span><span style="color:#24292E;">&gt;1MB&lt;/</span><span style="color:#22863A;">MaxFileSize</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">triggeringPolicy</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">appender</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">root</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">level</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;INFO&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">appender-ref</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;CONSOLE&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">appender-ref</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;FILE&quot;</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">root</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><ol start="3"><li>使用日志</li></ol><p>方式一：定义一个 <code>Logger</code></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.slf4j.Logger;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.slf4j.LoggerFactory;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Logger log </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LoggerFactory.</span><span style="color:#B392F0;">getLogger</span><span style="color:#E1E4E8;">(App.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;print log, current level: {}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">trace</span><span style="color:#E1E4E8;">(msg, </span><span style="color:#9ECBFF;">&quot;trace&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(msg, </span><span style="color:#9ECBFF;">&quot;debug&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(msg, </span><span style="color:#9ECBFF;">&quot;info&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(msg, </span><span style="color:#9ECBFF;">&quot;warn&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(msg, </span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.slf4j.Logger;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.slf4j.LoggerFactory;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Logger log </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LoggerFactory.</span><span style="color:#6F42C1;">getLogger</span><span style="color:#24292E;">(App.class);</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;print log, current level: {}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">trace</span><span style="color:#24292E;">(msg, </span><span style="color:#032F62;">&quot;trace&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(msg, </span><span style="color:#032F62;">&quot;debug&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(msg, </span><span style="color:#032F62;">&quot;info&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(msg, </span><span style="color:#032F62;">&quot;warn&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(msg, </span><span style="color:#032F62;">&quot;error&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>方式二：引入 lombok 后，使用 <code>@Slf4j</code> 注解，会自动创建一个 <code>Logger</code></p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> lombok.extern.slf4j.Slf4j;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Slf4j</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        String msg </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;print log, current level: {}&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">trace</span><span style="color:#E1E4E8;">(msg, </span><span style="color:#9ECBFF;">&quot;trace&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(msg, </span><span style="color:#9ECBFF;">&quot;debug&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">info</span><span style="color:#E1E4E8;">(msg, </span><span style="color:#9ECBFF;">&quot;info&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">warn</span><span style="color:#E1E4E8;">(msg, </span><span style="color:#9ECBFF;">&quot;warn&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(msg, </span><span style="color:#9ECBFF;">&quot;error&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> lombok.extern.slf4j.Slf4j;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Slf4j</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        String msg </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;print log, current level: {}&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">trace</span><span style="color:#24292E;">(msg, </span><span style="color:#032F62;">&quot;trace&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(msg, </span><span style="color:#032F62;">&quot;debug&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">info</span><span style="color:#24292E;">(msg, </span><span style="color:#032F62;">&quot;info&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">warn</span><span style="color:#24292E;">(msg, </span><span style="color:#032F62;">&quot;warn&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(msg, </span><span style="color:#032F62;">&quot;error&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="日志框架选择及使用建议" tabindex="-1">日志框架选择及使用建议 <a class="header-anchor" href="#日志框架选择及使用建议" aria-label="Permalink to &quot;日志框架选择及使用建议&quot;">​</a></h2><ol><li>考虑优先使用 slf4j 日志门面；</li><li>新系统应该在 logback 和 log4j2 中做出选择，对于性能有很高要求的系统，应优先考虑 log4j2，否则应该先考虑 logback；</li><li>总是使用日志门面加日志库，而不是直接使用日志库；</li><li>只使用一个日志库框架，必要时从项目中排除第三方库中的其他日志库依赖；</li><li>在项目中，日志库的依赖强烈建议设置为 runtime scope，并且设置为 optional，防止将依赖传入使用者；</li><li>使用 <code>isDebugEnabled</code> 这样的日志等级判定和 <code>{}</code> 占位符，减少日志中不必要的字符串拼接开销；</li><li>日志格式中最好不要使用行号，函数名等字段，从当前的 <code>stacktrace</code> 中获取这些信息需要很大的开销。</li></ol><h2 id="logback-配置详解" tabindex="-1">Logback 配置详解 <a class="header-anchor" href="#logback-配置详解" aria-label="Permalink to &quot;Logback 配置详解&quot;">​</a></h2><h3 id="logback-的配置介绍" tabindex="-1">Logback 的配置介绍 <a class="header-anchor" href="#logback-的配置介绍" aria-label="Permalink to &quot;Logback 的配置介绍&quot;">​</a></h3><p><strong>Logger、appender 及 layout</strong></p><ul><li><p>Logger 作为日志的记录器，把它关联到应用的对应的 context 上后，主要用于存放日志对象，也可以定义日志类型、级别。</p></li><li><p>Appender 主要用于指定日志输出的目的地，目的地可以是控制台、文件、远程套接字服务器、MySQL、PostreSQL、Oracle 和其他数据库、JMS 和远程 UNIX Syslog 守护进程等。</p></li><li><p>Layout 负责把事件转换成字符串，格式化的日志信息的输出。</p></li></ul><p><strong>Logger context</strong></p><p>各个 logger 都被关联到一个 <strong>LoggerContext</strong>，LoggerContext 负责制造 logger，也负责以树结构排列各 logger。其他所有 logger 也通过 <code>org.slf4j.LoggerFactory</code> 类的静态方法 <code>getLogger()</code> 取得。getLogger 方法以 logger 名称为参数。用同一名字调用<code>LoggerFactory.getLogger</code> 方法所得到的永远都是同一个 logger 对象的引用。</p><p><strong>有效级别及级别的继承</strong></p><p>Logger 可以被分配级别。级别包括：TRACE、DEBUG、INFO、WARN 和 ERROR，定义于 ch.qos.logback.classic.Level 类。</p><p>如果 logger 没有被分配级别，那么它将从有被分配级别的最近的祖先那里继承级别。</p><p><strong>root</strong> logger 默认级别是 DEBUG。</p><p><strong>打印方法与基本的选择规则</strong></p><p>打印方法决定记录请求的级别。例如，如果 L 是一个 logger 实例，那么，语句 L.info(&quot;..&quot;) 是一条级别为 INFO 的记录语句。记录请求的级别在高于或等于其 logger 的有效级别时被称为被启用，否则，称为被禁用。记录请求级别为 p，其 logger 的有效级别为 q，只有则当 p&gt;=q 时，该请求才会被执行。</p><p>该规则是 logback 的核心。级别排序为： <strong>TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR</strong></p><h3 id="配置-logback" tabindex="-1">配置 logback <a class="header-anchor" href="#配置-logback" aria-label="Permalink to &quot;配置 logback&quot;">​</a></h3><p>可以通过编程或者配置 XML 脚本或者 Groovy 格式的方式来配置 logback。对于已经使用 log4j 的用户可以通过这个<a href="https://logback.qos.ch/translator/" target="_blank" rel="noreferrer">工具</a>来把 log4j.properties 转换为 logback.xml。</p><p>以下是 logback 的初始化步骤：</p><ol><li>logback 会在类路径下寻找名为 logback-test.xml 的文件。</li><li>如果没有找到，logback 会继续寻找名为 logback.groovy 的文件。</li><li>如果没有找到，logback 会继续寻找名为 logback.xml 的文件。</li><li>如果没有找到，将会通过 JDK 提供的 <a href="https://docs.oracle.com/javase/6/docs/api/java/util/ServiceLoader.html" target="_blank" rel="noreferrer">ServiceLoader</a> 工具在类路径下寻找文件 <em>META-INFO/services/ch.qos.logback.classic.spi.Configurator</em>，该文件的内容为实现了 <a href="https://logback.qos.ch/xref/ch/qos/logback/classic/spi/Configurator.html" target="_blank" rel="noreferrer"><code>Configurator</code></a> 接口的实现类的全限定类名。</li><li>如果以上都没有成功，logback 会通过 <a href="https://logback.qos.ch/xref/ch/qos/logback/classic/BasicConfigurator.html" target="_blank" rel="noreferrer">BasicConfigurator</a> 为自己进行配置，并且日志将会全部在控制台打印出来。</li></ol><p>最后一步的目的是为了保证在所有的配置文件都没有被找到的情况下，提供一个默认的（但是是非常基础的）配置。</p><p>如果你使用的是 maven，你可以在 <em>src/test/resources</em> 下新建 logback-test.xml。maven 会确保它不会被生成。所以你可以在测试环境中给配置文件命名为 <em>logback-test.xml</em>，在生产环境中命名为 <em>logback.xml</em>。</p><h3 id="logback-的默认配置" tabindex="-1">Logback 的默认配置 <a class="header-anchor" href="#logback-的默认配置" aria-label="Permalink to &quot;Logback 的默认配置&quot;">​</a></h3><p>如果配置文件 logback-test.xml 和 logback.xml 都不存在，那么 logback 默认地会调用 BasicConfigurator，创建一个最小化配置。最小化配置由一个关联到根 logger 的 ConsoleAppender 组成。输出用模式为%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n 的 PatternLayoutEncoder 进行格式化。root logger 默认级别是 DEBUG。</p><ul><li><p>Logback 的配置文件</p><p>Logback 配置文件的语法非常灵活。正因为灵活，所以无法用 DTD 或 XML schema 进行定义。尽管如此，可以这样描述配置文件的基本结构：以<code>&lt;configuration&gt;</code> 开头，后面有零个或多个 <code>&lt;appender&gt;</code> 元素，有零个或多个 <code>&lt;logger&gt;</code> 元素，有最多一个 <code>&lt;root&gt;</code> 元素。</p></li><li><p>Logback 默认配置的步骤</p></li></ul><ol><li>尝试在 classpath 下查找文件 logback-test.xml；</li><li>如果文件不存在，则查找文件 logback.xml；</li><li>如果两个文件都不存在，logback 用 BasicConfigurator 自动对自己进行配置，这会导致记录输出到控制台。</li></ol><h3 id="logback-xml-常用配置详解" tabindex="-1">logback.xml 常用配置详解 <a class="header-anchor" href="#logback-xml-常用配置详解" aria-label="Permalink to &quot;logback.xml 常用配置详解&quot;">​</a></h3><h4 id="根标签" tabindex="-1">根标签 <a class="header-anchor" href="#根标签" aria-label="Permalink to &quot;根标签&quot;">​</a></h4><p>根标签 <code>&lt;configuration&gt;</code> 包含下面三个属性：</p><ul><li>scan: 当此属性设置为 true 时，配置文件如果发生改变，将会被重新加载，默认值为 true。</li><li>scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当 scan 为 true 时，此属性生效。默认的时间间隔为 1 分钟。</li><li>debug: 当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。默认值为 false。</li></ul><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scan</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scanPeriod</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;60 seconds&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!--其他配置省略--&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scan</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scanPeriod</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;60 seconds&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--其他配置省略--&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="配置上下文名称" tabindex="-1">配置上下文名称 <a class="header-anchor" href="#配置上下文名称" aria-label="Permalink to &quot;配置上下文名称&quot;">​</a></h4><p><code>&lt;contextName&gt;</code> 用来设置上下文名称，每个 logger 都关联到 logger 上下文，默认上下文名称为 default。</p><p>但可以使用 <code>&lt;contextName&gt;</code> 设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scan</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scanPeriod</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;60 seconds&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">contextName</span><span style="color:#E1E4E8;">&gt;myAppName&lt;/</span><span style="color:#85E89D;">contextName</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!--其他配置省略--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scan</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scanPeriod</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;60 seconds&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">contextName</span><span style="color:#24292E;">&gt;myAppName&lt;/</span><span style="color:#22863A;">contextName</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--其他配置省略--&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="配置变量" tabindex="-1">配置变量 <a class="header-anchor" href="#配置变量" aria-label="Permalink to &quot;配置变量&quot;">​</a></h4><p><code>&lt;property&gt;</code> 用来定义变量值，它有两个属性 name 和 value，通过 <code>&lt;property&gt;</code> 定义的值会被插入到 logger 上下文中，可以使 <code>\${}</code> 来使用变量。</p><ul><li>name: 变量的名称</li><li>value: 变量定义的值</li></ul><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scan</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scanPeriod</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;60 seconds&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;APP_Name&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;myAppName&quot;</span><span style="color:#E1E4E8;"> /&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">contextName</span><span style="color:#E1E4E8;">&gt;\${APP_Name}&lt;/</span><span style="color:#85E89D;">contextName</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!--其他配置省略--&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scan</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scanPeriod</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;60 seconds&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;APP_Name&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;myAppName&quot;</span><span style="color:#24292E;"> /&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">contextName</span><span style="color:#24292E;">&gt;\${APP_Name}&lt;/</span><span style="color:#22863A;">contextName</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!--其他配置省略--&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="配置时间格式" tabindex="-1">配置时间格式 <a class="header-anchor" href="#配置时间格式" aria-label="Permalink to &quot;配置时间格式&quot;">​</a></h4><p><code>&lt;timestamp&gt;</code> 可以获取时间戳字符串，他有两个属性 key 和 datePattern。</p><ul><li>key: 标识此 <code>&lt;timestamp&gt;</code> 的名字；</li><li>datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循 <code>java.txt.SimpleDateFormat</code> 的格式。</li></ul><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scan</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;true&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">scanPeriod</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;60 seconds&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">timestamp</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;bySecond&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">datePattern</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;yyyyMMdd&#39;T&#39;HHmmss&quot;</span><span style="color:#E1E4E8;">/&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">contextName</span><span style="color:#E1E4E8;">&gt;\${bySecond}&lt;/</span><span style="color:#85E89D;">contextName</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- 其他配置省略--&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scan</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;true&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">scanPeriod</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;60 seconds&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">timestamp</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;bySecond&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">datePattern</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;yyyyMMdd&#39;T&#39;HHmmss&quot;</span><span style="color:#24292E;">/&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">contextName</span><span style="color:#24292E;">&gt;\${bySecond}&lt;/</span><span style="color:#22863A;">contextName</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 其他配置省略--&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="配置-appender" tabindex="-1">配置 Appender <a class="header-anchor" href="#配置-appender" aria-label="Permalink to &quot;配置 Appender&quot;">​</a></h4><p>appender 通过 <code>&lt;appender&gt;</code> 元素进行配置，需要两个强制的属性 <em>name</em> 与 <em>class</em>。<em>name</em> 属性用来指定 appender 的名字，<em>class</em> 属性需要指定类的全限定名用于实例化。</p><p><code>&lt;appender&gt;</code> 元素可以包含 0 或一个 <code>&lt;layout&gt;</code> 元素，0 或多个 <code>&lt;encoder&gt;</code> 元素，0 或多个 <code>&lt;filter&gt;</code> 元素。除了这些公共的元素之外，<code>&lt;appender&gt;</code> 元素可以包含任意与 appender 类的 JavaBean 属性相一致的元素。</p><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/blog/java/logback_appender_syntax.png" alt="appenderSyntax"></p><p><code>&lt;layout&gt;</code> 元素强制一个 class 属性去指定一个类的全限定名，用于实例化。与 <code>&lt;appender&gt;</code> 元素一样，<code>&lt;layout&gt;</code> 元素也可以包含与 layout 实例相关的属性。如果 layout 的 class 是 <code>PatternLayout</code>，那么 class 属性可以被隐藏掉（参考：[默认类映射](<a href="https://github.com/YLongo/logback-chinese-manual/blob/master/03%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9Alogback" target="_blank" rel="noreferrer">https://github.com/YLongo/logback-chinese-manual/blob/master/03第三章：logback</a> 的配置.md#默认类映射)），因为这个很常见。.</p><p><code>&lt;encoder</code> 元素强制一个 class 属性去指定一个类的全限定名，用于实例化。如果 encoder 的 class 是 <code>PatternLayoutEncoder</code>，那么基于[默认类映射](<a href="https://github.com/YLongo/logback-chinese-manual/blob/master/03%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9Alogback" target="_blank" rel="noreferrer">https://github.com/YLongo/logback-chinese-manual/blob/master/03第三章：logback</a> 的配置.md#默认类映射)，class 属性可以被隐藏。</p><p>Logback 有多种不同的 Appender，常用的如下：</p><ol><li><strong>ConsoleAppender</strong></li></ol><p>把日志输出到控制台，有以下子节点：</p><ul><li><code>&lt;encoder&gt;</code>：对日志进行格式化。（具体参数稍后讲解）</li><li><code>&lt;target&gt;</code>：字符串 System.out (默认) 或者 System.err（区别不多说了）</li></ul><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;STDOUT&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">encoder</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;%-4relative [%thread] %-5level %logger{35} - %msg %n&lt;/</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">encoder</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">level</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;DEBUG&quot;</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">appender-ref</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;STDOUT&quot;</span><span style="color:#E1E4E8;"> /&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">root</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">appender</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;STDOUT&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;%-4relative [%thread] %-5level %logger{35} - %msg %n&lt;/</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">appender</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">root</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">level</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;DEBUG&quot;</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">appender-ref</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;STDOUT&quot;</span><span style="color:#24292E;"> /&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">root</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="2"><li><strong>FileAppender</strong></li></ol><p>把日志添加到文件，有以下子节点：</p><ul><li><code>&lt;file&gt;</code>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。</li><li><code>&lt;append&gt;</code>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是 true。</li><li><code>&lt;encoder&gt;</code>：对记录事件进行格式化。（具体参数稍后讲解）。</li><li><code>&lt;prudent&gt;</code>：如果是 true，日志会被安全的写入文件，即使其他的 FileAppender 也在向此文件做写入操作，效率低，默认是 false。</li></ul><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;FILE&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.FileAppender&quot;</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">file</span><span style="color:#E1E4E8;">&gt;testFile.log&lt;/</span><span style="color:#85E89D;">file</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">append</span><span style="color:#E1E4E8;">&gt;true&lt;/</span><span style="color:#85E89D;">append</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">encoder</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;%-4relative [%thread] %-5level %logger{35} - %msg%n&lt;/</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">encoder</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">root</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">level</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;DEBUG&quot;</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">appender-ref</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;FILE&quot;</span><span style="color:#E1E4E8;"> /&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#85E89D;">root</span><span style="color:#E1E4E8;">&gt; </span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">configuration</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">appender</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;FILE&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.FileAppender&quot;</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">file</span><span style="color:#24292E;">&gt;testFile.log&lt;/</span><span style="color:#22863A;">file</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">append</span><span style="color:#24292E;">&gt;true&lt;/</span><span style="color:#22863A;">append</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;%-4relative [%thread] %-5level %logger{35} - %msg%n&lt;/</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">appender</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">root</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">level</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;DEBUG&quot;</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">appender-ref</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;FILE&quot;</span><span style="color:#24292E;"> /&gt; </span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#22863A;">root</span><span style="color:#24292E;">&gt; </span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">configuration</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ol start="3"><li>RollingFileAppender</li></ol><p>滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：</p><ul><li><code>&lt;file&gt;</code>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。</li><li><code>&lt;append&gt;</code>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是 true。</li><li><code>&lt;rollingPolicy&gt;</code>：当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。属性 class 定义具体的滚动策略类。</li><li><code>&lt;triggeringPolicy&gt;</code>：告知 RollingFileAppender 合适激活滚动。</li></ul><p>Appender 的具体配置见<a href="https://github.com/YLongo/logback-chinese-manual/blob/master/04%E7%AC%AC%E5%9B%9B%E7%AB%A0%EF%BC%9AAppenders.md" target="_blank" rel="noreferrer">官方文档中文版</a>。</p><h4 id="配置-logger" tabindex="-1">配置 logger <a class="header-anchor" href="#配置-logger" aria-label="Permalink to &quot;配置 logger&quot;">​</a></h4><p><code>logger</code> 用来设置某一个包或具体的某一个类的日志打印级别、以及指定 &lt; appender&gt;。</p><p>通过 <code>&lt;logger&gt;</code> 标签来过 logger 进行配置，一个 <code>&lt;logger&gt;</code> 标签必须包含一个 <em>name</em> 属性，一个可选的 <em>level</em> 属性，一个可选 <em>additivity</em> 属性。</p><p><code>additivity</code> 的值为 <em>true</em> 或 <em>false</em>，为 true 时会继承父 logger 的 appender。</p><p><code>level</code> 的值为 TRACE，DEBUG，INFO，WARN，ERROR，ALL，OFF，INHERITED，NULL。当 <code>level</code> 的值为 INHERITED 或 NULL 时，将会强制 logger 继承上一层的级别。</p><p><code>&lt;logger&gt;</code> 元素至少包含 0 或多个 <code>&lt;appender-ref&gt;</code> 元素。每一个 appender 通过这种方式被添加到 logger 上。与 log4j 不同的是，logbakc-classic 不会关闭或移除任何之前在 logger 上定义好的的 appender。</p><p><code>&lt;root&gt;</code>: 它也是 &lt; logger &gt; 元素，但是它是根 logger, 是所有 logger 的上级。只有一个 level 属性，因为 name 已经被命名为 &quot;root&quot;, 且已经是最上级了。</p><p>示例：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">property</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;pattern&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;CONSOLE&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">class</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">encoder</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;\${pattern}&lt;/</span><span style="color:#85E89D;">pattern</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">encoder</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">appender</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">logger</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;org.springframework&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">level</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;WARN&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">additivity</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;false&quot;</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  	&lt;</span><span style="color:#85E89D;">appender-ref</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ref</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;CONSOLE&quot;</span><span style="color:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">logger</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">property</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;pattern&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">appender</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;CONSOLE&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">class</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;\${pattern}&lt;/</span><span style="color:#22863A;">pattern</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">encoder</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">appender</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">logger</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;org.springframework&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">level</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;WARN&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">additivity</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;false&quot;</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  	&lt;</span><span style="color:#22863A;">appender-ref</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ref</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;CONSOLE&quot;</span><span style="color:#24292E;">/&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">logger</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://pdai.tech/md/develop/package/dev-package-x-log.html" target="_blank" rel="noreferrer">Java 全栈知识体系</a></li><li><a href="https://www.cnblogs.com/warking/p/5710303.html" target="_blank" rel="noreferrer">行走在云端的愚公</a></li><li><a href="https://logback.qos.ch/manual/" target="_blank" rel="noreferrer">Logback 官方手册</a></li><li><a href="https://logbackcn.gitbook.io/logback/" target="_blank" rel="noreferrer">Logbach 中文文档</a></li></ul>`,125),e=[p];function t(r,c,E,y,i,g){return a(),n("div",null,e)}const b=s(o,[["render",t]]);export{d as __pageData,b as default};

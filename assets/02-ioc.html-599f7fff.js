import{_ as u,W as d,X as k,Y as m,a0 as a,a2 as t,Z as n,$ as s,a1 as p,G as r}from"./framework-51d990c7.js";const v={},b=n("p",null,"SpringIOC 容器是 Spring 的核心功能之一。",-1),h=p('<h2 id="spring-容器概述" tabindex="-1"><a class="header-anchor" href="#spring-容器概述" aria-hidden="true">#</a> Spring 容器概述</h2><p>Spring 控制反转(IOC)容器也称为依赖注入 (DI)。</p><p>这是一个过程：对象仅通过构造函数参数、工厂方法的参数或在对象实例被构造或从工厂方法返回后设置的属性来定义它们的依赖关系，然后容器在创建 bean 时注入这些依赖项。这个过程基本上是 bean 本身通过使用类的直接构造或诸如服务定位器模式之类的机制来控制其依赖关系的实例化或位置的逆过程（因此称为控制反转）。</p><p><strong>控制反转</strong>是一种思想，而<strong>依赖注入</strong>是一种<strong>设计模式</strong>，依赖注入是实现控制反转的一种方式，但是控制反转还有其他实现方式，比如 ServiceLocator。</p><p><code>org.springframework.context.ApplicationContext</code>接口代表 Spring IoC 容器，负责实例化、配置和组装 bean。容器通过读取配置元数据来获取关于要实例化、配置和组装哪些对象的指令。配置元数据通过 XML、Java 注释或 Java 代码维护，配置了组成应用程序的对象以及这些对象之间丰富的相互依赖关系。</p><h2 id="bean-概述" tabindex="-1"><a class="header-anchor" href="#bean-概述" aria-hidden="true">#</a> Bean 概述</h2><p>Spring IoC 容器管理一个或多个 bean。这些 bean 是使用提供给容器的配置元数据创建的（例如，以 XML <code>&lt;bean/&gt;</code>定义的形式）。</p><p>在容器本身中，这些 bean 定义表示为 <code>BeanDefinition</code> 对象，其中包含（以及其他信息）以下元数据：</p><ul><li>一个包限定的类名：通常是被定义的 bean 的实际实现类。</li><li>Bean 行为配置元素，它说明 bean 在容器中的行为方式（范围、生命周期回调等）。</li><li>对 bean 完成工作所需的其他 bean 的引用。这些引用也称为协作者或依赖项。</li><li>要在新创建的对象中设置的其他配置设置——例如，池的大小限制或在管理连接池的 bean 中使用的连接数。</li></ul><h2 id="配置元数据" tabindex="-1"><a class="header-anchor" href="#配置元数据" aria-hidden="true">#</a> 配置元数据</h2><p>配置元数据告诉 Spring 容器如何实例化、配置和组装应用程序中的对象。配置元数据有三种主要的配置形式：</p><ul><li><strong>传统的 Xml 文件配置</strong>：这种方式配置繁琐，不易维护，扩展性差，现在主要用来配置第三方类库或者一些配置工具类，因为第三方类不支持Spring注解。</li><li><strong>基于 Java 的配置类</strong>：这种方式适用性强，扩展性高，十分灵活，但是不适合大量配置，可读性较差，适用少量配置的情况。</li><li><strong>基于 Java 注解的配置</strong>：这种方式配置方便，容易维护，但是对于不能使用注解的第三方类库，只能使用上面两种方式。</li></ul>',12),g=n("ol",null,[n("li",null,[s("创建一个配置类， 添加 "),n("code",null,"@Configuration"),s("注解声明为配置类")]),n("li",null,[s("创建方法，方法上加上 "),n("code",null,"@Bean"),s("，该方法用于创建实例并返回，该实例创建后会交给spring管理，方法名建议与实例名相同（首字母小写）。注：实例类不需要加任何注解")])],-1),_=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Configuration"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"BeansConfig"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token doc-comment comment"},`/**
     * 注册名称为 userDao 的 Bean ”UserDaoImpl“
     */`),s(`
    `),n("span",{class:"token annotation punctuation"},"@Bean"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"userDao"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"UserDaoImpl"),s(),n("span",{class:"token function"},"userDao"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"UserDaoImpl"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token doc-comment comment"},`/**
     * 注册名称为 userService 的 Bean ”UserServiceImpl“
     */`),s(`
    `),n("span",{class:"token annotation punctuation"},"@Bean"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"userService"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"UserServiceImpl"),s(),n("span",{class:"token function"},"userService"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"UserServiceImpl"),s(" userService "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"UserServiceImpl"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        userService`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setUserDao"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"userDao"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" userService"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),y=n("p",null,"通过在类上加注解的方式，来声明一个类交给Spring管理，Spring会自动扫描带有@Component，@Controller，@Service，@Repository这四个注解的类，然后帮我们创建并管理，前提是需要先配置Spring的注解扫描器。",-1),f=n("ul",null,[n("li",null,[n("strong",null,"优点"),s("：开发便捷，通俗易懂，方便维护。")]),n("li",null,[n("strong",null,"缺点"),s("：具有局限性，对于一些第三方资源，无法添加注解。只能采用XML或JavaConfig的方式配置")])],-1),x=n("p",null,[n("strong",null,"举例"),s("：")],-1),w=n("ol",null,[n("li",null,[s("对类添加 "),n("code",null,"@Component"),s(" 相关的注解，比如 "),n("code",null,"@Controller"),s("，"),n("code",null,"@Service"),s("，"),n("code",null,"@Repository")]),n("li",null,[s("设置 "),n("code",null,"ComponentScan"),s(" 的 "),n("code",null,"basePackage"),s(": "),n("ol",null,[n("li",null,[n("code",null,"<context:component-scan base-package='tech.alexchen.xxx'>"),s("；")]),n("li",null,[s("或者 "),n("code",null,'@ComponentScan("tech.alexchen.xxx")'),s("注解；")]),n("li",null,[s("或者 "),n("code",null,'new AnnotationConfigApplicationContext("tech.alexchen.xxx")'),s("指定扫描的 basePackage。")])])])],-1),S=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Service"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"UserServiceImpl"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token doc-comment comment"},`/**
     * 注入 UserDaoImpl
     */`),s(`
    `),n("span",{class:"token annotation punctuation"},"@Autowired"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"UserDaoImpl"),s(" userDao"),n("span",{class:"token punctuation"},";"),s(`
  
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"User"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"findUserList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(" userDao"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"findUserList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),B=n("ol",null,[n("li",null,"配置 spring.xml 文件"),n("li",null,"声明命名空间和配置 bean")],-1),C=n("div",{class:"language-xml line-numbers-mode","data-ext":"xml"},[n("pre",{class:"language-xml"},[n("code",null,[n("span",{class:"token prolog"},'<?xml version="1.0" encoding="UTF-8"?>'),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("beans")]),s(),n("span",{class:"token attr-name"},"xmlns"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("http://www.springframework.org/schema/beans"),n("span",{class:"token punctuation"},'"')]),s(`
    `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"xmlns:"),s("xsi")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("http://www.w3.org/2001/XMLSchema-instance"),n("span",{class:"token punctuation"},'"')]),s(`
    `),n("span",{class:"token attr-name"},[n("span",{class:"token namespace"},"xsi:"),s("schemaLocation")]),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s(`http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd`),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`

    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("bean")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("..."),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("..."),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`  
        `),n("span",{class:"token comment"},"<!-- collaborators and configuration for this bean go here -->"),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("bean")]),n("span",{class:"token punctuation"},">")]),s(`

    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("bean")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("..."),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("..."),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
        `),n("span",{class:"token comment"},"<!-- collaborators and configuration for this bean go here -->"),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("bean")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token comment"},"<!-- more bean definitions go here -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("beans")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),A=n("p",null,[n("code",null,"id"),s("属性是标识单个 bean 定义的字符串；")],-1),D=n("p",null,[n("code",null,"class"),s("属性定义 bean 的类型并使用完全限定的类名。")],-1),j=n("h2",{id:"使用容器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用容器","aria-hidden":"true"},"#"),s(" 使用容器")],-1),q=n("p",null,[n("code",null,"ApplicationContext"),s(" 是一个容器高级工厂的接口，能够维护不同 bean 及其依赖项的注册表，可以通过实例化不同实现类去使用不同的配置方式。")],-1),P=n("p",null,[s("通过使用 "),n("code",null,"getBean(String name， Class<T> requiredType)"),s("，可以从容器获取 bean 的实例。")],-1),I=n("p",null,[n("code",null,"ClassPathXmlApplicationContext"),s(" 是 "),n("code",null,"ApplicationContext"),s(" 的实现类，通过它可以从 XML 文件读取 Bean 配置。")],-1),U=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 从 spring.xml 中加载配置，实例化 Context"),s(`
`),n("span",{class:"token class-name"},"ApplicationContext"),s(" context "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ClassPathXmlApplicationContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"spring.xml"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// 从容器中获取 SysUserService 的实例"),s(`
`),n("span",{class:"token class-name"},"SysUserService"),s(" userService "),n("span",{class:"token operator"},"="),s(" context"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getBean"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"userService"'),s("， "),n("span",{class:"token class-name"},"SysUserService"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),L=n("p",null,[n("code",null,"ClassPathXmlApplicationContext"),s(" 可以同时从多个文件中加载配置，在构造函数中传入多个文件的路径即可；也可以通过在一个 Xml 文件中引入其他的 Xml 文件，最后加载这一个配置文件，例如，在 spring.xml 中，通过 "),n("code",null,"import"),s(" 标签引入其他三个配置文件：")],-1),F=n("div",{class:"language-xml line-numbers-mode","data-ext":"xml"},[n("pre",{class:"language-xml"},[n("code",null,[s(`// spring.xml
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("beans")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("import")]),s(),n("span",{class:"token attr-name"},"resource"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("services.xml"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},"/>")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("import")]),s(),n("span",{class:"token attr-name"},"resource"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("resources/messageSource.xml"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},"/>")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("import")]),s(),n("span",{class:"token attr-name"},"resource"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("/resources/themeSource.xml"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},"/>")]),s(`

    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("bean")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("bean1"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("..."),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},"/>")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("bean")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("bean2"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("..."),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},"/>")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("beans")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),z=n("p",null,[n("code",null,"AnnotationConfigApplicationContext"),s(" 是 "),n("code",null,"ApplicationContext"),s(" 的实现类，在构造时可以指定配置类的 Class 对象来确定加载的配置，例如：")],-1),X=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 从 BeansConfig 中加载配置，实例化 Context"),s(`
`),n("span",{class:"token class-name"},"AnnotationConfigApplicationContext"),s(" context "),n("span",{class:"token operator"},"="),s(` 
                `),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"AnnotationConfigApplicationContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"BeansConfig"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// 从容器中获取 SysUserService 的实例"),s(`
`),n("span",{class:"token class-name"},"SysUserService"),s(" userService "),n("span",{class:"token operator"},"="),s(" context"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getBean"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"userService"'),s("， "),n("span",{class:"token class-name"},"SysUserService"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),M=n("p",null,"BeansConfig",-1),N=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Configuration"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"BeansConfig"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token annotation punctuation"},"@Bean"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"userDao"'),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"UserDaoImpl"),s(),n("span",{class:"token function"},"userDao"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"UserDaoImpl"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),J=n("p",null,[n("code",null,"AnnotationConfigApplicationContext"),s(" 还可以指定要扫描的包路径，扫描该包下全部类上的注解，从而读取配置。例如：")],-1),O=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 扫描 tech.alexchen.spring 包的类上的注解，加载配置，实例化 Context"),s(`
`),n("span",{class:"token class-name"},"AnnotationConfigApplicationContext"),s(" context "),n("span",{class:"token operator"},"="),s(`
                `),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"AnnotationConfigApplicationContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"tech.alexchen.spring"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// 从容器中获取 SysUserService 的实例"),s(`
`),n("span",{class:"token class-name"},"SysUserService"),s(" userService "),n("span",{class:"token operator"},"="),s(" context"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getBean"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"userService"'),s("， "),n("span",{class:"token class-name"},"SysUserService"),n("span",{class:"token punctuation"},"."),n("span",{class:"token keyword"},"class"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),E=n("h2",{id:"依赖注入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#依赖注入","aria-hidden":"true"},"#"),s(" 依赖注入")],-1),T=n("p",null,"依赖注入有三种常见的注入方式：构造函数、Setter 方法和注解注入（接口注入）。",-1),R=n("h3",{id:"基于构造函数的依赖注入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基于构造函数的依赖注入","aria-hidden":"true"},"#"),s(" 基于构造函数的依赖注入")],-1),V=n("p",null,[n("strong",null,"在注解和Java配置方式下"),s("（推荐方式）")],-1),W=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// 添加 Service 注解，表明该类交由 Spring 容器管理"),s(`
`),n("span",{class:"token annotation punctuation"},"@Service"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"UserServiceImpl"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"UserDaoImpl"),s(" userDao"),n("span",{class:"token punctuation"},";"),s(`

	`),n("span",{class:"token comment"},"// 表示通过构造方法注入"),s(`
    `),n("span",{class:"token annotation punctuation"},"@Autowired"),s(),n("span",{class:"token comment"},"// 这里@Autowired也可以省略"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"UserServiceImpl"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"UserDaoImpl"),s(" userDaoImpl"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("userDao "),n("span",{class:"token operator"},"="),s(" userDaoImpl"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"User"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"findUserList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("userDao"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"findUserList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),G=n("p",null,[n("strong",null,"在XML配置方式中"),s("，"),n("code",null,"<constructor-arg>"),s("是通过构造函数参数注入，比如下面的 xml:")],-1),H=n("div",{class:"language-xml","data-ext":"xml"},[n("pre",{class:"language-xml"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("bean")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("userService"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("tech.pdai.springframework.service.UserServiceImpl"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("constructor-arg")]),s(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("userDao"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"ref"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("userDao"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},"/>")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("bean")]),n("span",{class:"token punctuation"},">")]),s(`
`)])])],-1),K=n("p",null,"本质上是new UserServiceImpl(userDao)创建对象， 所以对应的service类是这样的：",-1),Y=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"UserServiceImpl"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token keyword"},"final"),s(),n("span",{class:"token class-name"},"UserDaoImpl"),s(" userDao"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 构造方法参数和 constructor-arg 对应上"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"UserServiceImpl"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"UserDaoImpl"),s(" userDaoImpl"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("userDao "),n("span",{class:"token operator"},"="),s(" userDaoImpl"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"User"),n("span",{class:"token punctuation"},">")]),s(),n("span",{class:"token function"},"findUserList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("userDao"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"findUserList"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),Z=n("h3",{id:"基于-setter-的依赖注入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基于-setter-的依赖注入","aria-hidden":"true"},"#"),s(" 基于 Setter 的依赖注入")],-1),$=n("p",null,"在注解和Java配置方式下**",-1),Q=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"UserServiceImpl"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"UserDaoImpl"),s(" userDao"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// 通过注解指定 setter 方法"),s(`
    `),n("span",{class:"token annotation punctuation"},"@Autowired"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"setUserDao"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"UserDaoImpl"),s(" userDao"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("userDao "),n("span",{class:"token operator"},"="),s(" userDao"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),nn=n("p",null,[n("strong",null,"在XML配置方式中"),s("，property 都是 setter 方式注入，比如下面的 xml:")],-1),sn=n("div",{class:"language-xml","data-ext":"xml"},[n("pre",{class:"language-xml"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("bean")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("userService"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("tech.pdai.springframework.service.UserServiceImpl"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("property")]),s(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("userDao"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"ref"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("userDao"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},"/>")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("bean")]),n("span",{class:"token punctuation"},">")]),s(`
`)])])],-1),an=n("blockquote",null,[n("p",null,"本质上包含两步："),n("ol",null,[n("li",null,"第一步，需要new UserServiceImpl()创建对象， 所以需要默认构造函数"),n("li",null,"第二步，调用setUserDao()函数注入userDao的值， 所以需要setUserDao()函数")])],-1),en=n("p",null,"所以对应的service类是这样的：",-1),tn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"UserServiceImpl"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"UserDaoImpl"),s(" userDao"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"UserServiceImpl"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"// 需要有 Setter 方法"),s(`
    `),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"setUserDao"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"UserDaoImpl"),s(" userDao"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("userDao "),n("span",{class:"token operator"},"="),s(" userDao"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),on=n("h3",{id:"注解注入-接口注入",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#注解注入-接口注入","aria-hidden":"true"},"#"),s(" 注解注入（接口注入）")],-1),ln=n("p",null,"以@Autowired（自动注入）注解注入为例，修饰符有三个属性：Constructor，byType，byName。默认按照byType注入。",-1),cn=n("ul",null,[n("li",null,[n("strong",null,"constructor"),s("：通过构造方法进行自动注入，spring会匹配与构造方法参数类型一致的bean进行注入，如果有一个多参数的构造方法，一个只有一个参数的构造方法，在容器中查找到多个匹配多参数构造方法的bean，那么spring会优先将bean注入到多参数的构造方法中。")]),n("li",null,[n("strong",null,"byName"),s("：被注入bean的id名必须与set方法后半截匹配，并且id名称的第一个单词首字母必须小写，这一点与手动set注入有点不同。")]),n("li",null,[n("strong",null,"byType"),s("：查找所有的set方法，将符合符合参数类型的bean注入。")])],-1),pn=n("p",null,"示例：",-1),rn=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{class:"language-java"},[n("code",null,[n("span",{class:"token annotation punctuation"},"@Service"),s(`
`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"UserServiceImpl"),s(),n("span",{class:"token punctuation"},"{"),s(`

    `),n("span",{class:"token comment"},"// 通过在属性中添加注解注入"),s(`
    `),n("span",{class:"token annotation punctuation"},"@Autowired"),s(`
    `),n("span",{class:"token keyword"},"private"),s(),n("span",{class:"token class-name"},"UserDaoImpl"),s(" userDao"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),un=p(`<h3 id="为什么推荐构造器注入方式" tabindex="-1"><a class="header-anchor" href="#为什么推荐构造器注入方式" aria-hidden="true">#</a> 为什么推荐构造器注入方式？</h3><p>推荐使用构造器注入的方式，这种方式<strong>能够保证注入的组件不可变，并且确保需要的依赖不为空</strong>。此外，构造器注入的依赖总是能够在返回客户端（组件）代码的时候保证完全初始化的状态，即：</p><ul><li><strong>依赖不可变</strong>：其实说的就是final关键字。</li><li><strong>依赖不为空</strong>（省去了我们对其检查）：当要实例化 UserServiceImpl 的时候，由于自己实现了有参数的构造函数，所以不会调用默认构造函数，那么就需要 Spring 容器传入所需要的参数，所以就两种情况：1、有该类型的参数-&gt;传入，OK 。2：无该类型的参数-&gt;报错。</li><li><strong>完全初始化的状态</strong>：这个可以跟上面的依赖不为空结合起来，向构造器传参之前，要确保注入的内容不为空，那么肯定要调用依赖组件的构造方法完成实例化。而在 Java 类加载实例化的过程中，构造方法是最后一步（之前如果有父类先初始化父类，然后自己的成员变量，最后才是构造方法），所以返回来的都是初始化之后的状态。</li></ul><p>所以通常是这样的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token punctuation">{</span>

    <span class="token comment">// 属性设置为 final，可以提高性能</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">UserDaoImpl</span> userDao<span class="token punctuation">;</span>

    <span class="token comment">// 使用构造器注入，且参数设置为 final</span>
    <span class="token keyword">public</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">UserDaoImpl</span> userDaoImpl<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDaoImpl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果使用 setter 注入，缺点显而易见，对于 IOC 容器以外的环境，除了使用反射来提供它需要的依赖之外，<strong>无法复用该实现类</strong>。而且将一直是个潜在的隐患，因为你不调用将一直无法发现 <code>NullPointerException</code> 的存在。</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token comment">// 这里只是模拟一下，正常来说我们只会暴露接口给客户端，不会暴露实现。</span>
<span class="token class-name">UserServiceImpl</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
userService<span class="token punctuation">.</span><span class="token function">findUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -&gt; NullPointerException， 潜在的隐患</span>
</code></pre></div><p><strong>循环依赖的问题</strong>：使用 field 注入可能会导致循环依赖，即 A 里面注入B，B 里面又注入 A：</p><p>如果使用构造器注入，在 spring 项目启动的时候，就会抛出：BeanCurrentlyInCreationException：Requested bean is currently in creation: Is there an unresolvable circular reference？从而提醒你避免循环依赖，如果是 field 注入的话，启动的时候不会报错，在使用那个 bean 的时候才会报错。</p><h3 id="容器依赖注入的过程" tabindex="-1"><a class="header-anchor" href="#容器依赖注入的过程" aria-hidden="true">#</a> 容器依赖注入的过程</h3><ul><li>使用 <code>ApplicationContext</code>描述所有 bean 的配置元数据创建和初始化。配置元数据可以由 XML、Java 代码或注释指定。</li><li>对于每个 bean，它的依赖关系以属性、构造函数参数或静态工厂方法的参数的形式表示（如果您使用它而不是普通的构造函数）。这些依赖项在实际创建 bean 时提供给 bean。</li><li>每个属性或构造函数参数都是要设置的值的实际定义，或者是对容器中另一个 bean 的引用。</li><li>作为值的每个属性或构造函数参数都从其指定格式转换为该属性或构造函数参数的实际类型。默认情况下，Spring 可以将以字符串格式提供的值转换为所有内置类型，例如 <code>int</code>， <code>long</code>， <code>String</code>，<code>boolean</code>等。</li></ul><h2 id="bean-作用域" tabindex="-1"><a class="header-anchor" href="#bean-作用域" aria-hidden="true">#</a> Bean 作用域</h2><p>Spring 中的 Bean 有六种作用域：</p>`,13),dn=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"作用域"),n("th",{style:{"text-align":"left"}},"Description")])],-1),kn={style:{"text-align":"left"}},mn={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-singleton",target:"_blank",rel:"noopener noreferrer"},vn=n("td",{style:{"text-align":"left"}},"（默认）将单个 bean 定义限定为每个 Spring IoC 容器的单个对象实例。",-1),bn={style:{"text-align":"left"}},hn={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-prototype",target:"_blank",rel:"noopener noreferrer"},gn=n("td",{style:{"text-align":"left"}},"将单个 bean 定义限定为任意数量的对象实例。",-1),_n={style:{"text-align":"left"}},yn={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-request",target:"_blank",rel:"noopener noreferrer"},fn=n("td",{style:{"text-align":"left"}},"将单个 bean 定义限定为单个 HTTP 请求的生命周期。也就是说，每个 HTTP 请求都有自己的 bean 实例。",-1),xn={style:{"text-align":"left"}},wn={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-session",target:"_blank",rel:"noopener noreferrer"},Sn=n("td",{style:{"text-align":"left"}},[s("将单个 bean 定义限定为 "),n("code",null,"Session"),s(" 的生命周期内有效。")],-1),Bn={style:{"text-align":"left"}},Cn={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-application",target:"_blank",rel:"noopener noreferrer"},An=n("td",{style:{"text-align":"left"}},[s("将单个 bean 定义限定为 "),n("code",null,"ServletContext"),s(" 的生命周期内有效。")],-1),Dn={style:{"text-align":"left"}},jn={href:"https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#websocket-stomp-websocket-scope",target:"_blank",rel:"noopener noreferrer"},qn=n("td",{style:{"text-align":"left"}},[s("将单个 bean 定义限定为 "),n("code",null,"WebSocket"),s(" 的生命周期内有效。")],-1),Pn=p(`<h3 id="singleton-作用域" tabindex="-1"><a class="header-anchor" href="#singleton-作用域" aria-hidden="true">#</a> Singleton 作用域</h3><p>单例 bean 在全局只有一个共享的实例，所有依赖单例 bean 的场景中，容器返回的都是同一个实例.</p><p>换句话说，当您定义一个 bean 并且它的作用域是一个单例时，Spring IoC 容器只会根据 bean 的定义来创建该 bean 的唯一实例。这些唯一的实例会缓存到容器中，后续针对单例 bean 的请求和引用，都会从这个缓存中拿到这个唯一实例。 下图显示了单例作用域的工作原理：</p><p><img src="https://cdn.staticaly.com/gh/AlexChen68/images@master/blog/spring-core-ioc-singleton.png" alt="Singleton 作用域" loading="lazy"></p><p>Spring 的单例 bean 概念不同于设计模式(GoF) 之中所定义的单例模式. 设计模式中的单例模式是将一个对象的作用域硬编码的，一个 ClassLoader 只能有唯一的一个实例. 而 Spring 的单例作用域是以容器为前提的，每个容器每个 bean 只能有一个实例. 这意味着，如果在单个 Spring 容器中为特定类定义一个 bean，则 Spring 容器会根据 bean 定义创建唯一的 bean 实例. 单例作用域是 Spring 的默认作用域. 下面的例子是在 XML 中配置单例模式 Bean 的例子:</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.something.DefaultAccountService<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- the following is equivalent, though redundant (singleton scope is the default) --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.something.DefaultAccountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>singleton<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="prototype-作用域" tabindex="-1"><a class="header-anchor" href="#prototype-作用域" aria-hidden="true">#</a> Prototype 作用域</h3><p>非单例的、原型 bean 指的是每次请求 bean 实例时，返回的都是新的对象实例。 也就是说，每次注入到另外的 bean 或者通过调用 getBean() 方法来获得的 bean 都是全新的实例。 基于线程安全性的考虑，当 bean 对象有状态时使用原型作用域，而无状态时则使用单例作用域。</p><p>下图显示了原型作用域的工作原理:</p><p><img src="https://cdn.staticaly.com/gh/AlexChen68/images@master/blog/spring-core-ioc-prototype.png" alt="Prototype 作用域" loading="lazy"></p><p>(数据访问对象(DAO) 通常不配置为原型，因为典型的 DAO 不具有任何会话状态。 我们可以更容易重用单例图的核心。 )</p><p>用下面的例子来说明 Spring 的原型作用域:</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>accountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.something.DefaultAccountService<span class="token punctuation">&quot;</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prototype<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>与其他作用域相比，Spring 不会完整地管理原型 bean 的生命周期。 Spring 容器只会初始化、配置和装载这些 bean，然后传递给 Client。 但是之后就不会再有该原型实例的进一步记录。 也就是说，初始化生命周期回调方法在所有作用域的 bean 是都会调用的，但是销毁生命周期回调方法在原型 bean 是不会调用的。 所以，客户端代码必须注意清理原型 bean 以及释放原型 bean 所持有的资源。 可以通过使用自定义的bean post-processor(Bean的后置处理器) 来让 Spring 释放掉原型 bean 所持有的资源。</p><p>在某些方面，Spring 容器关于原型作用域的 bean 就是取代了 Java 的 new 操作符。 所有的生命周期的控制都由客户端来处理(有关 Spring 容器中 bean 的生命周期的详细信息，请参阅生命周期回调) 。</p><h2 id="自定义-bean-的特性" tabindex="-1"><a class="header-anchor" href="#自定义-bean-的特性" aria-hidden="true">#</a> 自定义 Bean 的特性</h2><p>Spring Framework 提供了许多可用于自定义 bean 特性的接口。 本节将它们分组如下:</p><ul><li>生命周期回调</li><li>Aware 接口</li></ul><h3 id="生命周期回调" tabindex="-1"><a class="header-anchor" href="#生命周期回调" aria-hidden="true">#</a> 生命周期回调</h3><p>在 Spring 中，有三种方法实现对 Bean 的生命周期的管理：</p><ol><li>实现 <code>InitializingBean</code> 接口和 <code>DisposableBean</code> 接口</li><li>通过 JSR-250 规范的注解 <code>@PostConstruct</code> 和 <code>@PreDestroy</code> 指定 Bean 的生命周期方法</li><li>使用 Spring Bean 配置 <code>init-method</code> 和 <code>destroy-method</code> 定义对象元数据</li></ol><h4 id="实现-spring-接口-不推荐" tabindex="-1"><a class="header-anchor" href="#实现-spring-接口-不推荐" aria-hidden="true">#</a> 实现 Spring 接口(不推荐)</h4><p>你可以实现 InitializingBean 和 DisposableBean 接口，让容器里管理 Bean 的生命周期。 容器会在调用 afterPropertiesSet() 之后和 destroy() 之前会允许 bean 在初始化和销毁 bean 时执行某些操作。</p><ul><li>指定 Bean 的初始化过程</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnotherExampleBean</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// do some initialization work</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>指定销毁过程</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnotherExampleBean</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// do some destruction work (like releasing pooled connections)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="postconstruct-和-predestroy-注解" tabindex="-1"><a class="header-anchor" href="#postconstruct-和-predestroy-注解" aria-hidden="true">#</a> @PostConstruct 和 @PreDestroy 注解</h4><p>CommonAnnotationBeanPostProcessor 不仅仅识别 @Resource 注解，还识别 JSR-250 生命周期注解 javax.annotation.PostConstruct 和 javax.annotation.PreDestroy，在 Spring 2.5 中引入了这些注解， 它们提供了另一个代初始化回调 和销毁回调. 如果 CommonAnnotationBeanPostProcessor 在Spring ApplicationContext 中注册，它会在相应的 Spring bean 生命周期中调用相应的方法，就像是 Spring 生命周期接口方法，或者是明确声明的回调函数那样. 在以下示例中，缓存在初始化时预先填充并在销毁时清除:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CachingMovieLister</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">populateMovieCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// populates the movie cache upon initialization...</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PreDestroy</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clearMovieCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// clears the movie cache upon destruction...</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="init-method-和-destroy-method" tabindex="-1"><a class="header-anchor" href="#init-method-和-destroy-method" aria-hidden="true">#</a> <code>init-method</code> 和 <code>destroy-method</code></h4><p><code>init-method</code> 用来指定初始化回调方法</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInitBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>init<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p><code>destroy-method</code> 用来指定销毁回调方法</p><div class="language-xml" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>exampleInitBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>examples.ExampleBean<span class="token punctuation">&quot;</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cleanup<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><h4 id="组合生命周期策略" tabindex="-1"><a class="header-anchor" href="#组合生命周期策略" aria-hidden="true">#</a> 组合生命周期策略</h4><p>为同一个 bean 配置的多个生命周期机制具有不同的初始化方法，如下所示:</p><ol><li>包含 @PostConstruct 注解的方法</li><li>在 InitializingBean 接口中的 afterPropertiesSet() 方法</li><li>自定义的 init() 方法</li></ol><p>Destroy 方法以相同的顺序调用:</p><ol><li>包含 @PreDestroy 注解的方法</li><li>在 DisposableBean 接口中的 destroy() 方法</li><li>自定义的 destroy() 方法</li></ol><h3 id="aware-接口" tabindex="-1"><a class="header-anchor" href="#aware-接口" aria-hidden="true">#</a> Aware 接口</h3><p>Spring 提供了一系列 <code>Aware</code> 回调接口，让 bean 告诉容器，它们需要一些具体的基础配置信息。例如，实现 <code>ApplicationContextAware</code> 接口的 Bean，可以通过重写 <code>setApplicationContext()</code> 方法，获取当前的 <code>ApplicationContext</code>实例。一些重要的 <code>Aware</code> 接口如下表:</p>`,42),In=n("thead",null,[n("tr",null,[n("th",{style:{"text-align":"left"}},"Name"),n("th",{style:{"text-align":"left"}},"Injected Dependency"),n("th",{style:{"text-align":"left"}},"Explained in…")])],-1),Un=n("td",{style:{"text-align":"left"}},[n("code",null,"ApplicationContextAware")],-1),Ln=n("td",{style:{"text-align":"left"}},[s("声明 "),n("code",null,"ApplicationContext"),s(".")],-1),Fn={style:{"text-align":"left"}},zn={href:"http://docs.jcohy.com/docs/spring-framework/5.3.6/html5/zh-cn/core.html#beans-factory-aware",target:"_blank",rel:"noopener noreferrer"},Xn=n("code",null,"ApplicationContextAware",-1),Mn=n("code",null,"BeanNameAware",-1),Nn=n("td",{style:{"text-align":"left"}},[n("code",null,"ApplicationEventPublisherAware")],-1),Jn=n("td",{style:{"text-align":"left"}},[n("code",null,"ApplicationContext"),s(" 的事件发布者.")],-1),On={style:{"text-align":"left"}},En={href:"http://docs.jcohy.com/docs/spring-framework/5.3.6/html5/zh-cn/core.html#context-introduction",target:"_blank",rel:"noopener noreferrer"},Tn=n("code",null,"ApplicationContext",-1),Rn=n("td",{style:{"text-align":"left"}},[n("code",null,"BeanClassLoaderAware")],-1),Vn=n("td",{style:{"text-align":"left"}},"用于加载bean类的类加载器",-1),Wn={style:{"text-align":"left"}},Gn={href:"http://docs.jcohy.com/docs/spring-framework/5.3.6/html5/zh-cn/core.html#beans-factory-class",target:"_blank",rel:"noopener noreferrer"},Hn=n("td",{style:{"text-align":"left"}},[n("code",null,"BeanFactoryAware")],-1),Kn=n("td",{style:{"text-align":"left"}},[s("声明 "),n("code",null,"BeanFactory"),s(".")],-1),Yn={style:{"text-align":"left"}},Zn={href:"http://docs.jcohy.com/docs/spring-framework/5.3.6/html5/zh-cn/core.html#beans-factory-aware",target:"_blank",rel:"noopener noreferrer"},$n=n("code",null,"ApplicationContextAware",-1),Qn=n("code",null,"BeanNameAware",-1),ns=n("td",{style:{"text-align":"left"}},[n("code",null,"BeanNameAware")],-1),ss=n("td",{style:{"text-align":"left"}},"声明bean的名称.",-1),as={style:{"text-align":"left"}},es={href:"http://docs.jcohy.com/docs/spring-framework/5.3.6/html5/zh-cn/core.html#beans-factory-aware",target:"_blank",rel:"noopener noreferrer"},ts=n("code",null,"ApplicationContextAware",-1),os=n("code",null,"BeanNameAware",-1),ls=n("td",{style:{"text-align":"left"}},[n("code",null,"LoadTimeWeaverAware")],-1),cs=n("td",{style:{"text-align":"left"}},"定义的 weaver 用于在加载时处理类定义.",-1),is={style:{"text-align":"left"}},ps={href:"http://docs.jcohy.com/docs/spring-framework/5.3.6/html5/zh-cn/core.html#aop-aj-ltw",target:"_blank",rel:"noopener noreferrer"},rs=n("td",{style:{"text-align":"left"}},[n("code",null,"MessageSourceAware")],-1),us=n("td",{style:{"text-align":"left"}},"用于解析消息的已配置策略(支持参数化和国际化)",-1),ds={style:{"text-align":"left"}},ks={href:"http://docs.jcohy.com/docs/spring-framework/5.3.6/html5/zh-cn/core.html#context-introduction",target:"_blank",rel:"noopener noreferrer"},ms=n("code",null,"ApplicationContext",-1),vs=n("td",{style:{"text-align":"left"}},[n("code",null,"NotificationPublisherAware")],-1),bs=n("td",{style:{"text-align":"left"}},"Spring JMX 通知发布者",-1),hs={style:{"text-align":"left"}},gs={href:"http://docs.jcohy.com/docs/spring-framework/5.3.6/html5/zh-cn/integration.html#jmx-notifications",target:"_blank",rel:"noopener noreferrer"},_s=n("td",{style:{"text-align":"left"}},[n("code",null,"ResourceLoaderAware")],-1),ys=n("td",{style:{"text-align":"left"}},"配置的资源加载器",-1),fs={style:{"text-align":"left"}},xs={href:"http://docs.jcohy.com/docs/spring-framework/5.3.6/html5/zh-cn/core.html#resources",target:"_blank",rel:"noopener noreferrer"},ws=n("td",{style:{"text-align":"left"}},[n("code",null,"ServletConfigAware")],-1),Ss=n("td",{style:{"text-align":"left"}},[s("当前 "),n("code",null,"ServletConfig"),s(" 容器运行. 仅在 Web 下的 Spring "),n("code",null,"ApplicationContext"),s(" 中有效 "),n("code",null,"ApplicationContext"),s(".")],-1),Bs={style:{"text-align":"left"}},Cs={href:"http://docs.jcohy.com/docs/spring-framework/5.3.6/html5/zh-cn/web.html#mvc",target:"_blank",rel:"noopener noreferrer"},As=n("td",{style:{"text-align":"left"}},[n("code",null,"ServletContextAware")],-1),Ds=n("td",{style:{"text-align":"left"}},[s("容器运行的当前 "),n("code",null,"ServletContext"),s(". 仅在 Web 下的 Spring "),n("code",null,"ApplicationContext"),s(" 中有效.")],-1),js={style:{"text-align":"left"}},qs={href:"http://docs.jcohy.com/docs/spring-framework/5.3.6/html5/zh-cn/web.html#mvc",target:"_blank",rel:"noopener noreferrer"},Ps=p(`<h2 id="容器的扩展" tabindex="-1"><a class="header-anchor" href="#容器的扩展" aria-hidden="true">#</a> 容器的扩展</h2><h3 id="beanpostprocessor-自定义-bean" tabindex="-1"><a class="header-anchor" href="#beanpostprocessor-自定义-bean" aria-hidden="true">#</a> BeanPostProcessor 自定义 Bean</h3><p><code>BeanPostProcessor</code> 接口定义了可以实现的回调方法，以提供您自己的(或覆盖容器的默认) 实例化逻辑，依赖解析逻辑等。 如果要在 Spring 容器完成实例化，配置和初始化 bean 之后实现某些自定义逻辑，则可以插入一个或多个自定义 BeanPostProcessor 实现。</p><p><code>BeanPostProcessor</code> 接口定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanPostProcessor</span> <span class="token punctuation">{</span>

   <span class="token comment">// 在实例被初始化之前，</span>
   <span class="token annotation punctuation">@Nullable</span>
   <span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">postProcessBeforeInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token annotation punctuation">@Nullable</span>
   <span class="token keyword">default</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="beanfactorypostprocessor-自定义元数据配置" tabindex="-1"><a class="header-anchor" href="#beanfactorypostprocessor-自定义元数据配置" aria-hidden="true">#</a> BeanFactoryPostProcessor 自定义元数据配置</h3><p><code>org.springframework.beans.factory.config.BeanFactoryPostProcessor</code> 这个接口的语义与 <code>BeanPostProcessor</code> 类似，但有一处不同，BeanFactoryPostProcessor 操作 bean 的元数据配置（例如：BeanDefinition）。</p><p>也就是说，Spring IoC 容器允许 <code>BeanFactoryPostProcessor</code> 读取配置元数据， 并可能在容器实例化除 <code>BeanFactoryPostProcessor</code> 实例之外的任何 bean 之前更改它。</p><p><code>BeanFactoryPostProcessor</code> 接口定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * Modify the application context&#39;s internal bean factory after its standard
	 * initialization. All bean definitions will have been loaded, but no beans
	 * will have been instantiated yet. This allows for overriding or adding
	 * properties even to eager-initializing beans.
	 * <span class="token keyword">@param</span> <span class="token parameter">beanFactory</span> the bean factory used by the application context
	 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">BeansException</span></span> in case of errors
	 */</span>
	<span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>如果想修改实际的 bean 实例(也就是说，从元数据配置中创建的对象) 那么需要使用 BeanPostProcessor(前面在使用 BeanPostProcessor 自定义 Bean 中进行了描述使用 BeanPostProcessor 自定义 Bean) 来替代。</p><p>在 BeanFactoryPostProcessor (例如使用 BeanFactory.getBean()) 中使用这些 bean 的实例虽然在技术上是可行的，但这么来做会将bean过早实例化，这违反了标准的容器生命周期。 同时也会引发一些副作用，例如绕过 bean 的后置处理。</p><p>BeanFactoryPostProcessor 会在整个容器内起作用，所有它仅仅与正在使用的容器相关。如果在一个容器中定义了 BeanFactoryPostProcessor，那么它只会处理那个容器中的 bean。</p></div><h3 id="使用-factorybean-自定义初始化逻辑" tabindex="-1"><a class="header-anchor" href="#使用-factorybean-自定义初始化逻辑" aria-hidden="true">#</a> 使用 FactoryBean 自定义初始化逻辑</h3><p><code>FactoryBean</code> 是 Spring 提供的一个工厂对象接口，你可以用自己的工厂对象实现该接口，FactoryBean 接口提供下面三个方法：</p><ul><li>Object getObject(): 返回这个工厂创建的对象实例. 这个实例可能是共享的，这取决于这个工厂返回的是单例还是原型实例。</li><li>boolean isSingleton(): 如果 FactoryBean 返回单例，那么这个方法就返回 true，否则返回 false。</li><li>Class getObjectType(): 返回由 getObject() 方法返回的对象类型，如果事先不知道的类型则会返回 null。</li></ul><p>该工厂对象也需要注入容器中，当使用 <code>ApplicationContext</code> 的 <code>getBean()</code> 方法获取 Bean 实例时，通过 <code>getBean(&quot;myBean&quot;)</code> 获得的是 myBean 对象，也是 <code>FactoryBean</code> 的 <code>getObject()</code> 返回的对象； 如果是获取自定义的 FactoryBean 对象，需要增加一个 <code>&amp;</code>，即通过 <code>getBean(&quot;&amp;myBean&quot;)</code> 获取。</p>`,15);function Is(Us,Ls){const i=r("Tabs"),e=r("ExternalLinkIcon");return d(),k("div",null,[b,m(" more "),h,a(i,{id:"73",data:[{title:"Java 配置类"},{title:"Java 注解配置"},{title:"Xml 配置"}]},{tab0:t(({title:o,value:l,isActive:c})=>[g,_]),tab1:t(({title:o,value:l,isActive:c})=>[y,f,x,w,S]),tab2:t(({title:o,value:l,isActive:c})=>[B,C,A,D]),_:1}),j,q,P,a(i,{id:"170",data:[{title:"读取 XML 文件获取 Context"},{title:"读取 Java 配置获取 Context"},{title:"扫描注解获取 Context"}]},{tab0:t(({title:o,value:l,isActive:c})=>[I,U,L,F]),tab1:t(({title:o,value:l,isActive:c})=>[z,X,M,N]),tab2:t(({title:o,value:l,isActive:c})=>[J,O]),_:1}),E,T,R,a(i,{id:"207",data:[{title:"构造方法注入（注解）"},{title:"构造方法注入(XML)"}]},{tab0:t(({title:o,value:l,isActive:c})=>[V,W]),tab1:t(({title:o,value:l,isActive:c})=>[G,H,K,Y]),_:1},8,["data"]),Z,a(i,{id:"228",data:[{title:"Setter 方法注入（注解）"},{title:"Setter 方法注入(XML)"}]},{tab0:t(({title:o,value:l,isActive:c})=>[$,Q]),tab1:t(({title:o,value:l,isActive:c})=>[nn,sn,an,en,tn]),_:1},8,["data"]),on,a(i,{id:"266",data:[{title:"接口注入（注解)"}]},{tab0:t(({title:o,value:l,isActive:c})=>[ln,cn,pn,rn]),_:1}),un,n("table",null,[dn,n("tbody",null,[n("tr",null,[n("td",kn,[n("a",mn,[s("singleton"),a(e)])]),vn]),n("tr",null,[n("td",bn,[n("a",hn,[s("prototype"),a(e)])]),gn]),n("tr",null,[n("td",_n,[n("a",yn,[s("request"),a(e)])]),fn]),n("tr",null,[n("td",xn,[n("a",wn,[s("session"),a(e)])]),Sn]),n("tr",null,[n("td",Bn,[n("a",Cn,[s("application"),a(e)])]),An]),n("tr",null,[n("td",Dn,[n("a",jn,[s("websocket"),a(e)])]),qn])])]),Pn,n("table",null,[In,n("tbody",null,[n("tr",null,[Un,Ln,n("td",Fn,[n("a",zn,[Xn,s(" 和 "),Mn,a(e)])])]),n("tr",null,[Nn,Jn,n("td",On,[n("a",En,[Tn,s(" 的附加功能"),a(e)])])]),n("tr",null,[Rn,Vn,n("td",Wn,[n("a",Gn,[s("实例化 Bean"),a(e)])])]),n("tr",null,[Hn,Kn,n("td",Yn,[n("a",Zn,[$n,s(" 和 "),Qn,a(e)])])]),n("tr",null,[ns,ss,n("td",as,[n("a",es,[ts,s(" 和 "),os,a(e)])])]),n("tr",null,[ls,cs,n("td",is,[n("a",ps,[s("在Spring框架中使用AspectJ的加载时织入"),a(e)])])]),n("tr",null,[rs,us,n("td",ds,[n("a",ks,[ms,s(" 的附加功能"),a(e)])])]),n("tr",null,[vs,bs,n("td",hs,[n("a",gs,[s("Notifications"),a(e)])])]),n("tr",null,[_s,ys,n("td",fs,[n("a",xs,[s("资源(Resources)"),a(e)])])]),n("tr",null,[ws,Ss,n("td",Bs,[n("a",Cs,[s("Spring MVC"),a(e)])])]),n("tr",null,[As,Ds,n("td",js,[n("a",qs,[s("Spring MVC"),a(e)])])])])]),Ps])}const zs=u(v,[["render",Is],["__file","02-ioc.html.vue"]]);export{zs as default};

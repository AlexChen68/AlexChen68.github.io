import{_ as p,W as i,X as c,Y as n,a0 as s,Z as a,a1 as o,C as t}from"./framework-35f74cfc.js";const r={},d=n("h2",{id:"题目链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目链接","aria-hidden":"true"},"#"),s(" 题目链接")],-1),u={href:"https://leetcode.cn/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},k={id:"题目描述",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#",-1),v=o(`<p>给定一个链表的头节点 head，返回链表开始入环的第一个节点。如果链表无环，则返回 null。</p><p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（<strong>索引从 0 开始</strong>）。</p><p>如果 pos 是 -1，则在该链表中没有环。注意：pos 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p><em>不允许修改链表</em>。</p><p>示例 1：</p><p><img src="https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png" alt="示例" loading="lazy"></p><div class="language-text" data-ext="text"><pre class="language-text"><code>输入：head = [3,2,0,-4], pos = 1
输出：返回索引为 1 的链表节点
解释：链表中有一个环，其尾部连接到第二个节点。
</code></pre></div><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p>解答本题分成两步：</p><ol><li>判断是否有环；</li><li>如果有环，入口在哪里？</li></ol><p>这类链表题目一般都是使用双指针法解决的，例如寻找距离尾部第 K 个节点、寻找环入口、寻找公共尾部入口等。</p><p><strong>快慢指针法：</strong></p><ol><li>使用两个指针 fast 和 slow，从头结点开始遍历，fast 每次走两个结点，slow 每次走一个结点；</li><li>如果有环，fast 和 slow 一定会相交，即 fast 与 slow 相等；否则不存在环；</li><li>在有环的情况下，假设从头结点到相交结点的距离为 a，环内有 b 个结点，设 slow 走了 <em>s</em> 个结点，则 fast 走了 <em>f=s+nb</em> 个结点，同时又是 slow 的两倍，所以 <em>s=nb</em>、<em>f=2nb</em>（注意：n 是未知数，不同链表的情况不同）;</li><li>因此找到入口结点转变为找到 a 的长度；</li><li>slow 指针 位置不变，将 fast 指针重新 指向链表头部节点；slow 和 fast 同时每轮向前走 1 步（此时 <em>f=0，s=nb</em>）；</li><li>当 fast 指针走到 <em>f=a</em> 步时，slow 指针走到步 <em>s=a+nb</em>，此时 两指针重合，并同时指向链表环入口。</li><li>此时 slow 指针指向的节点就是相交的结点。</li></ol>`,13),h={href:"https://leetcode.cn/problems/linked-list-cycle-ii/solutions/12616/linked-list-cycle-ii-kuai-man-zhi-zhen-shuang-zhi-/",target:"_blank",rel:"noopener noreferrer"},b=o(`<h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 无环的结束条件：fast 遍历完但是仍然没有相交</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> fast<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// fast 每次走两步，slow 每次走一步</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token comment">// 相交，退出循环，开始寻找相交点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// fast 从头开始走 a 步，slow 也走 a 步，再次相交的点就是入口</span>
        fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> slow<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h2><ul><li>时间复杂度：</li><li>空间复杂度：</li></ul>`,4);function f(_,w){const e=t("ExternalLinkIcon"),l=t("Badge");return i(),c("div",null,[d,n("ul",null,[n("li",null,[n("a",u,[s("142. 环形链表 II"),a(e)])])]),n("h2",k,[m,s(" 题目描述 "),a(l,{text:"中等",type:"warning"})]),v,n("p",null,[s("更多细致的解析，可以参考 "),n("a",h,[s("环形链表 II（双指针法，清晰图解）"),a(e)])]),b])}const g=p(r,[["render",f],["__file","142-环形链表 II.html.vue"]]);export{g as default};

import{_ as o,W as c,X as t,Y as n,a0 as s,Z as p,a1 as a,C as l}from"./framework-7c4b0f0a.js";const i={},r=a('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>遗憾的是,Java 的标准 <code>java.net.URL</code> 类和各种 URL 前缀的标准处理程序不足以完全访问底层资源。 例如,没有标准化的 <code>URL</code> 实现可用于访问需要从类路径或相对于 <code>ServletContext</code> 获取的资源。 虽然可以为专用 <code>URL</code> 前缀注册新的处理程序(类似于 <code>http:</code>)这样的前缀的现有处理程序,但这通常非常复杂,并且 <code>URL</code> 接口仍然缺少一些理想的功能,例如检查当前资源是否存在的方法。</p><h2 id="resource-接口" tabindex="-1"><a class="header-anchor" href="#resource-接口" aria-hidden="true">#</a> <code>Resource</code> 接口</h2><p>位于 <code>org.springframework.core.io.</code> 包中的 Spring <code>Resource</code> 接口的目标是成为一个更强大的接口，用于抽象对底层资源的访问。</p>',4),u=n("code",null,"Resource",-1),d={href:"https://docs.spring.io/spring-framework/docs/5.3.21/javadoc-api/org/springframework/core/io/Resource.html",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"Resource",-1),v=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Resource</span> <span class="token keyword">extends</span> <span class="token class-name">InputStreamSource</span> <span class="token punctuation">{</span>

    <span class="token keyword">boolean</span> <span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">boolean</span> <span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">URL</span> <span class="token function">getURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

    <span class="token class-name">URI</span> <span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

    <span class="token class-name">File</span> <span class="token function">getFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

    <span class="token class-name">ReadableByteChannel</span> <span class="token function">readableChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> <span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> <span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

    <span class="token class-name">Resource</span> <span class="token function">createRelative</span><span class="token punctuation">(</span><span class="token class-name">String</span> relativePath<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InputStreamSource</span> <span class="token punctuation">{</span>

    <span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Resource 接口中一些最重要的方法是:</p><ul><li>getInputStream(): 用于定位和打开当前资源，返回当前资源的 InputStream，预计每一次调用都会返回一个新的 InputStream。 因此调用者必须自行关闭当前的输出流。</li><li>exists(): 返回 boolean 值，表示当前资源是否存在。</li><li>isOpen():返回 boolean 值，表示当前资源是否有已打开的输入流。 如果为 true，那么 InputStream 不能被多次读取 ，只能在一次读取后即关闭以防止内存泄漏。 除了 InputStreamResource 外，其他常用 Resource 实现都会返回 false。</li><li>getDescription(): 返回当前资源的描述，当处理资源出错时，资源的描述会用于输出错误的信息。 一般来说，资源的描述是一个完全限定的文件名称，或者是当前资源的真实 URL。</li></ul><h2 id="内置-resource-实现" tabindex="-1"><a class="header-anchor" href="#内置-resource-实现" aria-hidden="true">#</a> 内置 Resource 实现</h2><ul><li>urlresource</li><li>classpathresource</li><li>filesystemresource</li><li>PathResource</li><li>servletcontextresource</li><li>inputstreamresource</li><li>bytearrayresource</li></ul><h2 id="resourceloader" tabindex="-1"><a class="header-anchor" href="#resourceloader" aria-hidden="true">#</a> ResourceLoader</h2><p>ResourceLoader 接口用于加载 Resource 对象，换句话说，就是当一个对象需要获取 Resource 实例时，可以选择实现 ResourceLoader 接口，以下清单显示了 ResourceLoader 接口定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResourceLoader</span> <span class="token punctuation">{</span>

    <span class="token class-name">Resource</span> <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ClassLoader</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有 <code>ApplicationContext</code> 都实现 <code>ResourceLoader</code> 接口。因此,可以使用所有 <code>ApplicationContext</code> 来获取 Resource 实例。</p><p>不同的 ApplicationContext 返回不同的 Resource 实现，例如：针对 ClassPathXmlApplicationContext，<code>getResource(&quot;/somepath&quot;)</code>返回 ClassPathResource 对象；</p><p>可以通过指定特殊的 <code>classpath:</code> 前缀来强制使用 ClassPathResource，其他的类似。</p><h2 id="resourcepatternresolver-接口" tabindex="-1"><a class="header-anchor" href="#resourcepatternresolver-接口" aria-hidden="true">#</a> ResourcePatternResolver 接口</h2><p>ResourcePatternResolver 接口是对 ResourceLoader 接口的扩展。它定义了一种解决位置模式的策略 (例如， Ant 样式的路径模式) 转换为 Resource 对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResourcePatternResolver</span> <span class="token keyword">extends</span> <span class="token class-name">ResourceLoader</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token constant">CLASSPATH_ALL_URL_PREFIX</span> <span class="token operator">=</span> <span class="token string">&quot;classpath*:&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token class-name">String</span> locationPattern<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="resourceloaderaware-接口" tabindex="-1"><a class="header-anchor" href="#resourceloaderaware-接口" aria-hidden="true">#</a> ResourceLoaderAware 接口</h2><p>ResourceLoaderAware 是一个特殊的标识接口，用来提供 ResourceLoader 引用的对象.。以下清单显示了 ResourceLoaderAware 接口的定义：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ResourceLoaderAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现了该接口的 Bean，可以通过 <code>setResourceLoader</code> 方法获取当前的 <code>ApplicationContext，因为</code> <code>ApplicationContext</code> 都实现了 <code>ResourceLoader</code> 接口。</p><p>实现 <code>ApplicationContextAware</code> 接口同样可以获取 ApplicationContext，从 ApplicationContext 获取 ResourceLoader，但是推荐使用专用接口。此外也可以通过自动装配获取。</p>`,19);function m(b,h){const e=l("ExternalLinkIcon");return c(),t("div",null,[r,n("p",null,[s("以下清单显示了 "),u,s(" 接口定义,见 "),n("a",d,[k,p(e)]),s(" Javadoc 了解更多详细信息：")]),v])}const w=o(i,[["render",m],["__file","11-resources.html.vue"]]);export{w as default};

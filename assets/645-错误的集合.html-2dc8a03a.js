import{_ as o,W as c,X as l,Y as n,a0 as s,Z as a,a1 as i,C as t}from"./framework-d3200c61.js";const u={},r={href:"https://leetcode-cn.com/problems/set-mismatch/",target:"_blank",rel:"noopener noreferrer"},d=n("hr",null,null,-1),k={id:"题目描述",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#",-1),v=i(`<p>合 <code>s</code> 包含从 <code>1</code> 到 <code>n</code> 的整数。不幸的是，因为数据错误，导致集合里面某一个数字复制了成了集合里面的另外一个数字的值，导致集合 <strong>丢失了一个数字</strong> 并且 <strong>有一个数字重复</strong> 。</p><p>给定一个数组 <code>nums</code> 代表了集合 <code>S</code> 发生错误后的结果。</p><p>请你找出重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。</p><p><strong>示例 1：</strong></p><div class="language-text" data-ext="text"><pre class="language-text"><code>输入：nums = [1,2,2,4]
输出：[2,3]
</code></pre></div><p><strong>示例 2：</strong></p><div class="language-text" data-ext="text"><pre class="language-text"><code>输入：nums = [1,1]
输出：[1,2]
</code></pre></div><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li><p>将数组从小到大排序</p></li><li><p>寻找重复的数字较为简单，如果相邻的两个元素相等，则该元素为重复的数字。</p></li><li><p>寻找丢失的数字相对复杂，可能有以下两种情况：</p><ul><li><p>如果丢失的数字大于 1 且小于 n，则一定存在相邻的两个元素的差等于 2，这两个元素之间的值即为丢失的数字；</p></li><li><p>如果丢失的数字是 1 或 n，则需要另外判断。</p></li></ul></li><li><p>为了寻找丢失的数字，需要在遍历已排序数组的同时记录上一个元素，然后计算当前元素与上一个元素的差。考虑到丢失的数字可能是 1，因此需要将上一个元素初始化为 0。</p><ul><li><p>当丢失的数字小于 n 时，通过计算当前元素与上一个元素的差，即可得到丢失的数字；</p></li><li><p>如果数组最后一个数，不等于 n，则丢失的为 n。</p></li></ul></li></ol><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findErrorNums</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> errorNums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 记录前一个元素的值，虑到丢失的数字可能是 1，因此需要将上一个元素初始化为 0，这样如果丢失的是 1，则 2-0 &gt; 1 可以找到丢失的数是 1</span>
        <span class="token keyword">int</span> prev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> prev<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                errorNums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> prev<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prev <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                errorNums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> prev <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            prev <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 判断丢失的是不是最后一位 n</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            errorNums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> errorNums<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h2><ul><li><p>时间复杂度：O(nlog⁡n)，其中 n 是数组 nums 的长度。排序需要 O(nlog⁡n) 的时间，遍历数组找到错误的集合需要 O(n) 的时间，因此总时间复杂度是 O(nlog⁡n)。</p></li><li><p>空间复杂度：O(log⁡n)，其中 n 是数组 nums 的长度。排序需要 O(log⁡n) 的空间。</p></li></ul>`,13);function b(h,_){const e=t("ExternalLinkIcon"),p=t("Badge");return c(),l("div",null,[n("blockquote",null,[n("p",null,[s("LeetCode 传送门 "),n("a",r,[s("https://leetcode-cn.com/problems/set-mismatch/"),a(e)])])]),d,n("h2",k,[m,s(" 题目描述 "),a(p,{text:"简单",type:"tip"})]),v])}const f=o(u,[["render",b],["__file","645-错误的集合.html.vue"]]);export{f as default};

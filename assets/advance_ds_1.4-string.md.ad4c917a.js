import{_ as a,C as l,o as p,c as o,k as s,a as e,H as t,Q as r}from"./chunks/framework.419948d5.js";const D=JSON.parse('{"title":"线性表 - 字符串","description":"","frontmatter":{"title":"线性表 - 字符串","date":"2023-04-07T00:00:00.000Z"},"headers":[],"relativePath":"advance/ds/1.4-string.md","filePath":"advance/ds/1.4-string.md","lastUpdated":1695845670000}'),c={name:"advance/ds/1.4-string.md"},E=r(`<h2 id="字符串概述" tabindex="-1">字符串概述 <a class="header-anchor" href="#字符串概述" aria-label="Permalink to &quot;字符串概述&quot;">​</a></h2><p>字符串是若干字符组成的有限序列，也可以理解为是一个字符数组，但是很多语言对字符串做了特殊的规定。</p><p>Java 中的字符串通过 final 类 String 实现，底层是 char 数组。</p><p>更多关于 Java String 的内容，可以参考 <a href="/java/basic/string.html">Java String 详解</a>。</p><h2 id="常用算法解法" tabindex="-1">常用算法解法 <a class="header-anchor" href="#常用算法解法" aria-label="Permalink to &quot;常用算法解法&quot;">​</a></h2><ol><li>双指针法</li><li>反转字符串</li><li>KMP 匹配算法</li></ol><h2 id="字符串匹配之-kmp-算法" tabindex="-1">字符串匹配之 KMP 算法 <a class="header-anchor" href="#字符串匹配之-kmp-算法" aria-label="Permalink to &quot;字符串匹配之 KMP 算法&quot;">​</a></h2><blockquote><p>使用子串与主串匹配，匹配失败就退回这一趟最开始匹配的主串位的下一位继续匹配，需要的时间复杂度是 O(m * n)，m 为子串长度，n 为主串长度。 使用 KMP 算法，可以将复杂度减少到 O(m+n)，</p></blockquote><p>KMP 主要应用在字符串匹配上，KMP 的主要思想是<strong>当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。</strong></p><p>KMP 由三位学者发明的：Knuth，Morris 和 Pratt，所以取了三位学者名字的首字母。所以叫做 KMP。</p><p>KMP 算法的核心，在于如何计算出《部分匹配表》（Partial Match Table），也叫<strong>前缀表（PMT）</strong>。</p><h3 id="部分匹配表-前缀表" tabindex="-1"><strong>部分匹配表（前缀表）</strong> <a class="header-anchor" href="#部分匹配表-前缀表" aria-label="Permalink to &quot;**部分匹配表（前缀表）**&quot;">​</a></h3><p>那么什么是前缀表：<strong>记录下标 i 之前（包括 i）的字符串中，有多大长度的相同前缀后缀。</strong>。</p><p><strong>前缀表是用来回退的，它记录了模式串与主串 (文本串) 不匹配的时候，模式串应该从哪里开始重新匹配。</strong></p><p><strong>前后缀：</strong></p><ul><li>前缀是指<strong>不包含最后一个字符的所有以第一个字符开头的连续子串。</strong></li><li>后缀是指<strong>不包含第一个字符的所有以最后一个字符结尾的连续子串。</strong></li></ul><p>例如，对于 aba，它的前缀集合为{a, ab}，后缀 集合为{ba, a}。两个集合的交集为{a}，那么长度最长的元素就是字符串 a 了，长 度为 1，所以对于 aba 而言，它在 PMT 表中对应的值就是 1。</p><p>再比如，对于字符串 ababa，它的前缀集合为{a, ab, aba, abab}，它的后缀集合为{baba, aba, ba, a}，两个集合的交集为{a, aba}，其中最长的元素为 aba，长度为 3。</p><p>对于字符串 abababca，它的 PMT 如下表所示：</p><p><img src="https://cdn.staticaly.com/gh/AlexChen68/OSS@master/blog/advance/pmt_demo.jpg" alt="前缀表示例"></p><p><strong>PMT 中的值是字符串的前缀集合与后缀集合的交集中最长元素的长度。</strong></p><p>在实际应用中，通常会使用被称之为 <strong>next</strong> 的一个<strong>数组</strong>表示 PMT。</p><h3 id="求解-next-数组" tabindex="-1">求解 next 数组 <a class="header-anchor" href="#求解-next-数组" aria-label="Permalink to &quot;求解 next 数组&quot;">​</a></h3><p>那么我们怎么在知道<strong>主串</strong>和<strong>模式串</strong>的情况下，如何通过代码得到这个 next 数组呢？</p><p>求解 next 数组可以分成如下几个步骤：</p><ol><li>初始化数组，数组第一个元素总是为 0（因为长度为 1 的字符串没有前缀和后缀）；</li><li>使用两个指针： <ul><li>i 表示后缀末尾位置；</li><li>j 表示前缀末尾位置，同时也是最长相等前后缀的长度。</li></ul></li><li>遍历模式字符串，判断当前的前后缀的末尾元素是否相等； <ul><li>如果不匹配，则子串下标移动到前一位的最长前后缀相等长度；</li><li>如果匹配，匹配的子串长度加一，并更新 next 数组的值；</li></ul></li></ol><p>实现代码：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 求原始前缀表</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getNext</span><span style="color:#E1E4E8;">(String pattern, </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] next) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(pattern </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> pattern.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> ;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i;              </span><span style="color:#6A737D;">// 后缀末尾位置</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;          </span><span style="color:#6A737D;">// 前缀末尾位置，同时也是最长相等前后缀长度</span></span>
<span class="line"><span style="color:#E1E4E8;">    next[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 遍历子串长度</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> pattern.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果不匹配，则子串下标移动到前一位的最长前后缀相等长度</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(j </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> pattern.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(i) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> pattern.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(j)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> next[j </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];                    </span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(pattern.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(i) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> pattern.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(j)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;                    </span><span style="color:#6A737D;">// 匹配的子串长度加一</span></span>
<span class="line"><span style="color:#E1E4E8;">            next[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> j;            </span><span style="color:#6A737D;">// 更新 next 数组的值</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 求原始前缀表</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getNext</span><span style="color:#24292E;">(String pattern, </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] next) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(pattern </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> pattern.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)    {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> ;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i;              </span><span style="color:#6A737D;">// 后缀末尾位置</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;          </span><span style="color:#6A737D;">// 前缀末尾位置，同时也是最长相等前后缀长度</span></span>
<span class="line"><span style="color:#24292E;">    next[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 遍历子串长度</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;">(i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> pattern.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果不匹配，则子串下标移动到前一位的最长前后缀相等长度</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(j </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> pattern.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> pattern.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(j)) {</span></span>
<span class="line"><span style="color:#24292E;">            j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next[j </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];                    </span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(pattern.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> pattern.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(j)) {</span></span>
<span class="line"><span style="color:#24292E;">            j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;                    </span><span style="color:#6A737D;">// 匹配的子串长度加一</span></span>
<span class="line"><span style="color:#24292E;">            next[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> j;            </span><span style="color:#6A737D;">// 更新 next 数组的值</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="使用-next-数组进行模式匹配" tabindex="-1">使用 next 数组进行模式匹配 <a class="header-anchor" href="#使用-next-数组进行模式匹配" aria-label="Permalink to &quot;使用 next 数组进行模式匹配&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">strStr</span><span style="color:#E1E4E8;">(String text, String pattern) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pattern.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[m];</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getNext</span><span style="color:#E1E4E8;">(pattern, next);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> text.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">(); i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (j </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> text.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(i) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> pattern.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(j)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> next[j </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (text.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(i) </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> pattern.</span><span style="color:#B392F0;">charAt</span><span style="color:#E1E4E8;">(j)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 如果全部都匹配了</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (j </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> m) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> m </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">strStr</span><span style="color:#24292E;">(String text, String pattern) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pattern.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">[m];</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">getNext</span><span style="color:#24292E;">(pattern, next);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> text.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">(); i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> text.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> pattern.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(j)) {</span></span>
<span class="line"><span style="color:#24292E;">            j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> next[j </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (text.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(i) </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> pattern.</span><span style="color:#6F42C1;">charAt</span><span style="color:#24292E;">(j)) {</span></span>
<span class="line"><span style="color:#24292E;">            j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 如果全部都匹配了</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (j </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> m) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> m </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2>`,31),y=s("a",{href:"https://zhuanlan.zhihu.com/p/83334559",target:"_blank",rel:"noreferrer"},"KMP 算法详解",-1),i=s("li",null,[s("a",{href:"https://www.zhihu.com/question/21923021/answer/281346746",target:"_blank",rel:"noreferrer"},"如何更好地理解和掌握 KMP 算法？")],-1);function b(F,h,u,m,A,d){const n=l("Badge");return p(),o("div",null,[E,s("ul",null,[s("li",null,[y,e(),t(n,{text:"强烈推荐",type:"tip"})]),i])])}const x=a(c,[["render",b]]);export{D as __pageData,x as default};

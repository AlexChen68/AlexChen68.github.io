import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.419948d5.js";const d=JSON.parse('{"title":"Java 注解机制","description":"","frontmatter":{"title":"Java 注解机制","date":"2022-09-30T00:00:00.000Z","tag":"annotaion","order":7},"headers":[],"relativePath":"java/basic/annotation.md","filePath":"java/basic/annotation.md","lastUpdated":1697769685000}'),p={name:"java/basic/annotation.md"},o=l(`<nav class="table-of-contents"><ul><li><a href="#简介">简介</a></li><li><a href="#元注解">元注解</a></li><li><a href="#自定义注解">自定义注解</a></li><li><a href="#反射获取注解信息">反射获取注解信息</a></li><li><a href="#自定义注解结合-aop">自定义注解结合 AOP</a></li><li><a href="#参考资料">参考资料</a></li></ul></nav><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>注解是 JDK1.5 版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。</p><p><strong>注解的优点</strong>：</p><ol><li>通过使用注解，你可以将元数据保存在 Java 源代码中。</li><li>简单易读的代码。</li><li>编译器类型检查。</li><li>使用 annotation API 为自己的注解构造处理工具。</li></ol><p>在 <code>java.lang</code> 包中，<strong>内置</strong>了一些注解：</p><ul><li><code>@Override</code>:表示当前的方法定义将覆盖基类的方法。如果你不小心拼写错误，或者方法签名被错误拼写的时候，编译器就会发出错误提示。</li><li><code>@Deprecated</code>:如果使用该注解的元素被调用，编译器就会发出警告信息。</li><li><code>@SuppressWarnings</code>:关闭不当的编译器警告信息。</li><li><code>@SafeVarargs</code>:在 Java 7 中加入用于禁止对具有泛型 varargs 参数的方法或构造函数的调用方发出警告。</li><li><code>@FunctionalInterface</code>:Java 8 中加入用于表示类型声明为函数式接口。</li></ul><p>此外，在 <code>java.lang.annotaion</code> 包下还有几种<strong>元注解</strong>用于创造新的注解：</p><ul><li><code>@Target</code> 定义你的注解可以应用在哪里 (例如是方法还是字段)。</li><li><code>@Retention</code> 定义了注解在哪里可用，在源代码中 (SOURCE)，class 文件 (CLASS) 中或者是在运行时 (RUNTIME)。</li><li><code>@Inherited</code> 用于标明注解可继承。</li><li><code>@Documented</code> 用于标明是否生成 javadoc 文档。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>注解是不可以<strong>继承</strong>的，编译后会自动继承 <code>java.lang.annotation.Annotation</code> 接口</p></div><h2 id="元注解" tabindex="-1">元注解 <a class="header-anchor" href="#元注解" aria-label="Permalink to &quot;元注解&quot;">​</a></h2><ol><li><code>@Target</code></li></ol><p><code>@Target</code> 的作用：描述注解的使用范围，即注明被修饰的注解可以用在什么地方，其包含一个类型为 ElementType 数组的 value 属性 <code>ElementType[] value();</code></p><p><code>ElementType</code> 的枚举如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ElementType</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">TYPE</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 类、接口、枚举类</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">FIELD</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 成员变量（包括：枚举常量）</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">METHOD</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 成员方法</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">PARAMETER</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 方法参数</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">CONSTRUCTOR</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 构造方法</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">LOCAL_VARIABLE</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 局部变量</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">ANNOTATION_TYPE</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 注解类</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">PACKAGE</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 可用于修饰：包</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">TYPE_PARAMETER</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 类型参数，JDK 1.8 新增</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">TYPE_USE</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 使用类型的任何地方，JDK 1.8 新增</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ElementType</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">TYPE</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 类、接口、枚举类</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">FIELD</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 成员变量（包括：枚举常量）</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">METHOD</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 成员方法</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">PARAMETER</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 方法参数</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">CONSTRUCTOR</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 构造方法</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">LOCAL_VARIABLE</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 局部变量</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">ANNOTATION_TYPE</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 注解类</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">PACKAGE</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 可用于修饰：包</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">TYPE_PARAMETER</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 类型参数，JDK 1.8 新增</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">TYPE_USE</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 使用类型的任何地方，JDK 1.8 新增</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><ol start="2"><li><code>@Retention</code></li></ol><p><code>@Retention</code> 的作用：描述注解保留的时间范围，即被描述的注解在它所修饰的类中可以被保留到何时，共有三种策略，定义在 <code>RetentionPolicy</code> 枚举中：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RetentionPolicy</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">SOURCE</span><span style="color:#E1E4E8;">,    </span><span style="color:#6A737D;">// 源文件保留</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">CLASS</span><span style="color:#E1E4E8;">,       </span><span style="color:#6A737D;">// 编译期保留，默认值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">RUNTIME</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 运行期保留，可通过反射去获取注解信息</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RetentionPolicy</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">SOURCE</span><span style="color:#24292E;">,    </span><span style="color:#6A737D;">// 源文件保留</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">CLASS</span><span style="color:#24292E;">,       </span><span style="color:#6A737D;">// 编译期保留，默认值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">RUNTIME</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 运行期保留，可通过反射去获取注解信息</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="3"><li><code>@Documented</code></li></ol><p><code>@Documented</code> 的作用：描述在使用 javadoc 工具为类生成帮助文档时是否要保留其注解信息。</p><p>这个很好理解，加了这个元注解的注解，会出现在 javadoc 生成的文档中。</p><ol start="4"><li><code>@Inherited</code></li></ol><p><code>@Inherited</code> 的作用：被它修饰的注解将具有继承性。</p><p>如果某个类使用了被 <code>@Inherited</code> 修饰的注解，则其子类将自动具有该注解。</p><ol start="5"><li><code>@Repeatable</code> (Java8)</li></ol><p>允许在同一申明类型 (类，属性，或方法) 的多次使用同一个注解。</p><p>例如：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Repeatable</span><span style="color:#E1E4E8;">(Authorities.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Authority</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">     String </span><span style="color:#B392F0;">role</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Authorities</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">Authority</span><span style="color:#E1E4E8;">[] </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RepeatAnnotationUseNewVersion</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Authority</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">role</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Admin&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Authority</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">role</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Manager&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">doSomeThing</span><span style="color:#E1E4E8;">(){ }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Repeatable</span><span style="color:#24292E;">(Authorities.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Authority</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">     String </span><span style="color:#6F42C1;">role</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Authorities</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">Authority</span><span style="color:#24292E;">[] </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RepeatAnnotationUseNewVersion</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Authority</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">role</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Admin&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Authority</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">role</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Manager&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">doSomeThing</span><span style="color:#24292E;">(){ }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ol start="6"><li><code>@Native</code> (Java8)</li></ol><p>使用 @Native 注解修饰成员变量，则表示这个变量可以被本地代码引用，常常被代码生成工具使用。</p><h2 id="自定义注解" tabindex="-1">自定义注解 <a class="header-anchor" href="#自定义注解" aria-label="Permalink to &quot;自定义注解&quot;">​</a></h2><p>如下是一个注解的定义。注解的定义看起来很像接口的定义。事实上，它们和其他 Java 接口一样，也会被编译成 class 文件。</p><p>示例，定义一个日志注解：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Documented</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Log</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 描述</span></span>
<span class="line"><span style="color:#6A737D;">     * @return {String}</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * spel 表达式</span></span>
<span class="line"><span style="color:#6A737D;">     * @return 日志描述</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">expression</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Documented</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Log</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * 描述</span></span>
<span class="line"><span style="color:#6A737D;">     * @return {String}</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;">     * spel 表达式</span></span>
<span class="line"><span style="color:#6A737D;">     * @return 日志描述</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">expression</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="反射获取注解信息" tabindex="-1">反射获取注解信息 <a class="header-anchor" href="#反射获取注解信息" aria-label="Permalink to &quot;反射获取注解信息&quot;">​</a></h2><p>使用注解，可以将一些元信息存储在源代码中，通常，我们会在另外的地方，通过 Java 反射机制获取注解中的信息。</p><p>在 Java 的反射包 <code>java.lang.reflect</code> 的 <code>AnnotatedElement</code> 接口中，提供了获取注解对象的方法；</p><p>我们可以通过先获取 <code>class</code> 或者 <code>method</code> 对象（它们都实现了 <code>AnnotatedElement</code> 接口），再从中获取到注解对象，进行从注解对象中获取注解的元数据。</p><p>以上面的 <code>@Log</code> 注解为例：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReflectDemo</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;反射测试&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">annotationTest</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] </span><span style="color:#FFAB70;">args</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> NoSuchMethodException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取 Class 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        Class&lt;</span><span style="color:#F97583;">ReflectDemo</span><span style="color:#E1E4E8;">&gt; serviceClass </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ReflectDemo.class;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取 Method 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        Method method </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> serviceClass.</span><span style="color:#B392F0;">getMethod</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;annotationTest&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取 Log 注解对象</span></span>
<span class="line"><span style="color:#E1E4E8;">        Log annotation </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> method.</span><span style="color:#B392F0;">getAnnotation</span><span style="color:#E1E4E8;">(Log.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(annotation.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReflectDemo</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;反射测试&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">annotationTest</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] </span><span style="color:#E36209;">args</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> NoSuchMethodException {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取 Class 对象</span></span>
<span class="line"><span style="color:#24292E;">        Class&lt;</span><span style="color:#D73A49;">ReflectDemo</span><span style="color:#24292E;">&gt; serviceClass </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReflectDemo.class;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取 Method 对象</span></span>
<span class="line"><span style="color:#24292E;">        Method method </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> serviceClass.</span><span style="color:#6F42C1;">getMethod</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;annotationTest&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取 Log 注解对象</span></span>
<span class="line"><span style="color:#24292E;">        Log annotation </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> method.</span><span style="color:#6F42C1;">getAnnotation</span><span style="color:#24292E;">(Log.class);</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(annotation.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>只有注解被定义为 <strong>RUNTIME</strong> 后，该注解才能是运行时可见，当 class 文件被装载时被保存在 class 文件中的 Annotation 才会被虚拟机读取。</p></div><h2 id="自定义注解结合-aop" tabindex="-1">自定义注解结合 AOP <a class="header-anchor" href="#自定义注解结合-aop" aria-label="Permalink to &quot;自定义注解结合 AOP&quot;">​</a></h2><p>SpringBoot AOP 最常见的实践就是使用自定义的日志注解，通过切面编程将操作日志进行统一处理。</p><p>其伪代码如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Target</span><span style="color:#E1E4E8;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Retention</span><span style="color:#E1E4E8;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Documented</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> @</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">SysLog</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    String </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Target</span><span style="color:#24292E;">(ElementType.METHOD)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Retention</span><span style="color:#24292E;">(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Documented</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> @</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">SysLog</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    String </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Slf4j</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Aspect</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SysLogAspect</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ApplicationEventPublisher publisher;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Around</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;@annotation(sysLog)&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Object </span><span style="color:#B392F0;">around</span><span style="color:#E1E4E8;">(ProceedingJoinPoint </span><span style="color:#FFAB70;">point</span><span style="color:#E1E4E8;">, SysLog </span><span style="color:#FFAB70;">sysLog</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 获取切点信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        String className </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> point.</span><span style="color:#B392F0;">getTarget</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        String methodName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> point.</span><span style="color:#B392F0;">getSignature</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        log.</span><span style="color:#B392F0;">debug</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;[类名]:{},[方法]:{}&quot;</span><span style="color:#E1E4E8;">, className, methodName);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        Object result;</span></span>
<span class="line"><span style="color:#E1E4E8;">        SysLogInfo logInfo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SysLogInfo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        logInfo.</span><span style="color:#B392F0;">setTitle</span><span style="color:#E1E4E8;">(sysLog.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 执行切点代码</span></span>
<span class="line"><span style="color:#E1E4E8;">        Long startTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> point.</span><span style="color:#B392F0;">proceed</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Throwable </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            logInfo.</span><span style="color:#B392F0;">setLogType</span><span style="color:#E1E4E8;">(LogTypeEnum.ERROR.</span><span style="color:#B392F0;">getTypeId</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            logInfo.</span><span style="color:#B392F0;">setException</span><span style="color:#E1E4E8;">(e.</span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(e);</span></span>
<span class="line"><span style="color:#E1E4E8;">        } </span><span style="color:#F97583;">finally</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Long endTime </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> System.</span><span style="color:#B392F0;">currentTimeMillis</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            logInfo.</span><span style="color:#B392F0;">setTime</span><span style="color:#E1E4E8;">(endTime </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> startTime);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// 发布事件，由 SysLogListener 异步处理</span></span>
<span class="line"><span style="color:#E1E4E8;">            publisher.</span><span style="color:#B392F0;">publishEvent</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SysLogEvent</span><span style="color:#E1E4E8;">(logInfo));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Slf4j</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Aspect</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SysLogAspect</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ApplicationEventPublisher publisher;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Around</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;@annotation(sysLog)&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Object </span><span style="color:#6F42C1;">around</span><span style="color:#24292E;">(ProceedingJoinPoint </span><span style="color:#E36209;">point</span><span style="color:#24292E;">, SysLog </span><span style="color:#E36209;">sysLog</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 获取切点信息</span></span>
<span class="line"><span style="color:#24292E;">        String className </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> point.</span><span style="color:#6F42C1;">getTarget</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        String methodName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> point.</span><span style="color:#6F42C1;">getSignature</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        log.</span><span style="color:#6F42C1;">debug</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;[类名]:{},[方法]:{}&quot;</span><span style="color:#24292E;">, className, methodName);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Object result;</span></span>
<span class="line"><span style="color:#24292E;">        SysLogInfo logInfo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SysLogInfo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        logInfo.</span><span style="color:#6F42C1;">setTitle</span><span style="color:#24292E;">(sysLog.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 执行切点代码</span></span>
<span class="line"><span style="color:#24292E;">        Long startTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> point.</span><span style="color:#6F42C1;">proceed</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Throwable </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            logInfo.</span><span style="color:#6F42C1;">setLogType</span><span style="color:#24292E;">(LogTypeEnum.ERROR.</span><span style="color:#6F42C1;">getTypeId</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            logInfo.</span><span style="color:#6F42C1;">setException</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(e);</span></span>
<span class="line"><span style="color:#24292E;">        } </span><span style="color:#D73A49;">finally</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            Long endTime </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> System.</span><span style="color:#6F42C1;">currentTimeMillis</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            logInfo.</span><span style="color:#6F42C1;">setTime</span><span style="color:#24292E;">(endTime </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> startTime);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// 发布事件，由 SysLogListener 异步处理</span></span>
<span class="line"><span style="color:#24292E;">            publisher.</span><span style="color:#6F42C1;">publishEvent</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SysLogEvent</span><span style="color:#24292E;">(logInfo));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://pdai.tech/md/java/basic/java-basic-x-annotation.html" target="_blank" rel="noreferrer">注解机制详解 - Java 全栈知识体系</a></li></ul>`,48),e=[o];function c(t,r,E,y,i,u){return n(),a("div",null,e)}const m=s(p,[["render",c]]);export{d as __pageData,m as default};

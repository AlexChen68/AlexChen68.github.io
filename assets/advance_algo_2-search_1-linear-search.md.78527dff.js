import{_ as a,o as e,c as t,Q as r}from"./chunks/framework.419948d5.js";const u=JSON.parse('{"title":"顺序查找","description":"","frontmatter":{"title":"顺序查找","date":"2022-09-27T00:00:00.000Z"},"headers":[],"relativePath":"advance/algo/2-search/1-linear-search.md","filePath":"advance/algo/2-search/1-linear-search.md","lastUpdated":1695209145000}'),o={name:"advance/algo/2-search/1-linear-search.md"},c=r('<p>搜索算法之顺序查找</p><h2 id="什么是顺序查找" tabindex="-1">什么是顺序查找？ <a class="header-anchor" href="#什么是顺序查找" aria-label="Permalink to &quot;什么是顺序查找？&quot;">​</a></h2><p>顺序查找（sequential search），也称穷举查找，是一种基本的查找算法。</p><p>顺序查找是按照序列原有顺序对数组进行遍历比较查询的基本查找算法。静态查找表既可以使用顺序表表示，也可以使用链表结构表示。虽然一个是数组、一个链表，但两者在做查找操作时，基本上都是大同小异。</p><h2 id="顺序查找的改进" tabindex="-1">顺序查找的改进 <a class="header-anchor" href="#顺序查找的改进" aria-label="Permalink to &quot;顺序查找的改进&quot;">​</a></h2><p>顺序查找的改进：设置一个“哨兵”，就是等待查询的值，放在查找方向的尽头处，避免了每一次比较后都要判断一下当前的位置是否越界了。</p><p>习惯上我们一般将“哨兵”放在开头，然后逆序查找，放置好“哨兵”以后，从没有“哨兵”的一端依次遍历，如果查找的数据与关键字（key 值）相等，则输出，当程序运行到“哨兵”处，查询结束。</p><h2 id="复杂度分析" tabindex="-1">复杂度分析 <a class="header-anchor" href="#复杂度分析" aria-label="Permalink to &quot;复杂度分析&quot;">​</a></h2><ul><li>时间复杂度：<em>O(n)</em></li><li>空间复杂度：<em>O(1)</em></li></ul>',9),l=[c];function n(s,i,h,d,_,p){return e(),t("div",null,l)}const f=a(o,[["render",n]]);export{u as __pageData,f as default};

import{_ as l,W as t,X as i,Y as n,a0 as s,Z as e,a1 as o,C as p}from"./framework-d3200c61.js";const c={},r=o(`<h2 id="链表概述" tabindex="-1"><a class="header-anchor" href="#链表概述" aria-hidden="true">#</a> 链表概述</h2><p>链表是一种通过指针串联在一起的线性结构，每一个结点由两部分组成，一个是数据域一个是指针域（存放指向下一个结点的指针），最后一个结点的指针域指向 null（空指针的意思）。</p><p>链表的入口结点称为链表的头结点也就是 head。</p><p>上面讲的是我们最常见的单向链表，实际上链表还可以分为：</p><ul><li>单向链表：一个结点指向下一个结点。</li></ul><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806194529815.png" alt="单向链表" loading="lazy"></p><ul><li>双向链表：每一个结点有两个指针域，一个指向下一个结点，一个指向上一个结点。</li></ul><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806194559317.png" alt="双向链表" loading="lazy"></p><ul><li>循环链表：能通过任何一个结点找到其他所有的结点，将两种 (双向/单向) 链表的最后一个结点指向第一个结点从而实现循环。</li></ul><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806194629603.png" alt="循环链表" loading="lazy"></p><h2 id="链表的存储方式" tabindex="-1"><a class="header-anchor" href="#链表的存储方式" aria-hidden="true">#</a> 链表的存储方式</h2><p>数组是在内存中是连续分布的，但是链表在内存中可不是连续分布的。</p><p>链表是通过指针域的指针链接在内存中各个结点。</p><p>所以链表中的结点在内存中不是连续分布的，而是散乱分布在内存中的某地址上，分配机制取决于操作系统的内存管理。</p><p>如图：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806194613920.png" alt="链表存储方式" loading="lazy"></p><h2 id="链表的定义" tabindex="-1"><a class="header-anchor" href="#链表的定义" aria-hidden="true">#</a> 链表的定义</h2><p>单向链表的定义</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>
    <span class="token comment">// 结点的值</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>

    <span class="token comment">// 下一个结点</span>
    <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>

    <span class="token comment">// 节点的构造函数 (无参)</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 节点的构造函数 (有一个参数)</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 节点的构造函数 (有两个参数)</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链表的操作" tabindex="-1"><a class="header-anchor" href="#链表的操作" aria-hidden="true">#</a> 链表的操作</h2><p>下述的操作都默认为单向链表</p><p><strong>添加结点</strong></p><p>在链表中添加结点，需要先从头结点遍历至要插入位置的上一个结点，通过改变其指针至待添加的结点，以及将待添加的结点指向要插入位置原来的结点来实现，如图：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806195134331-20230310121503147.png" alt="添加结点" loading="lazy"></p><p><strong>删除结点</strong></p><p>在链表中删除结点，需要进行和添加结点正好相反的操作，但是都需要先遍历到要删除的结点的上一个结点（因为结点的引用在上一个结点），然后将上一个结点的指针，直接指向待删除结点再下一个结点，如图：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20200806195114541-20230310121459257.png" alt="删除结点" loading="lazy"></p><h2 id="链表的性能" tabindex="-1"><a class="header-anchor" href="#链表的性能" aria-hidden="true">#</a> 链表的性能</h2><p>数组在定义的时候，长度就是固定的，如果想改动数组的长度，就需要重新定义一个新的数组。</p><p>链表的长度可以是不固定的，并且可以动态增删，适合数据量不固定，频繁增删，较少查询的场景。</p><h2 id="相关算法题" tabindex="-1"><a class="header-anchor" href="#相关算法题" aria-hidden="true">#</a> 相关算法题</h2><p>解链表相关算法题常用的技巧：</p><ol><li>虚拟头结点</li><li>双指针/快慢指针</li><li>递归</li></ol>`,33),d={href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://leetcode.cn/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://leetcode.cn/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"},k={href:"https://leetcode.cn/problems/intersection-of-two-linked-lists",target:"_blank",rel:"noopener noreferrer"},m={href:"https://leetcode.cn/problems/merge-k-sorted-lists/",target:"_blank",rel:"noopener noreferrer"},v=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),s(" 参考资料")],-1),b={href:"https://programmercarl.com/%E9%93%BE%E8%A1%A8%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%80.html",target:"_blank",rel:"noopener noreferrer"};function g(_,f){const a=p("ExternalLinkIcon");return t(),i("div",null,[r,n("ul",null,[n("li",null,[n("a",d,[s("019. 删除链表的倒数第 N 个结点"),e(a)])]),n("li",null,[n("a",u,[s("142. 环形链表 II"),e(a)])]),n("li",null,[n("a",h,[s("206. 反转链表"),e(a)])]),n("li",null,[n("a",k,[s("160. 相交链表"),e(a)])]),n("li",null,[n("a",m,[s("23. 合并 K 个升序链表"),e(a)])])]),v,n("ul",null,[n("li",null,[n("a",b,[s("链表理论基础"),e(a)])])])])}const x=l(c,[["render",g],["__file","linkedlist.html.vue"]]);export{x as default};

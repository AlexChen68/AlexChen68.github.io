import{_ as o,W as n,X as l,Z as e,$ as a,a0 as t,a1 as d,C as c}from"./framework-ea95e8eb.js";const r={},g=e("h2",{id:"git-简介",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#git-简介","aria-hidden":"true"},"#"),a(" Git 简介")],-1),p=e("p",null,[e("code",null,"Git"),a(" 是一种分布式版本控制系统，它可以不受网络连接的限制，加上其它众多优点，目前已经成为程序开发人员做项目版本管理时的首选，非开发人员也可以用 "),e("code",null,"Git"),a(" 来做自己的文档版本管理工具。")],-1),h={href:"https://learngitbranching.js.org/?locale=zh_CN",target:"_blank",rel:"noopener noreferrer"},u=e("h2",{id:"基础操作",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#基础操作","aria-hidden":"true"},"#"),a(" 基础操作")],-1),m=e("h3",{id:"安装-git",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装-git","aria-hidden":"true"},"#"),a(" 安装 Git")],-1),x=e("ol",null,[e("li",null,"下载 Git 安装包")],-1),b={href:"https://git-scm.com/download",target:"_blank",rel:"noopener noreferrer"},v=d(`<ol start="2"><li>双击安装包安装</li></ol><p>Git 安装时有许多可选配置，无特殊需求，使用默认选择即可。</p><ol start="3"><li>配置 Git 全局用户和邮箱</li></ol><p>使用如下命令配置：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;yourname&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;youremail&quot;</span>
</code></pre></div><p>如果你只想改变当前 Git 仓库的配置，去掉 <code>global</code> 参数即可。</p><p>如果你需要删除配置，可以使用：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> user.name
</code></pre></div><h3 id="常用操作" tabindex="-1"><a class="header-anchor" href="#常用操作" aria-hidden="true">#</a> 常用操作</h3><p>所谓实用主义，就是掌握了以下知识就可以玩转 <code>Git</code>，轻松应对 90% 以上的需求。以下是实用主义型的 Git 命令列表，先大致看一下</p><ul><li><code>git clone</code></li><li><code>git config</code></li><li><code>git branch</code></li><li><code>git checkout</code></li><li><code>git status</code></li><li><code>git add</code></li><li><code>git commit</code></li><li><code>git push</code></li><li><code>git pull</code></li><li><code>git log</code></li><li><code>git tag</code></li></ul><p>接下来，将通过对 我的博客 仓库进行实例操作，讲解如何使用 <code>Git</code> 拉取代码到提交代码的整个流程。</p><h4 id="git-clone" tabindex="-1"><a class="header-anchor" href="#git-clone" aria-hidden="true">#</a> git clone</h4><blockquote><p>从 git 服务器拉取代码</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git clone https://github.com/gafish/gafish.github.com.git
</code></pre></div><p>代码下载完成后在当前文件夹中会有一个 <code>gafish.github.com</code> 的目录，通过 <code>cd gafish.github.com</code> 命令进入目录。</p><h4 id="git-config" tabindex="-1"><a class="header-anchor" href="#git-config" aria-hidden="true">#</a> git config</h4><blockquote><p>配置开发者用户名和邮箱</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git config user.name gafish
git config user.email gafish@qqqq.com
</code></pre></div><p>每次代码提交的时候都会生成一条提交记录，其中会包含当前配置的用户名和邮箱。</p><h4 id="git-branch" tabindex="-1"><a class="header-anchor" href="#git-branch" aria-hidden="true">#</a> git branch</h4><blockquote><p>创建、重命名、查看、删除项目分支，通过 <code>Git</code> 做项目开发时，一般都是在开发分支中进行，开发完成后合并分支到主干。</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git branch daily/0.0.0
</code></pre></div><p>创建一个名为 <code>daily/0.0.0</code> 的日常开发分支，分支名只要不包括特殊字符即可。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git branch -m daily/0.0.0 daily/0.0.1
</code></pre></div><p>如果觉得之前的分支名不合适，可以为新建的分支重命名，重命名分支名为 <code>daily/0.0.1</code></p><div class="language-text" data-ext="text"><pre class="language-text"><code>git branch
</code></pre></div><p>通过不带参数的 branch 命令可以查看当前项目分支列表</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git branch -d daily/0.0.1
</code></pre></div><p>如果分支已经完成使命则可以通过 <code>-d</code> 参数将分支删除，这里为了继续下一步操作，暂不执行删除操作</p><h4 id="git-checkout" tabindex="-1"><a class="header-anchor" href="#git-checkout" aria-hidden="true">#</a> git checkout</h4><blockquote><p>切换分支</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git checkout daily/0.0.1
</code></pre></div><p>切换到 <code>daily/0.0.1</code> 分支，后续的操作将在这个分支上进行</p><h4 id="git-status" tabindex="-1"><a class="header-anchor" href="#git-status" aria-hidden="true">#</a> git status</h4><blockquote><p>查看文件变动状态</p></blockquote><p>通过任何你喜欢的编辑器对项目中的 <code>README.md</code> 文件做一些改动，保存。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git status
</code></pre></div><p>通过 <code>git status</code> 命令可以看到文件当前状态 <code>Changes not staged for commit:</code>（<em>改动文件未提交到暂存区</em>）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>On branch daily/0.0.1
Changes not staged for commit:
  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)
  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)
    modified:   README.md
no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="git-add" tabindex="-1"><a class="header-anchor" href="#git-add" aria-hidden="true">#</a> git add</h4><blockquote><p>添加文件变动到暂存区</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git add README.md
</code></pre></div><p>通过指定文件名 <code>README.md</code> 可以将该文件添加到暂存区，如果想添加所有文件可用 <code>git add .</code> 命令，这时候可通过 <code>git status</code> 看到文件当前状态 <code>Changes to be committed:</code> （<em>文件已提交到暂存区</em>）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>On branch daily/0.0.1
Changes to be committed:
  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
    modified:   README.md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="git-commit" tabindex="-1"><a class="header-anchor" href="#git-commit" aria-hidden="true">#</a> git commit</h4><blockquote><p>提交文件变动到版本库</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git commit -m &#39;这里写提交原因&#39;
</code></pre></div><p>通过 <code>-m</code> 参数可直接在命令行里输入提交描述文本</p><h4 id="git-push" tabindex="-1"><a class="header-anchor" href="#git-push" aria-hidden="true">#</a> git push</h4><blockquote><p>将本地的代码改动推送到服务器</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git push origin daily/0.0.1
</code></pre></div><p><code>origin</code> 指代的是当前的 git 服务器地址，这行命令的意思是把 <code>daily/0.0.1</code> 分支推送到服务器，当看到命令行返回如下字符表示推送成功了。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Counting objects: 3, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 267 bytes | 0 bytes/s, done.
Total 3 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local objects.
To https://github.com/gafish/gafish.github.com.git
 * [new branch]      daily/0.0.1 -&gt; daily/0.0.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们回到 Github 网站的项目首页，点击 <code>Branch:master</code> 下拉按钮，就会看到刚才推送的 <code>daily/00.1</code> 分支了</p><h4 id="git-pull" tabindex="-1"><a class="header-anchor" href="#git-pull" aria-hidden="true">#</a> git pull</h4><blockquote><p>将服务器上的最新代码拉取到本地</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git pull origin daily/0.0.1
</code></pre></div><p>如果其它项目成员对项目做了改动并推送到服务器，我们需要将最新的改动更新到本地，这里我们来模拟一下这种情况。</p><p>进入 Github 网站的项目首页，再进入 <code>daily/0.0.1</code> 分支，在线对 <code>README.md</code> 文件做一些修改并保存，然后在命令中执行以上命令，它将把刚才在线修改的部分拉取到本地，用编辑器打开 <code>README.md</code> ，你会发现文件已经跟线上的内容同步了。</p><p><em>如果线上代码做了变动，而你本地的代码也有变动，拉取的代码就有可能会跟你本地的改动冲突，一般情况下 <code>Git</code> 会自动处理这种冲突合并，但如果改动的是同一行，那就需要手动来合并代码，编辑文件，保存最新的改动，再通过 <code>git add .</code>和 <code>git commit -m &#39;xxx&#39;</code> 来提交合并。</em></p><h4 id="git-log" tabindex="-1"><a class="header-anchor" href="#git-log" aria-hidden="true">#</a> git log</h4><blockquote><p>查看版本提交记录</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git log
</code></pre></div><p>通过以上命令，我们可以查看整个项目的版本提交记录，它里面包含了<code>提交人</code>、<code>日期</code>、<code>提交原因</code>等信息，得到的结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>commit c334730f8dba5096c54c8ac04fdc2b31ede7107a
Author: gafish &lt;gafish@qqqq.com&gt;
Date:   Wed Jan 11 09:44:13 2017 +0800
    Update README.md
commit ba6e3d21fcb1c87a718d2a73cdd11261eb672b2a
Author: gafish &lt;gafish@qqqq.com&gt;
Date:   Wed Jan 11 09:31:33 2017 +0800
    test
.....
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提交记录可能会非常多，按 <code>J</code> 键往下翻，按 <code>K</code> 键往上翻，按 <code>Q</code> 键退出查看</p><h4 id="git-tag" tabindex="-1"><a class="header-anchor" href="#git-tag" aria-hidden="true">#</a> git tag</h4><blockquote><p>为项目标记里程碑</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git tag publish/0.0.1
git push origin publish/0.0.1
</code></pre></div><p>当我们完成某个功能需求准备发布上线时，应该将此次完整的项目代码做个标记，并将这个标记好的版本发布到线上，这里我们以 <code>publish/0.0.1</code> 为标记名并发布，当看到命令行返回如下内容则表示发布成功了</p><div class="language-text" data-ext="text"><pre class="language-text"><code>Total 0 (delta 0), reused 0 (delta 0)
To https://github.com/gafish/gafish.github.com.git
 * [new tag]         publish/0.0.1 -&gt; publish/0.0.1
</code></pre></div><h4 id="gitignore" tabindex="-1"><a class="header-anchor" href="#gitignore" aria-hidden="true">#</a> .gitignore</h4><blockquote><p>设置哪些内容不需要推送到服务器，这是一个配置文件</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>touch .gitignore
</code></pre></div><p><code>.gitignore</code> 不是 <code>Git</code> 命令，而在项目中的一个文件，通过设置 <code>.gitignore</code> 的内容告诉 <code>Git</code> 哪些文件应该被忽略不需要推送到服务器，通过以上命令可以创建一个 <code>.gitignore</code> 文件，并在编辑器中打开文件，每一行代表一个要忽略的文件或目录，如：</p><div class="language-text" data-ext="text"><pre class="language-text"><code>demo.html
build/
</code></pre></div><p>以上内容的意思是 <code>Git</code> 将忽略 <code>demo.html</code> 文件 和 <code>build/</code> 目录，这些内容不会被推送到服务器上</p><h4 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h4><p>通过掌握以上这些基本命令就可以在项目中开始用起来了，如果追求实用，那关于 <code>Git</code> 的学习就可以到此结束了，偶尔遇到的问题也基本上通过 <code>Google</code> 也能找到答案，如果想深入探索 <code>Git</code> 的高阶功能，那就继续往下看 <code>进阶篇</code> 部分。</p><h2 id="进阶篇" tabindex="-1"><a class="header-anchor" href="#进阶篇" aria-hidden="true">#</a> 进阶篇</h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><h4 id="工作区-working-directory" tabindex="-1"><a class="header-anchor" href="#工作区-working-directory" aria-hidden="true">#</a> 工作区（<em>Working Directory</em>）</h4><p>就是你在电脑里能看到的目录，比如上文中的 <code>gafish.github.com</code> 文件夹就是一个工作区</p><p><img src="https://cdn.staticaly.com/gh/AlexChen68/image-hosting@master/blog/devops/git_working_directory.jpeg" alt="git_working_directory" loading="lazy"></p><h4 id="本地版本库-local-repository" tabindex="-1"><a class="header-anchor" href="#本地版本库-local-repository" aria-hidden="true">#</a> 本地版本库（<em>Local Repository</em>）</h4><p>工作区有一个隐藏目录 <code>.git</code>，这个不算工作区，而是 <code>Git</code> 的版本库。</p><p><img src="https://cdn.staticaly.com/gh/AlexChen68/image-hosting@master/blog/devops/git_local_repository.jpeg" alt="git_local_repository" loading="lazy"></p><h4 id="暂存区-stage" tabindex="-1"><a class="header-anchor" href="#暂存区-stage" aria-hidden="true">#</a> 暂存区（<em>stage</em>）</h4><p>本地版本库里存了很多东西，其中最重要的就是称为 <code>stage</code>（或者叫 index）的暂存区，还有 <code>Git</code> 为我们自动创建的第一个分支 <code>master</code>，以及指向 <code>master</code> 的一个指针叫 <code>HEAD</code>。</p><h4 id="远程版本库-remote-repository" tabindex="-1"><a class="header-anchor" href="#远程版本库-remote-repository" aria-hidden="true">#</a> 远程版本库（<em>Remote Repository</em>）</h4><p>一般指的是 <code>Git</code> 服务器上所对应的仓库，本文的示例所在的<code>github</code>仓库就是一个远程版本库</p><p><img src="https://cdn.staticaly.com/gh/AlexChen68/image-hosting@master/blog/devops/git_remote_repository.jpeg" alt="git_remote_repository" loading="lazy"></p><h4 id="以上概念之间的关系" tabindex="-1"><a class="header-anchor" href="#以上概念之间的关系" aria-hidden="true">#</a> 以上概念之间的关系</h4><p><code>工作区</code>、<code>暂存区</code>、<code>本地版本库</code>、<code>远程版本库</code>之间几个常用的 <code>Git</code> 操作流程如下图所示：</p><p><img src="https://cdn.staticaly.com/gh/AlexChen68/image-hosting@master/blog/devops/git_flow.jpeg" alt="git_flow.jpg" loading="lazy"></p><h4 id="分支-branch" tabindex="-1"><a class="header-anchor" href="#分支-branch" aria-hidden="true">#</a> 分支（<em>Branch</em>）</h4><p>分支是为了将修改记录的整个流程分开存储，让分开的分支不受其它分支的影响，所以在同一个数据库里可以同时进行多个不同的修改</p><p><img src="https://cdn.staticaly.com/gh/AlexChen68/image-hosting@master/blog/devops/git_branch.png" alt="git_branch" loading="lazy"></p><h4 id="主分支-master" tabindex="-1"><a class="header-anchor" href="#主分支-master" aria-hidden="true">#</a> 主分支（<em>Master</em>）</h4><p>前面提到过 <code>master</code> 是 <code>Git</code> 为我们自动创建的第一个分支，也叫主分支，其它分支开发完成后都要合并到 <code>master</code></p><p><img src="https://cdn.staticaly.com/gh/AlexChen68/image-hosting@master/blog/devops/git_master.png" alt="git_master" loading="lazy"></p><h4 id="标签-tag" tabindex="-1"><a class="header-anchor" href="#标签-tag" aria-hidden="true">#</a> 标签（<em>Tag</em>）</h4><p>标签是用于标记特定的点或提交的历史，通常会用来标记发布版本的名称或版本号（如：<code>publish/0.0.1</code>），虽然标签看起来有点像分支，但打上标签的提交是固定的，不能随意的改动，参见上图中的<code>1.0</code> / <code>2.0</code> / <code>3.0</code></p><h4 id="head" tabindex="-1"><a class="header-anchor" href="#head" aria-hidden="true">#</a> HEAD</h4><p><code>HEAD</code> 指向的就是当前分支的最新提交</p><p><img src="https://cdn.staticaly.com/gh/AlexChen68/image-hosting@master/blog/devops/git_head.png" alt="git_head" loading="lazy"></p><blockquote><p>以上概念了解的差不多，那就可以继续往下看，下面将以具体的操作类型来讲解 <code>Git</code> 的高阶用法</p></blockquote><h3 id="操作文件" tabindex="-1"><a class="header-anchor" href="#操作文件" aria-hidden="true">#</a> 操作文件</h3><h4 id="git-add-1" tabindex="-1"><a class="header-anchor" href="#git-add-1" aria-hidden="true">#</a> git add</h4><blockquote><p>添加文件到暂存区</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git add -i
</code></pre></div><p>通过此命令将打开交互式子命令系统，你将看到如下子命令</p><div class="language-text" data-ext="text"><pre class="language-text"><code>***Commands***
  1: status      2: update      3: revert      4: add untracked
  5: patch      6: diff      7: quit      8: help
</code></pre></div><p>通过输入序列号或首字母可以选择相应的功能，具体的功能解释如下：</p><ul><li><code>status</code>：功能上和 <code>git add -i</code> 相似，没什么鸟用</li><li><code>update</code>：详见下方 <code>git add -u</code></li><li><code>revert</code>：把已经添加到暂存区的文件从暂存区剔除，其操作方式和 <code>update</code>类似</li><li><code>add untracked</code>：可以把新增的文件添加到暂存区，其操作方式和 <code>update</code> 类似</li><li><code>patch</code>：详见下方 <code>git add -p</code></li><li><code>diff</code>：比较暂存区文件和本地版本库的差异，其操作方式和 <code>update</code> 类似</li><li><code>quit</code>：退出 <code>git add -i</code> 命令系统</li><li><code>help</code>：查看帮助信息</li></ul><div class="language-text" data-ext="text"><pre class="language-text"><code>git add -p
</code></pre></div><p>直接进入交互命令中最有用的 <code>patch</code> 模式</p><p>这是交互命令中最有用的模式，其操作方式和 <code>update</code> 类似，选择后 <code>Git</code> 会显示这些文件的当前内容与本地版本库中的差异，然后您可以自己决定是否添加这些修改到暂存区，在命令行 <code>Stage deletion [y,n,q,a,d,/,?]?</code> 后输入 <code>y,n,q,a,d,/,?</code> 其中一项选择操作方式，具体功能解释如下：</p><ul><li>y：接受修改</li><li>n：忽略修改</li><li>q：退出当前命令</li><li>a：添加修改</li><li>d：放弃修改</li><li>/：通过正则表达式匹配修改内容</li><li>?：查看帮助信息</li></ul><div class="language-text" data-ext="text"><pre class="language-text"><code>git add -u
</code></pre></div><p>直接进入交互命令中的 <code>update</code> 模式</p><p>它会先列出工作区 <code>修改</code> 或 <code>删除</code> 的文件列表，<code>新增</code> 的文件不会被显示，在命令行 <code>Update&gt;&gt;</code> 后输入相应的列表序列号表示选中该项，回车继续选择，如果已选好，直接回车回到命令主界面</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git add --ignore-removal .
</code></pre></div><p>添加工作区 <code>修改</code> 或 <code>新增</code> 的文件列表， <code>删除</code> 的文件不会被添加</p><h4 id="git-commit-1" tabindex="-1"><a class="header-anchor" href="#git-commit-1" aria-hidden="true">#</a> git commit</h4><blockquote><p>把暂存区的文件提交到本地版本库</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git commit -m &#39;第一行提交原因&#39;  -m &#39;第二行提交原因&#39;
</code></pre></div><p>不打开编辑器，直接在命令行中输入多行提交原因</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git commit -am &#39;提交原因&#39;
</code></pre></div><p>将工作区 <code>修改</code> 或 <code>删除</code> 的文件提交到本地版本库， <code>新增</code> 的文件不会被提交</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git commit --amend -m &#39;提交原因&#39;
</code></pre></div><p>修改最新一条提交记录的提交原因</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git commit -C HEAD
</code></pre></div><p>将当前文件改动提交到 <code>HEAD</code> 或当前分支的历史 ID</p><h4 id="git-mv" tabindex="-1"><a class="header-anchor" href="#git-mv" aria-hidden="true">#</a> git mv</h4><blockquote><p>移动或重命名文件、目录</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git mv a.md b.md -f
</code></pre></div><p>将 <code>a.md</code> 重命名为 <code>b.md</code> ，同时添加变动到暂存区，加 <code>-f</code> 参数可以强制重命名，相比用 <code>mv a.md b.md</code> 命令省去了 <code>git add</code> 操作</p><h4 id="git-rm" tabindex="-1"><a class="header-anchor" href="#git-rm" aria-hidden="true">#</a> git rm</h4><blockquote><p>从工作区和暂存区移除文件</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git rm b.md
</code></pre></div><p>从工作区和暂存区移除文件 <code>b.md</code> ，同时添加变动到暂存区，相比用 <code>rm b.md</code> 命令省去了 <code>git add</code> 操作</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git rm src/ -r
</code></pre></div><p>允许从工作区和暂存区移除目录</p><h4 id="git-status-1" tabindex="-1"><a class="header-anchor" href="#git-status-1" aria-hidden="true">#</a> git status</h4><div class="language-text" data-ext="text"><pre class="language-text"><code>git status -s
</code></pre></div><p>以简短方式查看工作区和暂存区文件状态，示例如下：</p><div class="language-text" data-ext="text"><pre class="language-text"><code> M demo.html
?? test.html
git status --ignored
</code></pre></div><p>查看工作区和暂存区文件状态，包括被忽略的文件</p><h3 id="操作分支" tabindex="-1"><a class="header-anchor" href="#操作分支" aria-hidden="true">#</a> 操作分支</h3><h4 id="git-branch-1" tabindex="-1"><a class="header-anchor" href="#git-branch-1" aria-hidden="true">#</a> git branch</h4><blockquote><p>查看、创建、删除分支</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git branch -a
</code></pre></div><p>查看本地版本库和远程版本库上的分支列表</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git branch -r
</code></pre></div><p>查看远程版本库上的分支列表，加上 <code>-d</code> 参数可以删除远程版本库上的分支</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git branch -D
</code></pre></div><p>分支未提交到本地版本库前强制删除分支</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git branch -vv
</code></pre></div><p>查看带有最后提交 id、最近提交原因等信息的本地版本库分支列表</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/kChlCQZAfH5eBrzeP4kHVbwcqAicZkgowU49NhDrc0SXtGWqNUoNQ71NRCnmicZgtFQzgnunugP4pML52jChNFoA/640?wx_fmt=png" alt="img" loading="lazy"></p><h4 id="git-merge" tabindex="-1"><a class="header-anchor" href="#git-merge" aria-hidden="true">#</a> git merge</h4><blockquote><p>将其它分支合并到当前分支</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git merge --squash
</code></pre></div><p>将待合并分支上的 <code>commit</code> 合并成一个新的 <code>commit</code> 放入当前分支，适用于待合并分支的提交记录不需要保留的情况<img src="https://mmbiz.qpic.cn/mmbiz_gif/JdLkEI9sZfd5v84p7lS2Mr1pThtnyVebF8X289ibrNSus6ibMHfT8BviaUJuVibFvdZ8zokaCQlsrqZOKs1W7QZl5Q/640?wx_fmt=gif" alt="img" loading="lazy"></p><div class="language-text" data-ext="text"><pre class="language-text"><code>git merge --no-ff
</code></pre></div><p>默认情况下，<code>Git</code> 执行&quot;<code>快进式合并</code>&quot;（fast-farward merge），会直接将 <code>Master</code>分支指向 <code>Develop</code> 分支，使用 <code>--no-ff</code> 参数后，会执行正常合并，在 <code>Master</code>分支上生成一个新节点，保证版本演进更清晰。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_png/kChlCQZAfH5eBrzeP4kHVbwcqAicZkgowMRTMOI4wPj7ZZSURhODgT5QGEicfXIS3icW6LJRTwf4YdJUWOnugxQoA/640?wx_fmt=png" alt="img" loading="lazy"></p><div class="language-text" data-ext="text"><pre class="language-text"><code>git merge --no-edit
</code></pre></div><p>在没有冲突的情况下合并，不想手动编辑提交原因，而是用 <code>Git</code> 自动生成的类似 <code>Merge branch &#39;test&#39;</code> 的文字直接提交</p><h4 id="git-checkout-1" tabindex="-1"><a class="header-anchor" href="#git-checkout-1" aria-hidden="true">#</a> git checkout</h4><blockquote><p>切换分支</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git checkout -b daily/0.0.1
</code></pre></div><p>创建 <code>daily/0.0.1</code> 分支，同时切换到这个新创建的分支</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git checkout HEAD demo.html
</code></pre></div><p>从本地版本库的 <code>HEAD</code>（也可以是提交 ID、分支名、Tag 名）历史中检出 <code>demo.html</code> 覆盖当前工作区的文件，如果省略 <code>HEAD</code> 则是从暂存区检出</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git checkout --orphan new_branch
</code></pre></div><p>这个命令会创建一个全新的，完全没有历史记录的新分支，但当前源分支上所有的最新文件都还在，真是强迫症患者的福音，但这个新分支必须做一次 <code>git commit</code>操作后才会真正成为一个新分支。</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git checkout -p other_branch
</code></pre></div><p>这个命令主要用来比较两个分支间的差异内容，并提供交互式的界面来选择进一步的操作，这个命令不仅可以比较两个分支间的差异，还可以比较单个文件的差异。</p><h4 id="git-stash" tabindex="-1"><a class="header-anchor" href="#git-stash" aria-hidden="true">#</a> git stash</h4><blockquote><p>在 <code>Git</code> 的栈中保存当前修改或删除的工作进度，当你在一个分支里做某项功能开发时，接到通知把昨天已经测试完没问题的代码发布到线上，但这时你已经在这个分支里加入了其它未提交的代码，这个时候就可以把这些未提交的代码存到栈里。</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git stash
</code></pre></div><p>将未提交的文件保存到 Git 栈中</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git stash list
</code></pre></div><p>查看栈中保存的列表</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git stash show stash@{0}
</code></pre></div><p>显示栈中其中一条记录</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git stash drop stash@{0}
</code></pre></div><p>移除栈中其中一条记录</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git stash pop
</code></pre></div><p>从 Git 栈中检出最新保存的一条记录，并将它从栈中移除</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git stash apply stash@{0}
</code></pre></div><p>从 Git 栈中检出其中一条记录，但不从栈中移除</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git stash branch new_banch
</code></pre></div><p>把当前栈中最近一次记录检出并创建一个新分支</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git stash clear
</code></pre></div><p>清空栈里的所有记录</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git stash create
</code></pre></div><p>为当前修改或删除的文件创建一个自定义的栈并返回一个 ID，此时并未真正存储到栈里</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git stash store xxxxxx
</code></pre></div><p>将 <code>create</code> 方法里返回的 ID 放到 <code>store</code> 后面，此时在栈里真正创建了一个记录，但当前修改或删除的文件并未从工作区移除</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ git stash create
09eb9a97ad632d0825be1ece361936d1d0bdb5c7
$ git stash store 09eb9a97ad632d0825be1ece361936d1d0bdb5c7
$ git stash list
stash@{0}: Created via &quot;git stash store&quot;.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="操作历史" tabindex="-1"><a class="header-anchor" href="#操作历史" aria-hidden="true">#</a> 操作历史</h3><h4 id="git-log-1" tabindex="-1"><a class="header-anchor" href="#git-log-1" aria-hidden="true">#</a> git log</h4><blockquote><p>显示提交历史记录</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git log -p
</code></pre></div><p>显示带提交差异对比的历史记录</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git log demo.html
</code></pre></div><p>显示 <code>demo.html</code> 文件的历史记录</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git log --since=&quot;2 weeks ago&quot;
</code></pre></div><p>显示 2 周前开始到现在的历史记录，其它时间可以类推</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git log --before=&quot;2 weeks ago&quot;
</code></pre></div><p>显示截止到 2 周前的历史记录，其它时间可以类推</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git log -10
</code></pre></div><p>显示最近 10 条历史记录</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git log f5f630a..HEAD
</code></pre></div><p>显示从提交 ID <code>f5f630a</code> 到 <code>HEAD</code> 之间的记录，<code>HEAD</code> 可以为空或其它提交 ID</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git log --pretty=oneline
</code></pre></div><p>在一行中输出简短的历史记录</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git log --pretty=format:&quot;%h&quot;
</code></pre></div><p>格式化输出历史记录</p><p><code>Git</code> 用各种 <code>placeholder</code> 来决定各种显示内容，我挑几个常用的显示如下：</p><ul><li>%H: commit hash</li><li>%h: 缩短的 commit hash</li><li>%T: tree hash</li><li>%t: 缩短的 tree hash</li><li>%P: parent hashes</li><li>%p: 缩短的 parent hashes</li><li>%an: 作者名字</li><li>%aN: mailmap 的作者名</li><li>%ae: 作者邮箱</li><li>%ad: 日期 (--date= 制定的格式)</li><li>%ar: 日期，相对格式 (1 day ago)</li><li>%cn: 提交者名字</li><li>%ce: 提交者 email</li><li>%cd: 提交日期 (--date= 制定的格式)</li><li>%cr: 提交日期，相对格式 (1 day ago)</li><li>%d: ref 名称</li><li>%s: commit 信息标题</li><li>%b: commit 信息内容</li><li>%n: 换行</li></ul><h4 id="git-cherry-pick" tabindex="-1"><a class="header-anchor" href="#git-cherry-pick" aria-hidden="true">#</a> git cherry-pick</h4><blockquote><p>合并分支的一条或几条提交记录到当前分支末梢</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git cherry-pick 170a305
</code></pre></div><p>合并提交 ID <code>170a305</code> 到当前分支末梢</p><h4 id="git-reset" tabindex="-1"><a class="header-anchor" href="#git-reset" aria-hidden="true">#</a> git reset</h4><blockquote><p>将当前的分支重设（reset）到指定的 <code>&lt;commit&gt;</code> 或者 <code>HEAD</code></p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git reset --mixed &lt;commit&gt;
</code></pre></div><p><code>--mixed</code> 是不带参数时的默认参数，它退回到某个版本，保留文件内容，回退提交历史</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git reset --soft &lt;commit&gt;
</code></pre></div><p>暂存区和工作区中的内容不作任何改变，仅仅把 <code>HEAD</code> 指向 <code>&lt;commit&gt;</code></p><div class="language-text" data-ext="text"><pre class="language-text"><code>git reset --hard &lt;commit&gt;
</code></pre></div><p>自从 <code>&lt;commit&gt;</code> 以来在工作区中的任何改变都被丢弃，并把 <code>HEAD</code> 指向 <code>&lt;commit&gt;</code></p><h4 id="git-rebase" tabindex="-1"><a class="header-anchor" href="#git-rebase" aria-hidden="true">#</a> git rebase</h4><blockquote><p>重新定义分支的版本库状态</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git rebase branch_name
</code></pre></div><p>合并分支，这跟 <code>merge</code> 很像，但还是有本质区别，看下图：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/kChlCQZAfH5eBrzeP4kHVbwcqAicZkgowJVnNZciaQfnn8vbqXet2mRj9aoR4HKQ230T4hggwJwgh5CbfVAwGQsw/640?wx_fmt=jpeg" alt="img" loading="lazy"></p><p>合并过程中可能需要先解决冲突，然后执行 <code>git rebase --continue</code></p><div class="language-text" data-ext="text"><pre class="language-text"><code>git rebase -i HEAD~~
</code></pre></div><p>打开文本编辑器，将看到从 <code>HEAD</code> 到 <code>HEAD~~</code> 的提交如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>pick 9a54fd4 添加commit的说明
pick 0d4a808 添加pull的说明
# Rebase 326fc9f..0d4a808 onto d286baa
#
# Commands:
#  p, pick = use commit
#  r, reword = use commit, but edit the commit message
#  e, edit = use commit, but stop for amending
#  s, squash = use commit, but meld into previous commit
#  f, fixup = like &quot;squash&quot;, but discard this commit&#39;s log message
#  x, exec = run command (the rest of the line) using shell
#
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将第一行的 <code>pick</code> 改成 <code>Commands</code> 中所列出来的命令，然后保存并退出，所对应的修改将会生效。如果移动提交记录的顺序，将改变历史记录中的排序。</p><h4 id="git-revert" tabindex="-1"><a class="header-anchor" href="#git-revert" aria-hidden="true">#</a> git revert</h4><blockquote><p>撤销某次操作，此次操作之前和之后的 <code>commit</code> 和 <code>history</code> 都会保留，并且把这次撤销作为一次最新的提交</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git revert HEAD
</code></pre></div><p>撤销前一次提交操作</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git revert HEAD --no-edit
</code></pre></div><p>撤销前一次提交操作，并以默认的 <code>Revert &quot;xxx&quot;</code> 为提交原因</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git revert -n HEAD
</code></pre></div><p>需要撤销多次操作的时候加 <code>-n</code> 参数，这样不会每次撤销操作都提交，而是等所有撤销都完成后一起提交</p><h4 id="git-diff" tabindex="-1"><a class="header-anchor" href="#git-diff" aria-hidden="true">#</a> git diff</h4><blockquote><p>查看工作区、暂存区、本地版本库之间的文件差异，用一张图来解释</p></blockquote><p><img src="https://mmbiz.qpic.cn/mmbiz_png/kChlCQZAfH5eBrzeP4kHVbwcqAicZkgowbTtpHas5ZBpKFGFU8FxcaR8cCeANrcGmBwtpiaHkib8SQxJBLhOxEbOA/640?wx_fmt=png" alt="img" loading="lazy"></p><div class="language-text" data-ext="text"><pre class="language-text"><code>git diff --stat
</code></pre></div><p>通过 <code>--stat</code> 参数可以查看变更统计数据</p><div class="language-text" data-ext="text"><pre class="language-text"><code> test.md | 1 -
 1 file changed, 1 deletion(-)
</code></pre></div><h4 id="git-reflog" tabindex="-1"><a class="header-anchor" href="#git-reflog" aria-hidden="true">#</a> git reflog</h4><p><code>reflog</code> 可以查看所有分支的所有操作记录（包括 commit 和 reset 的操作、已经被删除的 commit 记录，跟 <code>git log</code> 的区别在于它不能查看已经删除了的 commit 记录<img src="https://mmbiz.qpic.cn/mmbiz_jpg/kChlCQZAfH5eBrzeP4kHVbwcqAicZkgow9g0GgTQppOgauVPMguPXWE8qOQqsic0j3IL9NxNns5D16qa9HvOn9rA/640?wx_fmt=jpeg" alt="img" loading="lazy"></p><h3 id="远程版本库连接" tabindex="-1"><a class="header-anchor" href="#远程版本库连接" aria-hidden="true">#</a> 远程版本库连接</h3><p>如果在 GitHub 项目初始化之前，文件已经存在于本地目录中，那可以在本地初始化本地版本库，再将本地版本库跟远程版本库连接起来</p><h4 id="git-init" tabindex="-1"><a class="header-anchor" href="#git-init" aria-hidden="true">#</a> git init</h4><blockquote><p>在本地目录内部会生成.git 文件夹</p></blockquote><h4 id="git-remote" tabindex="-1"><a class="header-anchor" href="#git-remote" aria-hidden="true">#</a> git remote</h4><div class="language-text" data-ext="text"><pre class="language-text"><code>git remote -v
</code></pre></div><p>不带参数，列出已经存在的远程分支，加上 <code>-v</code> 列出详细信息，在每一个名字后面列出其远程 url</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git remote add origin https://github.com/gafish/gafish.github.com.git
</code></pre></div><p>添加一个新的远程仓库，指定一个名字，以便引用后面带的 URL</p><h4 id="git-fetch" tabindex="-1"><a class="header-anchor" href="#git-fetch" aria-hidden="true">#</a> git fetch</h4><blockquote><p>将远程版本库的更新取回到本地版本库</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git fetch origin daily/0.0.1
</code></pre></div><p>默认情况下，<code>git fetch</code> 取回所有分支的更新。如果只想取回特定分支的更新，可以指定分支名。</p><h3 id="问题排查" tabindex="-1"><a class="header-anchor" href="#问题排查" aria-hidden="true">#</a> 问题排查</h3><h4 id="git-blame" tabindex="-1"><a class="header-anchor" href="#git-blame" aria-hidden="true">#</a> git blame</h4><blockquote><p>查看文件每行代码块的历史信息</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git blame -L 1,10 demo.html
</code></pre></div><p>截取 <code>demo.html</code> 文件 1-10 行历史信息</p><h4 id="git-bisect" tabindex="-1"><a class="header-anchor" href="#git-bisect" aria-hidden="true">#</a> git bisect</h4><blockquote><p>二分查找历史记录，排查 BUG</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git bisect start
</code></pre></div><p>开始二分查找</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git bisect bad
</code></pre></div><p>标记当前二分提交 ID 为有问题的点</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git bisect good
</code></pre></div><p>标记当前二分提交 ID 为没问题的点</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git bisect reset
</code></pre></div><p>查到有问题的提交 ID 后回到原分支</p><h3 id="更多操作" tabindex="-1"><a class="header-anchor" href="#更多操作" aria-hidden="true">#</a> 更多操作</h3><h4 id="git-submodule" tabindex="-1"><a class="header-anchor" href="#git-submodule" aria-hidden="true">#</a> git submodule</h4><blockquote><p>通过 Git 子模块可以跟踪外部版本库，它允许在某一版本库中再存储另一版本库，并且能够保持 2 个版本库完全独立</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git submodule add https://github.com/gafish/demo.git demo
</code></pre></div><p>将 <code>demo</code> 仓库添加为子模块</p><div class="language-text" data-ext="text"><pre class="language-text"><code>git submodule update demo
</code></pre></div><p>更新子模块 <code>demo</code></p><h4 id="git-gc" tabindex="-1"><a class="header-anchor" href="#git-gc" aria-hidden="true">#</a> git gc</h4><blockquote><p>运行 Git 的垃圾回收功能，清理冗余的历史快照</p></blockquote><h4 id="git-archive" tabindex="-1"><a class="header-anchor" href="#git-archive" aria-hidden="true">#</a> git archive</h4><blockquote><p>将加了 tag 的某个版本打包提取</p></blockquote><div class="language-text" data-ext="text"><pre class="language-text"><code>git archive -v --format=zip v0.1 &gt; v0.1.zip
</code></pre></div><p><code>--format</code> 表示打包的格式，如 <code>zip</code>，<code>-v</code> 表示对应的 tag 名，后面跟的是 tag 名，如 <code>v0.1</code>。</p><p>-- End --</p><h2 id="git-提交规范" tabindex="-1"><a class="header-anchor" href="#git-提交规范" aria-hidden="true">#</a> Git 提交规范</h2><p>Git 每次提交代码时，都需要写 Commit Message (提交说明)，否则就不允许提交。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;第一次提交&#39;</span>
</code></pre></div><p>在工作中一份清晰简介规范的 Commit Message 能让后续代码审查、信息查找、版本回退都更加高效可靠。</p><h3 id="commit-message-标准格式" tabindex="-1"><a class="header-anchor" href="#commit-message-标准格式" aria-hidden="true">#</a> Commit Message 标准格式</h3><p><strong>Commit Message</strong> 标准格式包括三个部分：<em>Header，Body，Footer</em></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>type<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>scope<span class="token operator">&gt;</span><span class="token punctuation">)</span>: <span class="token operator">&lt;</span>subject<span class="token operator">&gt;</span>
// 空一行
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
// 空一行
<span class="token operator">&lt;</span>footer<span class="token operator">&gt;</span>
:::
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，Header 是必需的，Body 和 Footer 可以省略。</p><ul><li>页眉（header）通常只有一行，包括了提交类型（type）、作用域（scope）和主题（subject）。其中，type 和 subject 是必须的，scope 是可选的。</li></ul><p><strong>type</strong></p><p>提交类型（type）用于说明此次提交的类型，需要指定为下面其中一个：</p><p><img src="https://cdn.staticaly.com/gh/AlexChen68/image-hosting@master/blog/devops/git_commit_type.png" alt="Git Commit Type" loading="lazy"></p><p><strong>Scope</strong></p><p>作用域（scope）表示此次提交影响的范围。比如可以取值 api，表明只影响了接口。</p><p><strong>Subject</strong></p><p>主题（subject）描述是简短的一句话，简单说明此次提交的内容。</p><ul><li>正文（body）和页眉（footer）这两部分不是必须的。</li></ul><p>如果是破坏性的变更，那就必须在提交的正文或脚注加以展示。一个破坏性变更必须包含大写的文本 BREAKING CHANGE，紧跟冒号和空格。脚注必须只包含 BREAKING CHANGE、外部链接、issue 引用和其它元数据信息。例如修改了提交的流程，依赖了一些包，可以在正文写上：BREANKING CHANGE：需要重新 npm install，使用 npm run cm 代替 git commit。</p><ul><li>下面给出了一个 Commit Message 例子，该例子中包含了 header 和 body。</li></ul><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>chore: 引入commitizen

BREANKING CHANGE：需要重新npm install，使用npm run cm代替git commit
</code></pre></div><p>当然，在平时的提交中，我们也可以只包含 header，比如我们修改了登录页面的某个功能，那么可以这样写 Commit Message。</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>feat<span class="token punctuation">(</span>登录）：添加登录接口
</code></pre></div><h3 id="git-commitizen" tabindex="-1"><a class="header-anchor" href="#git-commitizen" aria-hidden="true">#</a> Git Commitizen</h3><p><strong>Commitizen</strong> 是一个撰写符合上面 Commit Message 标准的一款工具，可以帮助开发者提交符合规范的 Commit Message。</p>`,329),f={href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"},k=d(`<ol><li>使用 npm 全局安装</li></ol><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> commitizen
</code></pre></div><ol start="2"><li>安装适配器</li></ol><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cz-conventional-changelog
</code></pre></div><ol start="3"><li>创建适配器配置文件</li></ol><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;{ &quot;path&quot;: &quot;cz-conventional-changelog&quot; }&#39;</span> <span class="token operator">&gt;</span> ~/.czrc
</code></pre></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>如果提示文件格式不是 UTF8，可以使用 ide 打开修改格式后重新保存</p></div><ol start="4"><li>使用示例</li></ol><p>使用 <code>git cz</code> 命令代替 <code>git commit</code> 命令，会挨个提示你需要的 Commit message 信息</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PS D:<span class="token punctuation">\\</span>Projects<span class="token punctuation">\\</span>Github<span class="token punctuation">\\</span>image-hosting<span class="token punctuation">\\</span>blog<span class="token operator">&gt;</span> <span class="token function">git</span> cz
cz-cli@4.3.0, cz-conventional-changelog@3.3.0

? Select the <span class="token builtin class-name">type</span> of change that you&#39;re committing: feat:     A new feature
? What is the scope of this change <span class="token punctuation">(</span>e.g. component or <span class="token function">file</span> name<span class="token punctuation">)</span>: <span class="token punctuation">(</span>press enter to skip<span class="token punctuation">)</span>
? Write a short, imperative tense description of the change <span class="token punctuation">(</span>max <span class="token number">94</span> chars<span class="token punctuation">)</span>:
 <span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span> <span class="token function">add</span> file: java/juc_threadpoolexecutor_principle.png
? Provide a longer description of the change: <span class="token punctuation">(</span>press enter to skip<span class="token punctuation">)</span>

? Are there any breaking changes? No
? Does this change affect any <span class="token function">open</span> issues? No
<span class="token punctuation">[</span>master 1d8ed0c<span class="token punctuation">]</span> feat: <span class="token function">add</span> file: java/juc_threadpoolexecutor_principle.png
 <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">0</span> insertions<span class="token punctuation">(</span>+<span class="token punctuation">)</span>, <span class="token number">0</span> deletions<span class="token punctuation">(</span>-<span class="token punctuation">)</span>
 create mode <span class="token number">100644</span> blog/java/juc_threadpoolexecutor_principle.png
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),q={class:"hint-container tip"},_=e("p",{class:"hint-container-title"},"扩展",-1),y={href:"https://cz-git.qbb.sh/zh/",target:"_blank",rel:"noopener noreferrer"},A=d(`<h2 id="git-常见问题解决方案" tabindex="-1"><a class="header-anchor" href="#git-常见问题解决方案" aria-hidden="true">#</a> Git 常见问题解决方案</h2><ul><li>原来 git 正常，网页可以访问，但是突然无法 pull 和 push 代码，提示没有权限，并且确认 ssh 密钥没有问题</li></ul><p>有可能是因为网络代理导致的，可以尝试清除 git 的网络代理，具体命令如下：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> http.proxy
<span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">--unset</span> https.proxy
</code></pre></div><p>查看网络代理的命令：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> http.proxy
<span class="token function">git</span> config <span class="token parameter variable">--global</span> https.proxy
</code></pre></div><hr><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,8),G={href:"https://github.com/CoderLeixiaoshuai/java-eight-part/blob/master/docs/tools/git/%E4%BF%9D%E5%A7%86%E7%BA%A7Git%E6%95%99%E7%A8%8B%EF%BC%8C10000%E5%AD%97%E8%AF%A6%E8%A7%A3.md",target:"_blank",rel:"noopener noreferrer"},E={href:"https://www.cnblogs.com/Yellow-ice/p/15353900.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/commitizen/cz-cli",target:"_blank",rel:"noopener noreferrer"};function C(D,w){const i=c("ExternalLinkIcon"),s=c("Badge");return n(),l("div",null,[g,p,e("p",null,[a("推荐 Git 学习网站："),e("a",h,[a("https://learngitbranching.js.org/?locale=zh_CN"),t(i)])]),u,m,x,e("p",null,[a("从 "),e("a",b,[a("Git 官网"),t(i)]),a(" 下载 Git 安装包发行版")]),v,e("p",null,[a("Git 地址："),e("a",f,[a("ClickHere"),t(i)])]),k,e("div",q,[_,e("p",null,[a("另一款 Commitizen 适配器： "),e("a",y,[a("cz-git"),t(i)])])]),A,e("ul",null,[e("li",null,[e("a",G,[a("保姆级 Git 教程，10000 字详解"),t(i)]),t(s,{text:"推荐",type:"tip"})]),e("li",null,[e("a",E,[a("前端规范之 Git 提交规范（Commitizen）"),t(i)])]),e("li",null,[e("a",z,[a("commitizen-Github"),t(i)])])])])}const j=o(r,[["render",C],["__file","2-git.html.vue"]]);export{j as default};

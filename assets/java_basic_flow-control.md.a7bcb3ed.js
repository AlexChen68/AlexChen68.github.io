import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.01af844e.js";const u=JSON.parse('{"title":"Java 流程控制","description":"","frontmatter":{"title":"Java 流程控制","order":4,"date":"2023-02-25T00:00:00.000Z"},"headers":[],"relativePath":"java/basic/flow-control.md","filePath":"java/basic/flow-control.md","lastUpdated":1701151825000}'),p={name:"java/basic/flow-control.md"},e=l(`<h1 id="java-流程控制" tabindex="-1">Java 流程控制 <a class="header-anchor" href="#java-流程控制" aria-label="Permalink to &quot;Java 流程控制&quot;">​</a></h1><h2 id="if-else-语句" tabindex="-1">if-else 语句 <a class="header-anchor" href="#if-else-语句" aria-label="Permalink to &quot;if-else 语句&quot;">​</a></h2><p><code>if-else</code> 语句语法：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(条件1){  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 条件 1 为 true 时执行的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(条件2){  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 条件 2 为 true 时执行的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}  </span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(条件3){  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 条件 3 为 true 时执行的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}  </span></span>
<span class="line"><span style="color:#E1E4E8;">...  </span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;">{  </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 以上条件均为 false 时执行的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;">(条件1){  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 条件 1 为 true 时执行的代码</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(条件2){  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 条件 2 为 true 时执行的代码</span></span>
<span class="line"><span style="color:#24292E;">}  </span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(条件3){  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 条件 3 为 true 时执行的代码</span></span>
<span class="line"><span style="color:#24292E;">}  </span></span>
<span class="line"><span style="color:#24292E;">...  </span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;">{  </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 以上条件均为 false 时执行的代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>通常，当 <code>if-else</code> 的条件过多时，可以常用使用 <code>switch</code> 语法改造，或者通过设计模式重构，增强代码的可维护性。</p><h2 id="switch-语句" tabindex="-1">switch 语句 <a class="header-anchor" href="#switch-语句" aria-label="Permalink to &quot;switch 语句&quot;">​</a></h2><p>switch 语句用来判断变量与多个值之间的相等性。</p><p>switch 语句的格式：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">switch</span><span style="color:#E1E4E8;">(变量) {    </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> 可选值1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 可选值 1 匹配后执行的代码;    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;  </span><span style="color:#6A737D;">// 该关键字是可选项</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> 可选值2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;">    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 可选值 2 匹配后执行的代码;    </span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">break</span><span style="color:#E1E4E8;">;  </span><span style="color:#6A737D;">// 该关键字是可选项</span></span>
<span class="line"><span style="color:#E1E4E8;">  ......    </span></span>
<span class="line"><span style="color:#F97583;">default:</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// 该关键字是可选项     </span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 所有可选值都不匹配后执行的代码 </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">switch</span><span style="color:#24292E;">(变量) {    </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> 可选值1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 可选值 1 匹配后执行的代码;    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// 该关键字是可选项</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> 可选值2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;">    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 可选值 2 匹配后执行的代码;    </span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">break</span><span style="color:#24292E;">;  </span><span style="color:#6A737D;">// 该关键字是可选项</span></span>
<span class="line"><span style="color:#24292E;">  ......    </span></span>
<span class="line"><span style="color:#D73A49;">default:</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// 该关键字是可选项     </span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 所有可选值都不匹配后执行的代码 </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>switch 语句变量支持的类型：</p><ol><li>byte、short、int、char 以及对应的包装器类型 Byte、Short、Integer、Character；</li><li>String 字符串（JDK 7+ 开始支持）</li><li>Enum 枚举类（JDK 5+ 开始支持）</li></ol><div class="warning custom-block"><p class="custom-block-title">特别注意</p><p>注意：switch 变量不支持 long、float、double 及其包装类。</p></div><h2 id="for-循环" tabindex="-1">for 循环 <a class="header-anchor" href="#for-循环" aria-label="Permalink to &quot;for 循环&quot;">​</a></h2><ol><li>普通 for 循环</li></ol><p>格式：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(初始变量;条件;自增</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">自减){  </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 循环体</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(初始变量;条件;自增</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">自减){  </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 循环体</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ol start="2"><li>增强 for 循环</li></ol><p>for-each 循环通常用于遍历数组和集合，它的使用规则比普通的 for 循环还要简单，不需要初始变量，不需要条件，不需要下标来自增或者自减。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;">(元素类型 元素 </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> 数组或集合){  </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 要执行的代码</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;">(元素类型 元素 </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> 数组或集合){  </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 要执行的代码</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>例如：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] strings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;java&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;python&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;go&quot;</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (String str </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> strings) {</span></span>
<span class="line"><span style="color:#E1E4E8;">         System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(str);</span></span>
<span class="line"><span style="color:#E1E4E8;">     }</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) {</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] strings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;java&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;python&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;go&quot;</span><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (String str </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> strings) {</span></span>
<span class="line"><span style="color:#24292E;">         System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(str);</span></span>
<span class="line"><span style="color:#24292E;">     }</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="while-循环" tabindex="-1">while 循环 <a class="header-anchor" href="#while-循环" aria-label="Permalink to &quot;while 循环&quot;">​</a></h2><p>while 循环的格式：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(条件){  </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">//循环体  </span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">while</span><span style="color:#24292E;">(条件){  </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">//循环体  </span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="do-while-循环" tabindex="-1">do-while 循环 <a class="header-anchor" href="#do-while-循环" aria-label="Permalink to &quot;do-while 循环&quot;">​</a></h2><p>do-while 循环的格式：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">do</span><span style="color:#E1E4E8;">{  </span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 循环体</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(提交);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">do</span><span style="color:#24292E;">{  </span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 循环体</span></span>
<span class="line"><span style="color:#24292E;">}</span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(提交);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="break" tabindex="-1">break <a class="header-anchor" href="#break" aria-label="Permalink to &quot;break&quot;">​</a></h2><p>break 关键字通常用于中断循环或 switch 语句，它在指定条件下中断程序的当前流程。如果是内部循环，则仅中断内部循环。</p><p>可以将 break 关键字用于所有类型循环语句中，比如说 for 循环、while 循环，以及 do-while 循环。</p><h2 id="continue" tabindex="-1">continue <a class="header-anchor" href="#continue" aria-label="Permalink to &quot;continue&quot;">​</a></h2><p>当我们需要在 for 循环或者（do）while 循环中立即跳转到下一个循环时，就可以使用 continue 关键字，通常用于跳过指定条件下的循环体，如果循环是嵌套的，仅跳过当前循环。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://tobebetterjavaer.com/basic-grammar/flow-control.html" target="_blank" rel="noreferrer">Java 程序员进阶之路</a></li></ul>`,34),o=[e];function r(c,t,i,E,y,d){return a(),n("div",null,o)}const h=s(p,[["render",r]]);export{u as __pageData,h as default};

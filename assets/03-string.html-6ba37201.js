import{_ as t,W as r,X as n,$ as o}from"./framework-3160f2a1.js";const i={},e=o('<h2 id="string-概述" tabindex="-1"><a class="header-anchor" href="#string-概述" aria-hidden="true">#</a> String 概述</h2><blockquote><p>String 内部使用字符数组实现，且 String 被声明为 final，不可以被继承，这意味着 value 数组初始化之后就不能再引用其它数组。并且 String 内部没有改变 value 数组的方法，因此可以保证 String 不可变。</p><p>当我们调用 String 类的任何方法（比如说 <code>trim()</code>、<code>substring()</code>、<code>toLowerCase()</code>）时，总会返回一个新的对象，而不影响之前的值。</p><p>Java 9 以前，String 是用 char 型数组实现的，之后改成了 byte 型数组实现，并增加了 coder 来表示编码。</p></blockquote><p><strong>String不可变的优点</strong></p><ol><li><strong>可以缓存 hash 值</strong></li></ol><p>因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。不可变的特性可以使得 hash 值也不可变，因此只需要进行一次计算。</p><ol start="2"><li><strong>String Pool 的需要</strong></li></ol><p>如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。</p><ol start="3"><li><strong>安全性</strong></li></ol><p>String 经常作为参数，String 不可变性可以保证参数不可变。例如在作为网络连接参数的情况下如果 String 是可变的，那么在网络连接过程中，String 被改变，改变 String 对象的那一方以为现在连接的是其它主机，而实际情况却不一定是。</p><ol start="4"><li><strong>线程安全</strong></li></ol><p>String 不可变性天生具备线程安全，可以在多个线程中安全地使用。</p><p><strong>String家族对比</strong></p><table><thead><tr><th>类型</th><th>可变</th><th>线程安全</th></tr></thead><tbody><tr><td>String</td><td>不可变</td><td>安全</td></tr><tr><td>StringBuilder</td><td>可变</td><td>不安全</td></tr><tr><td>StringBuffer</td><td>可变</td><td>安全，使用 synchronized 同步</td></tr></tbody></table>',13),d=[e];function g(s,a){return r(),n("div",null,d)}const c=t(i,[["render",g],["__file","03-string.html.vue"]]);export{c as default};

import{_ as o,W as t,X as p,Y as d,Z as a,$ as n,a0 as s,a1 as c,C as r}from"./framework-ea95e8eb.js";const i={},l=a("p",null,"介绍 Docker 容器的创建、启动和停止等操作。",-1),u=c(`<h2 id="docker-容器" tabindex="-1"><a class="header-anchor" href="#docker-容器" aria-hidden="true">#</a> Docker 容器</h2><p>容器是 Docker 又一核心概念。</p><p>简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。</p><h2 id="启动容器" tabindex="-1"><a class="header-anchor" href="#启动容器" aria-hidden="true">#</a> 启动容器</h2><p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（exited）的容器重新启动。</p><p>因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。</p><p>使用以下命令来启动一个新容器：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> IMAGE<span class="token punctuation">[</span>:TAG<span class="token operator">|</span>@DIGEST<span class="token punctuation">]</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span> <span class="token punctuation">[</span>ARG<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre></div><p>通过 <code>docker run</code> 指定一个镜像及版本来启动对应版本的镜像，如果不指定镜像版本，默认使用 latest 版本。</p><p>另外，可以使用 OPTIONS 来覆盖镜像的默认设置，常用的参数有：</p><ul><li><code>-t</code>: 选项让 Docker 分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上</li><li><code>-i</code>: 让容器的标准输入保持打开</li><li><code>-d</code>: 后台运行容器，打印容器的 id</li><li><code>--name {name}</code>: 给启动的容器指定名称，如果冲突会创建失败</li><li><code>--rm</code>: 在容器运行结束后自动删除容器</li><li><code>-p</code>: 为启动的容器与宿主机做端口映射，例如：-p 80:8080，让宿主机的 80 端口与容器内的 8080 端口映射</li><li><code>-v</code>: 设置宿主机目录与容器内目录的映射</li><li><code>--network</code>: 为启动的容器指定网络，如果是自定义网络，需要先使用 <code>docker network create NETWORK</code> 创建网络</li><li><code>--restart</code>: 设置容器的重启策略，例如：<code>--restart=always</code> 为守护进程启动时自动启动该容器，且该容器非正常停止后自动重启</li></ul>`,11),k=a("code",null,"docker run",-1),h={href:"https://docs.docker.com/engine/reference/commandline/run/",target:"_blank",rel:"noopener noreferrer"},g=c(`<p>还可以使用 <code>docker start</code> 启动一个处于停止状态的容器：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre></div><p>当然，也可以重启一个正在运行的重启：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> restart <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre></div><h2 id="查看容器" tabindex="-1"><a class="header-anchor" href="#查看容器" aria-hidden="true">#</a> 查看容器</h2><p>查看正在运行的容器：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span>
</code></pre></div><p>查看全部容器：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>
</code></pre></div><h2 id="进入容器" tabindex="-1"><a class="header-anchor" href="#进入容器" aria-hidden="true">#</a> 进入容器</h2><p>在使用 -d 参数时，容器启动后会进入后台。</p><p>某些时候需要进入容器进行操作，包括使用 <code>docker attach</code> 命令或 <code>docker exec</code> 命令，推荐大家使用 <code>docker exec</code> 命令，因为使用 <code>docker attach</code> 命令退出后，容器会停止。</p><p>示例：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 3630fb4ce831 <span class="token function">bash</span>
</code></pre></div><p>进入容器后，输入 <code>exit</code> 可以退出容器。</p><h2 id="停止容器" tabindex="-1"><a class="header-anchor" href="#停止容器" aria-hidden="true">#</a> 停止容器</h2><p>使用以下命令停止容器：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre></div><p>可以使用 <code>-t</code> 参数，来等待一段时间后停止容器（以秒为单位）。</p><h2 id="删除容器" tabindex="-1"><a class="header-anchor" href="#删除容器" aria-hidden="true">#</a> 删除容器</h2><p>使用命令删除容器，前提是容器已经停止：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">rm</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span>

// 或者
<span class="token function">docker</span> container <span class="token function">rm</span> <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>CONTAINER<span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除所有处于停止状态的容器：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> container prune
</code></pre></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,25),b={href:"https://docs.docker.com/engine/reference/run/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://vuepress.mirror.docker-practice.com/container/",target:"_blank",rel:"noopener noreferrer"};function v(N,_){const e=r("ExternalLinkIcon");return t(),p("div",null,[l,d(" more "),u,a("p",null,[n("更多 "),k,n(" 参数可以参考 "),a("a",h,[n("Reference - docker run"),s(e)])]),g,a("ul",null,[a("li",null,[a("a",b,[n("DockerHub 官方文档"),s(e)])]),a("li",null,[a("a",f,[n("Docker 从入门到实践"),s(e)])])])])}const x=o(i,[["render",v],["__file","1.5-container.html.vue"]]);export{x as default};

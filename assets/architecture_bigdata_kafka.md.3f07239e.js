import{_ as l,C as p,o,c as e,k as s,a as r,H as t,Q as a}from"./chunks/framework.01af844e.js";const A=JSON.parse('{"title":"Kafka 消息队列","description":"","frontmatter":{"title":"Kafka 消息队列","date":"2023-04-02T00:00:00.000Z","order":1},"headers":[],"relativePath":"architecture/bigdata/kafka.md","filePath":"architecture/bigdata/kafka.md","lastUpdated":1707632099000}'),c={name:"architecture/bigdata/kafka.md"},E=a('<h1 id="kafka-消息队列" tabindex="-1">Kafka 消息队列 <a class="header-anchor" href="#kafka-消息队列" aria-label="Permalink to &quot;Kafka 消息队列&quot;">​</a></h1><h2 id="kafka-简介" tabindex="-1">Kafka 简介 <a class="header-anchor" href="#kafka-简介" aria-label="Permalink to &quot;Kafka 简介&quot;">​</a></h2><p>Kafka 是一个分布式、分区的、多副本的、多订阅者，基于 zookeeper 协调的分布式日志系统，可作为消息中间件。</p><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ul><li><strong>缓存/消峰</strong>：有助于控制和优化数据流经过系统的速度，解决生产消息和消费消息的处理速度不一致的情况。</li><li><strong>解耦</strong>：允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。</li><li><strong>异步通信</strong>：允许把一个消息放入队列，但不立即处理它，然后在需要的时候再去处理它。</li></ul><h3 id="优缺点" tabindex="-1">优缺点 <a class="header-anchor" href="#优缺点" aria-label="Permalink to &quot;优缺点&quot;">​</a></h3><p>Kafka 是一个分布式流处理平台，具有以下<strong>优点</strong>：</p><ul><li><strong>高吞吐量和可伸缩性</strong>：Kafka 可以处理每秒数百万条消息，并且可以通过添加更多的节点轻松扩展。</li><li><strong>高容错性</strong>：Kafka 使用分布式复制机制来保证数据的可靠性和持久性，即使其中一些节点失败也不会造成数据丢失。</li><li><strong>高性能</strong>：Kafka 采用了顺序读写磁盘的方式进行消息存储，具有较低的延迟和高吞吐量。</li><li><strong>支持多种消费者</strong>：Kafka 的消费者模型支持同时有多个消费者组订阅同一个主题，并且可以准确地跟踪每个消费者在主题中的消费进度。</li></ul><p>尽管 Kafka 具有许多优点，但它也有一些<strong>缺点</strong>：</p><ul><li><strong>复杂性</strong>：配置和管理 Kafka 集群可能需要一定的技术知识和经验。对于新手来说，上手可能会有一定的学习曲线。</li><li><strong>存储需求较高</strong>：由于 Kafka 默认将所有消息持久化到磁盘上，所以需要相应的存储空间。如果消息量很大，存储需求可能会变得很高。</li><li><strong>无法直接修改数据</strong>：一旦消息被写入 Kafka，就无法直接修改它们。如果需要更改消息内容，只能通过写入新的消息来实现。</li><li><strong>API 稳定性变化</strong>：Kafka 的 API 在不同版本之间可能会发生一些变化，这可能导致升级和兼容性方面的挑战。</li></ul><p>综上所述，Kafka 是一种高性能、可伸缩、可靠的分布式流处理平台，但在配置和管理上有一定的复杂性，并且需要额外的存储空间。</p><h3 id="kafka-基础架构" tabindex="-1">Kafka 基础架构 <a class="header-anchor" href="#kafka-基础架构" aria-label="Permalink to &quot;Kafka 基础架构&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/images/2023/20231106201600.png" alt="基础架构"></p><ul><li><code>Producer</code>：生产者，发送消息的一方。生产者负责创建消息，然后将其发送到 Kafka。</li><li><code>Consumer</code>：消费者，接受消息的一方。消费者连接到 Kafka 上并接收消息，进而进行相应的业务逻辑处理。</li><li><code>Consumer Group</code>：一个消费者组可以包含一个或多个消费者。使用多分区 + 多消费者方式可以极大提高数据下游的处理速度，同一消费组中的消费者不会重复消费消息，同样的，不同消费组中的消费者消息消息时互不影响。Kafka 就是通过消费组的方式来实现消息 P2P 模式和广播模式。</li><li><code>Broker</code>：服务代理节点。一台 Kafka 服务器就是一个 broker。一个集群由多个 broker 组成。一个 broker 可以容纳多个 topic。</li><li><code>Topic</code>：Kafka 中的消息以 Topic 为单位进行划分，生产者将消息发送到特定的 Topic，而消费者负责订阅 Topic 的消息并进行消费。</li><li><code>Partition</code>：为了实现扩展性，一个非常大的 topic 可以分布到多个 broker（即服务器）上，个 一个 topic 可以分为多个 partition，每个 partition 是一个有序的队列。</li></ul><blockquote><p>kafka 通过分区策略，将不同的分区分配在一个集群中的 broker 上，一般会分散在不同的 broker 上，当只有一个 broker 时，所有的分区就只分配到该 Broker 上。</p><p>消息会通过负载均衡发布到不同的分区上，消费者会监测偏移量来获取哪个分区有新数据，从而从该分区上拉取消息数据。分区数越多，在一定程度上会提升消息处理的吞吐量;</p></blockquote><ul><li><code>Offset</code>：offset 是消息在分区中的唯一标识，Kafka 通过它来保证消息在分区内的顺序性，不过 offset 并不跨越分区，也就是说，Kafka 保证的是分区有序性而不是主题有序性。</li><li><code>Replication</code>：副本，是 Kafka 保证数据高可用的方式，Kafka 同一 Partition 的数据可以在多 Broker 上存在多个副本，通常只有主副本对外提供读写服务，当主副本所在 broker 崩溃或发生网络异常，Kafka 会在 Controller 的管理下会重新选择新的 Leader 副对外提供读写服务。</li><li><code>Record</code>：实际写入 Kafka 中并可以被读取的消息记录。每个 record 包含了 key、value 和 timestamp。</li></ul><div class="tip custom-block"><p class="custom-block-title">消费组、消费者和分区、主题的关系：</p><ul><li>一个 <code>consumer group</code> 可能有若干个 <code>consumer</code> 实例;</li><li>对于同一个 <code>group</code> 而言，<code>topic</code> 的每条消息只能被发送到 <code>group</code> 下的一个 <code>consumer</code> 实例上;</li><li><code>topic</code> 消息可以被发送到多个 <code>consumer group</code> 中;</li></ul></div><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/images/2023/20231107024911.png" alt="20231107024911"></p><h3 id="生产者" tabindex="-1">生产者 <a class="header-anchor" href="#生产者" aria-label="Permalink to &quot;生产者&quot;">​</a></h3><p>在消息发送的过程中，涉及到了两个线程：<code>main</code> 线程和 <code>Sender</code> 线程。在 <code>main</code> 线程中创建了一个双端队列 <code>RecordAccumulator</code>。<code>main</code> 线程将消息发送给 <code>RecordAccumulator</code>，<code>Sender</code> 线程不断从 <code>RecordAccumulator</code> 中拉取消息发送到 Kafka Broker。</p><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/images/2023/20231106204003.png" alt="kafka 生产者发送流程"></p><ol><li>producer 先从 zookeeper 的 &quot;/brokers/…/state&quot;节点找到该 partition 的 leader</li><li>producer 将消息发送给该 leader</li><li>leader 将消息写入本地 log</li><li>followers 从 leader pull 消息，写入本地 log 后向 leader 发送 ACK</li><li>leader 收到所有 ISR 中的 replication 的 ACK 后，增加 HW（high watermark，最后 commit 的 offset）并向 producer 发送 ACK</li></ol><div class="tip custom-block"><p class="custom-block-title">相关参数：</p><p>• batch.size：只有数据积累到 batch.size 之后，sender 才会发送数据。默认 16k；</p><p>• linger.ms：如果数据迟迟未达到 batch.size，sender 等待 linger.time 之后就会发送数据。单位 ms，默认值是 0ms，表示没有延迟。</p></div>',23),y=s("strong",null,"acks 应答级别",-1),i=a(`<p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/images/2023/20231106204258.png" alt="20231106204258"></p><ul><li>acks=0，生产者发送过来数据就不管了，可靠性差，效率高；</li><li>acks=1，生产者发送过来数据 Leader 应答，可靠性中等，效率中等；</li><li>acks=-1，生产者发送过来数据 Leader 和 ISR 队列里面所有 Follwer 应答，可靠性高，效率低。</li></ul><div class="tip custom-block"><p class="custom-block-title">acks 设置：</p><p>在<strong>生产环境</strong>中，acks=0 很少使用；acks=1，一般用于传输普通日志，允许丢个别数据；acks=-1，一般用于传输和钱相关的数据，对可靠性要求比较高的场景。</p><p><strong>数据完全可靠条件</strong>：ACK 级别设置为 -1 + 分区副本大于等于 2 + ISR 里应答的的最小副本数量大于等于 2</p></div><h3 id="消费者" tabindex="-1">消费者 <a class="header-anchor" href="#消费者" aria-label="Permalink to &quot;消费者&quot;">​</a></h3><h4 id="队列和发布订阅两种模型" tabindex="-1">队列和发布订阅两种模型 <a class="header-anchor" href="#队列和发布订阅两种模型" aria-label="Permalink to &quot;队列和发布订阅两种模型&quot;">​</a></h4><p>Kafka 同时支持<strong>基于队列</strong>和<strong>基于发布/订阅</strong>的两种消息引擎模型，事实上 Kafka 是通过 consumer group 实现对这两种模型的支持：</p><ul><li>所有 consumer 实例都属于相同 group—实现基于队列的模型，每条消息只会被一个 consumer 实例处理</li><li>consumer 实例都属于不同 group—实现基于发布/订阅的模型，极端的情况是每个 consumer 实例都设置完全不同都 group，这样 kafka 消息就会被广播到所有 consumre 实例</li></ul><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/images/2023/20231106204823.png" alt="kafka 两种模式"></p><h4 id="消费者初始化流程" tabindex="-1">消费者初始化流程 <a class="header-anchor" href="#消费者初始化流程" aria-label="Permalink to &quot;消费者初始化流程&quot;">​</a></h4><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/images/2023/20231107030135.png" alt="20231107030135"></p><p>一旦 consumer 订阅了 topic，所有消费逻辑包括 coordinator 的协调、消费者组的 rebalance 以及数据的获取都会在主逻辑 poll 方法的一次调用中被执行，这样用户很容易使用一个线程来管理 consumer I/O 操作。</p><h4 id="消费者工作流程" tabindex="-1">消费者工作流程 <a class="header-anchor" href="#消费者工作流程" aria-label="Permalink to &quot;消费者工作流程&quot;">​</a></h4><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/images/2023/20231107024828.png" alt="消费者消费流程"></p><h4 id="漏消费和重复消费" tabindex="-1">漏消费和重复消费 <a class="header-anchor" href="#漏消费和重复消费" aria-label="Permalink to &quot;漏消费和重复消费&quot;">​</a></h4><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/images/2023/20231107030458.png" alt="20231107030458"></p><div class="info custom-block"><p class="custom-block-title">重复消费涉及到的相关参数：</p><ul><li><code>enable.auto.commit</code>：表示消费者会周期性自动提交消费的 offset。默认值 true。</li><li><code>auto.commit.interval.ms</code>：在 enable.auto.commit 为 true 的情况下，自动提交的间隔。默认值 5 秒。</li><li><code>max.poll.records</code>：单次消费者拉取的最大数据条数，默认值 500。</li><li><code>max.poll.interval.ms</code>：表示若在阈值时间之内消费者没有消费完上一次 poll 的消息，consumer client 会主动向 coordinator 发起 LeaveGroup 请求，触发 Rebalance；然后 consumer 重新发送 JoinGroup 请求。</li><li><code>session.timeout.ms</code>: Coordinator 检测 consumer 发生崩溃所需的时间。在这个时间内如果 Coordinator 未收到 Consumer 的任何消息，那 Coordinator 就认为 Consumer 挂了。默认值 10 秒。</li><li><code>heartbeat.interval.ms</code>：标识 Consumer 给 Coordinator 发一个心跳包的时间间隔。heartbeat.interval.ms 越小，发的心跳包越多。默认值 3 秒。</li></ul><p><strong>重复消费的解决方法：</strong></p><ul><li><p><strong>提高消费者的处理速度</strong></p><p>例如：对消息处理中比较耗时的步骤可通过异步的方式进行处理、利用多线程处理等。在缩短单条消息消费的同时，根据实际场景可将 max.poll.interval.ms 值设置大一点，避免不必要的 Rebalance。可根据实际消息速率适当调小 max.poll.records 的值。</p></li><li><p><strong>引入消息去重机制</strong></p><p>例如：生成消息时，在消息中加入唯一标识符如消息 id 等。在消费端，可以保存最近的 max.poll.records 条消息 id 到 redis 或 mysql 表中，这样在消费消息时先通过查询去重后，再进行消息的处理。</p></li></ul></div><h2 id="kafka-部署" tabindex="-1">Kafka 部署 <a class="header-anchor" href="#kafka-部署" aria-label="Permalink to &quot;Kafka 部署&quot;">​</a></h2><p>参考 <a href="/devops/deploy/kafka.html">Kafka 部署</a></p><h2 id="springboot-使用-kakfa" tabindex="-1">SpringBoot 使用 Kakfa <a class="header-anchor" href="#springboot-使用-kakfa" aria-label="Permalink to &quot;SpringBoot 使用 Kakfa&quot;">​</a></h2><h3 id="依赖配置" tabindex="-1">依赖配置 <a class="header-anchor" href="#依赖配置" aria-label="Permalink to &quot;依赖配置&quot;">​</a></h3><ol><li>引入依赖（版本自定）</li></ol><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.kafka&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-kafka&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.kafka&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-kafka&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li>application 配置（示例）</li></ol><p>配置文件类：<code>org.springframework.boot.autoconfigure.kafka.KafkaProperties</code></p><p><strong>生产者配置：</strong></p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">kafka</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">bootstrap-servers</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\${KAFKA_HOST:zeus-kafka}:\${KAFKA_PORT:9092}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">producer</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">batch-size</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">16384</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 默认 single request 批处理大小（以字节为单位），默认 16KB = 16384</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">acks</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">-1</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 应答级别：多少个分区副本备份完成时向生产者发送 ack 确认 (可选 0、1、all/-1)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">retries</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 消息发送重试次数</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">buffer-memory</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">33554432</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 缓存容量。默认值 32MB = 33554432</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">key-serializer</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">org.apache.kafka.common.serialization.StringSerializer</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">value-serializer</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">org.apache.kafka.common.serialization.StringSerializer</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">linger</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">ms</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#提交延迟</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">kafka</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">bootstrap-servers</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\${KAFKA_HOST:zeus-kafka}:\${KAFKA_PORT:9092}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">producer</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">batch-size</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">16384</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 默认 single request 批处理大小（以字节为单位），默认 16KB = 16384</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">acks</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">-1</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 应答级别：多少个分区副本备份完成时向生产者发送 ack 确认 (可选 0、1、all/-1)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">retries</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 消息发送重试次数</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">buffer-memory</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">33554432</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 缓存容量。默认值 32MB = 33554432</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">key-serializer</span><span style="color:#24292E;">: </span><span style="color:#032F62;">org.apache.kafka.common.serialization.StringSerializer</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">value-serializer</span><span style="color:#24292E;">: </span><span style="color:#032F62;">org.apache.kafka.common.serialization.StringSerializer</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">linger</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">ms</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#提交延迟</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>消费者配置：</strong></p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">kafka</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># kafka 服务地址，可以有多个用，隔开</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">bootstrap-servers</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">\${KAFKA_HOST:zeus-kafka}:\${KAFKA_PORT:9092}</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">consumer</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">group-id</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">zeus-test-consumer</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 默认的消费组 ID</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">enable-auto-commit</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 是否自动提交 offset</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">auto-commit-interval</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">2000</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 提交 offset 延时，单位 ms</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">heartbeat-interval</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># ⼼跳与消费者协调员之间的预期时间（以毫秒为单位）</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># 当 kafka 中没有初始 offset 或 offset 超出范围时将自动重置 offset</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># - earliest:重置为分区中最小的 offset;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># - latest:重置为分区中最新的 offset(消费分区中新产生的数据);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;"># - none:只要有一个分区不存在已提交的 offset，就抛出异常;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">auto-offset-reset</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">latest</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">max-poll-records</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 单次拉取消息的最大条数</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">key-deserializer</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">org.apache.kafka.common.serialization.StringDeserializer</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">value-deserializer</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">org.apache.kafka.common.serialization.StringDeserializer</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">properties</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">session</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">timeout</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">ms</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">120000</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 消费会话超时时间（超过这个时间 consumer 没有发送心跳，就会触发 rebalance 操作）</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#85E89D;">request</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#85E89D;">timeout</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#85E89D;">ms</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">18000</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 消费请求的超时时间</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">listener</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">ack-mode</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">manual_immediate</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># manual_immediate-手动 ack 后立即提交；batch-批量自动确认；RECORD-单条自动确认；</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">batch</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;"># 批量消费</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">kafka</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;"># kafka 服务地址，可以有多个用，隔开</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">bootstrap-servers</span><span style="color:#24292E;">: </span><span style="color:#032F62;">\${KAFKA_HOST:zeus-kafka}:\${KAFKA_PORT:9092}</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">consumer</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">group-id</span><span style="color:#24292E;">: </span><span style="color:#032F62;">zeus-test-consumer</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 默认的消费组 ID</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">enable-auto-commit</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 是否自动提交 offset</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">auto-commit-interval</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">2000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 提交 offset 延时，单位 ms</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">heartbeat-interval</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">10000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># ⼼跳与消费者协调员之间的预期时间（以毫秒为单位）</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;"># 当 kafka 中没有初始 offset 或 offset 超出范围时将自动重置 offset</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;"># - earliest:重置为分区中最小的 offset;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;"># - latest:重置为分区中最新的 offset(消费分区中新产生的数据);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;"># - none:只要有一个分区不存在已提交的 offset，就抛出异常;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">auto-offset-reset</span><span style="color:#24292E;">: </span><span style="color:#032F62;">latest</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">max-poll-records</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">500</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 单次拉取消息的最大条数</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">key-deserializer</span><span style="color:#24292E;">: </span><span style="color:#032F62;">org.apache.kafka.common.serialization.StringDeserializer</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">value-deserializer</span><span style="color:#24292E;">: </span><span style="color:#032F62;">org.apache.kafka.common.serialization.StringDeserializer</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">properties</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">session</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">timeout</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">ms</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">120000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 消费会话超时时间（超过这个时间 consumer 没有发送心跳，就会触发 rebalance 操作）</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#22863A;">request</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#22863A;">timeout</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#22863A;">ms</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">18000</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 消费请求的超时时间</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">listener</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">ack-mode</span><span style="color:#24292E;">: </span><span style="color:#032F62;">manual_immediate</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># manual_immediate-手动 ack 后立即提交；batch-批量自动确认；RECORD-单条自动确认；</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">type</span><span style="color:#24292E;">: </span><span style="color:#032F62;">batch</span><span style="color:#24292E;"> </span><span style="color:#6A737D;"># 批量消费</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>batch-size 和 linger.ms 这两个条件都设置时，只要满足其中一个条件，就会发送消息。</li></ul></div><p><strong>主题配置：</strong></p><blockquote><p>可通过注入 NewTopic 示例，在启动时创建不存在的 topic</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Configuration</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KafkaConfiguration</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> NewTopic </span><span style="color:#B392F0;">topicSingle</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewTopic</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;topic-single&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, (</span><span style="color:#F97583;">short</span><span style="color:#E1E4E8;">) </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> NewTopic </span><span style="color:#B392F0;">topicBatch</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NewTopic</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;topic-batch&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, (</span><span style="color:#F97583;">short</span><span style="color:#E1E4E8;">) </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Configuration</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KafkaConfiguration</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> NewTopic </span><span style="color:#6F42C1;">topicSingle</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewTopic</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;topic-single&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, (</span><span style="color:#D73A49;">short</span><span style="color:#24292E;">) </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> NewTopic </span><span style="color:#6F42C1;">topicBatch</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NewTopic</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;topic-batch&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, (</span><span style="color:#D73A49;">short</span><span style="color:#24292E;">) </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="生产者-1" tabindex="-1">生产者 <a class="header-anchor" href="#生产者-1" aria-label="Permalink to &quot;生产者&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RequestMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/kafka&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">KafkaProducerTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Resource</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> KafkaTemplate&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; kafkaTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> ListenableFutureCallback&lt;SendResult&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;&gt; futureCallback </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ListenableFutureCallback&lt;SendResult&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt;&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onSuccess</span><span style="color:#E1E4E8;">(SendResult&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">result</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">assert</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            ProducerRecord&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; record </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">getProducerRecord</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(StrUtil.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Send message-&gt; topic: {}, partition: {}, key: {}, value: {}&quot;</span><span style="color:#E1E4E8;">, record.</span><span style="color:#B392F0;">topic</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">partition</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onFailure</span><span style="color:#E1E4E8;">(Throwable </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(StrUtil.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;kafka Send message failed: {}&quot;</span><span style="color:#E1E4E8;">, e.</span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 推送单条</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/send&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> R&lt;</span><span style="color:#F97583;">Boolean</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">sendMessage</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> KafkaMessage </span><span style="color:#FFAB70;">record</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        kafkaTemplate.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(record.</span><span style="color:#B392F0;">getTopic</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">getPartition</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">addCallback</span><span style="color:#E1E4E8;">(futureCallback);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> R.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 推送多条</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">PostMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/send/batch&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> R&lt;</span><span style="color:#F97583;">Boolean</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">sendMessageBatch</span><span style="color:#E1E4E8;">(@</span><span style="color:#F97583;">RequestBody</span><span style="color:#E1E4E8;"> List&lt;</span><span style="color:#F97583;">KafkaMessage</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#FFAB70;">records</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        records.</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(record </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> kafkaTemplate.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(record.</span><span style="color:#B392F0;">getTopic</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">getPartition</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">getKey</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">getValue</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">addCallback</span><span style="color:#E1E4E8;">(futureCallback));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> R.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RequestMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/kafka&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">KafkaProducerTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Resource</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> KafkaTemplate&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; kafkaTemplate;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> ListenableFutureCallback&lt;SendResult&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;&gt; futureCallback </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ListenableFutureCallback&lt;SendResult&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt;&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onSuccess</span><span style="color:#24292E;">(SendResult&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">result</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">assert</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            ProducerRecord&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; record </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">getProducerRecord</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(StrUtil.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Send message-&gt; topic: {}, partition: {}, key: {}, value: {}&quot;</span><span style="color:#24292E;">, record.</span><span style="color:#6F42C1;">topic</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">partition</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">key</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onFailure</span><span style="color:#24292E;">(Throwable </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(StrUtil.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;kafka Send message failed: {}&quot;</span><span style="color:#24292E;">, e.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 推送单条</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/send&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> R&lt;</span><span style="color:#D73A49;">Boolean</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">sendMessage</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> KafkaMessage </span><span style="color:#E36209;">record</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        kafkaTemplate.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(record.</span><span style="color:#6F42C1;">getTopic</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">getPartition</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">addCallback</span><span style="color:#24292E;">(futureCallback);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> R.</span><span style="color:#6F42C1;">ok</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 推送多条</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">PostMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/send/batch&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> R&lt;</span><span style="color:#D73A49;">Boolean</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">sendMessageBatch</span><span style="color:#24292E;">(@</span><span style="color:#D73A49;">RequestBody</span><span style="color:#24292E;"> List&lt;</span><span style="color:#D73A49;">KafkaMessage</span><span style="color:#24292E;">&gt; </span><span style="color:#E36209;">records</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        records.</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(record </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> kafkaTemplate.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(record.</span><span style="color:#6F42C1;">getTopic</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">getPartition</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">getKey</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">getValue</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">addCallback</span><span style="color:#24292E;">(futureCallback));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> R.</span><span style="color:#6F42C1;">ok</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>如果发送消息时，partition 不存在，会报错。</p></div><h3 id="消费者-1" tabindex="-1">消费者 <a class="header-anchor" href="#消费者-1" aria-label="Permalink to &quot;消费者&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * kafka 单条消费</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">KafkaListener</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;single-test&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">topics</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;topic-single&quot;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onSingleMessage</span><span style="color:#E1E4E8;">(ConsumerRecord</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, Object</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> record) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(StrUtil.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&gt;&gt;&gt; kafka single message, topic: {}, partition: {}, key: {}, value: {}&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            record.</span><span style="color:#B392F0;">topic</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">partition</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * kafka 批量消费</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">KafkaListener</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;batch-test&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">topics</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;topic-batch&quot;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onBatchMessage</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ConsumerRecord</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, Object</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> records) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&gt;&gt;&gt; Kafka batch message, size: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> records.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ConsumerRecord&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; record </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> records) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(StrUtil.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;topic: {}, partition: {}, key: {}, value: {}&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">               record.</span><span style="color:#B392F0;">topic</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">partition</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * ack 手动提交</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">KafkaListener</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">groupId</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ack-mode-test&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">topics</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#9ECBFF;">&quot;topic-ack&quot;</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">manualImmediate</span><span style="color:#E1E4E8;">(List</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ConsumerRecord</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String, Object</span><span style="color:#F97583;">&gt;&gt;</span><span style="color:#E1E4E8;"> records, Acknowledgment ack) {</span></span>
<span class="line"><span style="color:#E1E4E8;">   System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&gt;&gt;&gt; Kafka batch message, size: &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> records.</span><span style="color:#B392F0;">size</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (ConsumerRecord&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">&gt; record </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> records) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(StrUtil.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;topic: {}, partition: {}, key: {}, value: {}&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">               record.</span><span style="color:#B392F0;">topic</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">partition</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">key</span><span style="color:#E1E4E8;">(), record.</span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;">()));</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 手动确认：确认单当前消息（及之前的消息）offset 均已被消费完成</span></span>
<span class="line"><span style="color:#E1E4E8;">   ack.</span><span style="color:#B392F0;">acknowledge</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * kafka 单条消费</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">KafkaListener</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;single-test&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">topics</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;topic-single&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onSingleMessage</span><span style="color:#24292E;">(ConsumerRecord</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, Object</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> record) {</span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(StrUtil.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&gt;&gt;&gt; kafka single message, topic: {}, partition: {}, key: {}, value: {}&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            record.</span><span style="color:#6F42C1;">topic</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">partition</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">key</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * kafka 批量消费</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">KafkaListener</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;batch-test&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">topics</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;topic-batch&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onBatchMessage</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ConsumerRecord</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, Object</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> records) {</span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&gt;&gt;&gt; Kafka batch message, size: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> records.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ConsumerRecord&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; record </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> records) {</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(StrUtil.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;topic: {}, partition: {}, key: {}, value: {}&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">               record.</span><span style="color:#6F42C1;">topic</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">partition</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">key</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * ack 手动提交</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">KafkaListener</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">groupId</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ack-mode-test&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">topics</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#032F62;">&quot;topic-ack&quot;</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">manualImmediate</span><span style="color:#24292E;">(List</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">ConsumerRecord</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String, Object</span><span style="color:#D73A49;">&gt;&gt;</span><span style="color:#24292E;"> records, Acknowledgment ack) {</span></span>
<span class="line"><span style="color:#24292E;">   System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&gt;&gt;&gt; Kafka batch message, size: &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> records.</span><span style="color:#6F42C1;">size</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (ConsumerRecord&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">&gt; record </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> records) {</span></span>
<span class="line"><span style="color:#24292E;">      System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(StrUtil.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;topic: {}, partition: {}, key: {}, value: {}&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">               record.</span><span style="color:#6F42C1;">topic</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">partition</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">key</span><span style="color:#24292E;">(), record.</span><span style="color:#6F42C1;">value</span><span style="color:#24292E;">()));</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 手动确认：确认单当前消息（及之前的消息）offset 均已被消费完成</span></span>
<span class="line"><span style="color:#24292E;">   ack.</span><span style="color:#6F42C1;">acknowledge</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://projects.spring.io/spring-kafka" target="_blank" rel="noreferrer">spring-kafka 官方文档</a></li><li><a href="https://zhuanlan.zhihu.com/p/643196407" target="_blank" rel="noreferrer">Mq 消息队列的两种模型及常见概念</a></li><li><a href="https://blog.csdn.net/qq_22256259/article/details/128373310" target="_blank" rel="noreferrer">kafka 的使用原理及通过 spring-kafka 自定义封装包的原理</a></li><li><a href="https://blog.csdn.net/u010882234/article/details/125548598" target="_blank" rel="noreferrer">Spring-kafka 配置参数详解</a></li></ul>`,39);function u(d,b,m,g,F,k){const n=p("Badge");return o(),e("div",null,[E,s("p",null,[y,r(),t(n,{text:"重要",type:"tip"})]),i])}const h=l(c,[["render",u]]);export{A as __pageData,h as default};

import{_ as a,o as t,c as i,Q as e}from"./chunks/framework.419948d5.js";const u=JSON.parse('{"title":"Java 简介","description":"","frontmatter":{"title":"Java 简介","date":"2022-09-16T00:00:00.000Z"},"headers":[],"relativePath":"java/basic/index.md","filePath":"java/basic/index.md","lastUpdated":1698482261000}'),l={name:"java/basic/index.md"},o=e('<h1 id="java-介绍" tabindex="-1">Java 介绍 <a class="header-anchor" href="#java-介绍" aria-label="Permalink to &quot;Java 介绍&quot;">​</a></h1><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>Java 是由 Sun Microsystems 公司于 1995 年 5 月推出的 Java 面向对象程序设计语言和 Java 平台的总称。由 James Gosling 和同事们共同研发，并在 1995 年正式推出。</p><p>后来 Sun 公司被 Oracle（甲骨文）公司收购，Java 也随之成为 Oracle 公司的产品。</p><p>Java 分为三个体系：</p><ul><li>JavaSE(J2SE)(Java2 Platform Standard Edition，java 平台标准版)</li><li>JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java 平台企业版)</li><li>JavaME(J2ME)(Java 2 Platform Micro Edition，java 平台微型版)</li></ul><p>2005 年 6 月，JavaOne 大会召开，SUN 公司公开 Java SE 6。此时，Java 的各种版本已经更名，以取消其中的数字 &quot;2&quot;：J2EE 更名为 Java EE，J2SE 更名为 Java SE，J2ME 更名为 Java ME。</p><h2 id="java-三大特性" tabindex="-1">Java 三大特性 <a class="header-anchor" href="#java-三大特性" aria-label="Permalink to &quot;Java 三大特性&quot;">​</a></h2><p>Java 具有三大特性，分别是<strong>封装</strong>、<strong>继承</strong>和<strong>多态</strong>。</p><p><strong>封装</strong></p><p>利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。</p><p>优点：</p><ul><li>减少耦合：可以独立地开发、测试、优化、使用、理解和修改</li><li>减轻维护的负担：可以更容易被程序员理解，并且在调试的时候可以不影响其他模块</li><li>有效地调节性能：可以通过剖析确定哪些模块影响了系统的性能</li><li>提高软件的可重用性</li><li>降低了构建大型系统的风险：即使整个系统不可用，但是这些独立的模块却有可能是可用的</li></ul><p><strong>继承</strong></p><p>从一个已知的类中派生出一个新的类，新类可以拥有已知类的行为和属性，并且可以通过覆盖/重写来增强已知类的能力。</p><p><strong>多态</strong></p><p>多态分为编译时多态和运行时多态：</p><ul><li>编译时多态主要指方法的重载</li><li>运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定</li></ul><p>运行时多态有三个条件：</p><ul><li>继承：在多态中必须存在有继承关系的子类和父类。</li><li>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。</li><li>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。</li></ul>',20),r=[o];function n(s,p,v,d,c,J){return t(),i("div",null,r)}const E=a(l,[["render",n]]);export{u as __pageData,E as default};

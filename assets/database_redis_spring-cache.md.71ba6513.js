import{_ as p,C as e,o,c,k as a,a as s,H as t,Q as n}from"./chunks/framework.01af844e.js";const v=JSON.parse('{"title":"Spring Cache 缓存框架","description":"","frontmatter":{"title":"Spring Cache 缓存框架","date":"2023-02-12T00:00:00.000Z","order":202},"headers":[],"relativePath":"database/redis/spring-cache.md","filePath":"database/redis/spring-cache.md","lastUpdated":1731893552000}'),r={name:"database/redis/spring-cache.md"},i=n(`<h1 id="spring-cache-缓存框架" tabindex="-1">Spring Cache 缓存框架 <a class="header-anchor" href="#spring-cache-缓存框架" aria-label="Permalink to &quot;Spring Cache 缓存框架&quot;">​</a></h1><p>本文介绍了 Spring Cache 框架的缓存注解以及使用中会遇到的问题</p><h2 id="什么是-spring-cache" tabindex="-1">什么是 Spring Cache？ <a class="header-anchor" href="#什么是-spring-cache" aria-label="Permalink to &quot;什么是 Spring Cache？&quot;">​</a></h2><p>Spring 3.1 引入了激动人心的基于注释（annotation）的缓存（cache）技术，它本质上不是一个具体的缓存实现方案（例如 EHCache 或者 OSCache），而是一个对缓存使用的抽象，通过在既有代码中添加少量它定义的各种 annotation，即能够达到缓存方法的返回对象的效果。</p><p>Spring 的缓存技术还具备相当的灵活性，不仅能够使用 SpEL（Spring Expression Language）来定义缓存的 key 和各种 condition，还提供开箱即用的缓存临时存储方案，也支持和主流的专业缓存例如 EHCache 集成。</p><p>其特点总结如下：</p><ul><li>通过少量的配置 annotation 注释即可使得既有代码支持缓存；</li><li>支持开箱即用 Out-Of-The-Box，即不用安装和部署额外第三方组件即可使用缓存；</li><li>支持 Spring Express Language，能使用对象的任何属性或者方法来定义缓存的 key 和 condition；</li><li>支持 AspectJ，并通过其实现任何方法的缓存支持；</li><li>支持自定义 key 和自定义缓存管理者，具有相当的灵活性和扩展性。</li></ul><p>总的来说，它是一个基于 Spring 框架的 Cache 门面框架，我们可以使用它提供的注解来进行缓存的操作，而与缓存服务器的连接和操作由所配置的缓存客户端去实现。</p><h2 id="spring-cache-注解" tabindex="-1">Spring Cache 注解 <a class="header-anchor" href="#spring-cache-注解" aria-label="Permalink to &quot;Spring Cache 注解&quot;">​</a></h2><p>在入门 Spring Cache 之前，我们先了解下其提供的所有注解：</p><ul><li>@Cacheable</li><li>@CachePut</li><li>@CacheEvict</li><li>@CacheConfig</li><li>@Caching</li><li>@EnableCaching</li></ul><h3 id="cacheable" tabindex="-1">@Cacheable <a class="header-anchor" href="#cacheable" aria-label="Permalink to &quot;@Cacheable&quot;">​</a></h3><p>@Cacheable 注解，添加在方法上，缓存方法的执行结果。执行过程如下：</p><ol><li>首先，判断方法执行结果的缓存。如果有，则直接返回该缓存结果。</li><li>然后，执行方法，获得方法结果。</li><li>之后，根据是否满足缓存的条件。如果满足，则缓存方法结果到缓存。</li><li>最后，返回方法结果。</li></ol><p>@Cacheable 注解的常用属性，如下：</p><ul><li><p>cacheNames 属性：缓存名。必填。[] 数组，可以填写多个缓存名。</p></li><li><p>values 属性：和 cacheNames 属性相同，是它的别名。</p></li><li><p>key 属性：缓存的 key。允许空。如果为空，则默认方法的所有参数进行组合。如果非空，则需要按照 SpEL(Spring Expression Language) 来配置。例如说，@Cacheable(value = &quot;users&quot;, key = &quot;#id&quot;) ，使用方法参数 id 的值作为缓存的 key。</p></li><li><p>condition 属性：基于方法入参，判断要缓存的条件。允许空。如果为空，则不进行入参的判断。如果非空，则需要按照 SpEL(Spring Expression Language) 来配置。例如说，@Cacheable(condition=&quot;#id &gt; 0&quot;) ，需要传入的 id 大于零。</p></li><li><p>unless 属性：基于方法返回，判断不缓存的条件。允许空。如果为空，则不进行入参的判断。如果非空，则需要按照 SpEL(Spring Expression Language) 来配置。例如说，@Cacheable(unless=&quot;#result == null&quot;) ，如果返回结果为 null，则不进行缓存。 要注意，condition 和 unless 都是条件属性，差别在于前者针对入参，后者针对结果。</p></li></ul><p>@Cacheable 注解的不常用属性，如下：</p><ul><li><p>keyGenerator 属性：自定义 key 生成器 KeyGenerator Bean 的名字。允许空。如果设置，则 key 失效。</p></li><li><p>cacheManager 属性：自定义缓存管理器 CacheManager Bean 的名字。允许空。一般不填写，除非有多个 CacheManager Bean 的情况下。</p></li><li><p>cacheResolver 属性：自定义缓存解析器 CacheResolver Bean 的名字。允许空。</p></li><li><p>sync 属性，在获得不到缓存的情况下，是否同步执行方法。默认为 false，表示无需同步。如果设置为 true，则执行方法时，会进行加锁，保证同一时刻，有且仅有一个方法在执行，其它线程阻塞等待。通过这样的方式，避免重复执行方法。注意，该功能的实现，需要参考第三方缓存的具体实现。</p></li></ul><h3 id="cacheput" tabindex="-1">@CachePut <a class="header-anchor" href="#cacheput" aria-label="Permalink to &quot;@CachePut&quot;">​</a></h3><p>@CachePut 注解，添加在方法上，缓存方法的执行结果。不同于 @Cacheable 注解，它的执行过程如下：</p><ol><li>首先，执行方法，获得方法结果。也就是说，无论是否有缓存，都会执行方法。</li><li>然后，根据是否满足缓存的条件。如果满足，则缓存方法结果到缓存。</li><li>最后，返回方法结果。 一般来说，使用方式如下：</li></ol><p>@Cacheable：搭配读操作，实现缓存的被动写。 @CachePut：配置写操作，实现缓存的主动写。 @Cacheable 注解的属性，和 @Cacheable 注解的属性，基本一致，只少一个 sync 属性。</p><h3 id="cacheevict" tabindex="-1">@CacheEvict <a class="header-anchor" href="#cacheevict" aria-label="Permalink to &quot;@CacheEvict&quot;">​</a></h3><p>@CacheEvict 注解，添加在方法上，删除缓存。</p><p>相比 @CachePut 注解，它额外多了两个属性：</p><ul><li><p>allEntries 属性，是否删除缓存名 ( cacheNames ) 下，所有 key 对应的缓存。默认为 false，只删除指定 key 的缓存。</p></li><li><p>beforeInvocation 属性，是否在方法执行前删除缓存。默认为 false，在方法执行后删除缓存。</p></li></ul><h3 id="cacheconfig" tabindex="-1">@CacheConfig <a class="header-anchor" href="#cacheconfig" aria-label="Permalink to &quot;@CacheConfig&quot;">​</a></h3><p>@CacheConfig 注解，添加在类上，共享如下四个属性的配置：</p><ul><li>cacheNames</li><li>keyGenerator</li><li>cacheManager</li><li>cacheResolver</li></ul><h3 id="caching" tabindex="-1">@Caching <a class="header-anchor" href="#caching" aria-label="Permalink to &quot;@Caching&quot;">​</a></h3><p>@Caching 注解，添加在方法上，可以组合使用多个 @Cacheable、@CachePut、@CacheEvict 注解。不太常用，可以暂时忽略。</p><h3 id="enablecaching" tabindex="-1">@EnableCaching <a class="header-anchor" href="#enablecaching" aria-label="Permalink to &quot;@EnableCaching&quot;">​</a></h3><p><code>@EnableCaching</code> 注解，标记开启 Spring Cache 功能，所以一定要添加。代码如下：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// EnableCaching.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">proxyTargetClass</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">AdviceMode </span><span style="color:#B392F0;">mode</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> AdviceMode.PROXY;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">order</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Ordered.LOWEST_PRECEDENCE;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// EnableCaching.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">proxyTargetClass</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">AdviceMode </span><span style="color:#6F42C1;">mode</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> AdviceMode.PROXY;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">order</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Ordered.LOWEST_PRECEDENCE;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="spring-boot-中使用-spring-cache-门面" tabindex="-1">Spring Boot 中使用 Spring Cache 门面 <a class="header-anchor" href="#spring-boot-中使用-spring-cache-门面" aria-label="Permalink to &quot;Spring Boot 中使用 Spring Cache 门面&quot;">​</a></h2><p>在 Spring Boot 里，提供了 spring-boot-starter-cache 库，实现 Spring Cache 的自动化配置，通过 CacheAutoConfiguration 配置类。</p><p>Spring Cache Maven 依赖如下：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 实现对 Caches 的自动化配置 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-cache&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- 实现对 Caches 的自动化配置 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-cache&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在 Java 后端开发中，常见的缓存工具和框架列举如下：</p><ul><li><p>本地缓存：Guava LocalCache、Ehcache、Caffeine。</p><p>Ehcache 的功能更加丰富，Caffeine 的性能要比 Guava LocalCache 好。</p></li><li><p>分布式缓存：Redis、Memcached、Tair。</p><p>Redis 最为主流和常用。</p></li></ul><p>那么，在这些缓存方案当中，spring-boot-starter-cache 怎么知道使用哪种呢？在默认情况下，Spring Boot 会按照如下顺序，自动判断使用哪种缓存方案，创建对应的 CacheManager 缓存管理器。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// CacheConfigurations.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Map&lt;</span><span style="color:#F97583;">CacheType</span><span style="color:#E1E4E8;">, Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; MAPPINGS;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	Map&lt;</span><span style="color:#F97583;">CacheType</span><span style="color:#E1E4E8;">, Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt;&gt; mappings </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> EnumMap&lt;&gt;(CacheType.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">	mappings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(CacheType.GENERIC, GenericCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">	mappings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(CacheType.EHCACHE, EhCacheCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">	mappings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(CacheType.HAZELCAST, HazelcastCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">	mappings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(CacheType.INFINISPAN, InfinispanCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">	mappings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(CacheType.JCACHE, JCacheCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">	mappings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(CacheType.COUCHBASE, CouchbaseCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">	mappings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(CacheType.REDIS, RedisCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">	mappings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(CacheType.CAFFEINE, CaffeineCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">	mappings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(CacheType.SIMPLE, SimpleCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">	mappings.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(CacheType.NONE, NoOpCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#E1E4E8;">	MAPPINGS </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Collections.</span><span style="color:#B392F0;">unmodifiableMap</span><span style="color:#E1E4E8;">(mappings);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// CacheConfigurations.java</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Map&lt;</span><span style="color:#D73A49;">CacheType</span><span style="color:#24292E;">, Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; MAPPINGS;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	Map&lt;</span><span style="color:#D73A49;">CacheType</span><span style="color:#24292E;">, Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt;&gt; mappings </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> EnumMap&lt;&gt;(CacheType.class);</span></span>
<span class="line"><span style="color:#24292E;">	mappings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(CacheType.GENERIC, GenericCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#24292E;">	mappings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(CacheType.EHCACHE, EhCacheCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#24292E;">	mappings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(CacheType.HAZELCAST, HazelcastCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#24292E;">	mappings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(CacheType.INFINISPAN, InfinispanCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#24292E;">	mappings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(CacheType.JCACHE, JCacheCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#24292E;">	mappings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(CacheType.COUCHBASE, CouchbaseCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#24292E;">	mappings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(CacheType.REDIS, RedisCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#24292E;">	mappings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(CacheType.CAFFEINE, CaffeineCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#24292E;">	mappings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(CacheType.SIMPLE, SimpleCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#24292E;">	mappings.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(CacheType.NONE, NoOpCacheConfiguration.class);</span></span>
<span class="line"><span style="color:#24292E;">	MAPPINGS </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Collections.</span><span style="color:#6F42C1;">unmodifiableMap</span><span style="color:#24292E;">(mappings);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>因为自动判断可能和我们希望使用的缓存方案不同，此时我们可以手动配置 spring.cache.type 指定类型。</p><p>目前最常使用的是 Ehcache 本地缓存，和 Redis 分布式缓存。</p><p>Ehcache Maven 依赖：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Ehcache 依赖 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;net.sf.ehcache&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;ehcache&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- Ehcache 依赖 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;net.sf.ehcache&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;ehcache&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Redis Maven 依赖如下，Spring Boot 默认使用 lettuce 作为 Redis 客户端，如果你想使用 Jedis，可以像下面这样替换：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-data-redis&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">exclusions</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- 去掉对 Lettuce 的依赖，因为 Spring Boot 优先使用 Lettuce 作为 Redis 客户端 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">exclusion</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;io.lettuce&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;lettuce-core&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">exclusion</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">exclusions</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 引入 Jedis 的依赖，这样 Spring Boot 实现对 Jedis 的自动化配置 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;redis.clients&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;jedis&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-data-redis&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">exclusions</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 去掉对 Lettuce 的依赖，因为 Spring Boot 优先使用 Lettuce 作为 Redis 客户端 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">exclusion</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;io.lettuce&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;lettuce-core&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">exclusion</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">exclusions</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- 引入 Jedis 的依赖，这样 Spring Boot 实现对 Jedis 的自动化配置 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;redis.clients&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;jedis&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>目前，Spring Data Redis 暂时只支持 Jedis、Lettuce 的内部封装，而 Redisson 是由 <code>redisson-spring-data</code> 来提供。</p>`,49),E={id:"cache-注解失效场景",tabindex:"-1"},y=a("a",{class:"header-anchor",href:"#cache-注解失效场景","aria-label":'Permalink to "Cache 注解失效场景 <Badge text="重要" type="warning" />"'},"​",-1),h=n('<p>Cache 本质上是基于面向<strong>切面</strong>的思想做的，实际上就是使用 Java 动态代理，创建实例的时候注入的是代理对象，在代理对象里调用实际的对象，这样就可以在实际的方法执行前，处理一下缓存的逻辑：没有找到缓存就往下执行，执行完把结果加入到缓存中；找到缓存则直接返回缓存的结果，不调用执行实际的方法。</p><p>因此会有两种失效场景：</p><ol><li>Cache 注解添加在接口中的方法上</li></ol><p>由于 Cache 基于 AOP，也就是 Java 动态代理，是通过继承类去代理，而代理类无法继承一个接口，因此会失效。</p><ol start="2"><li>一个方法 A 调同一个类里的另一个有缓存注解的方法 B，这样是不走缓存的</li></ol><p>原因就是上面说的，使用 Cache 注解添加缓存实际上就是使用动态代理做的，在代理的方法前后做缓存的相应处理。这样一来，单独的去调方法 B 是有缓存的，但是如果调方法 A，A 里面再去调 B 方法，哪怕 B 方法配置了缓存，也是不会生效的。</p><p>解决方法：</p><ol><li>不使用注解的方式，直接取 Ehcache 的 <code>CacheManger</code> 对象，把需要缓存的数据放到里面，类似于使用 Map，缓存的逻辑自己控制;</li><li>把方法 A 和方法 B 放到两个不同的类里面，例如：如果两个方法都在 service 接口里，把方法 B 放到另一个 service 里面，这样 A 方法里调 B 方法，就可以使用 B 方法的缓存。</li></ol><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="http://www.iocoder.cn/Spring-Boot/Cache/" target="_blank" rel="noreferrer">芋道 Spring Boot 缓存 Cache 入门</a></li><li><a href="https://www.cnblogs.com/zhaoyue1215/p/9267584.html" target="_blank" rel="noreferrer">Spring @Cacheable 缓存不生效的问题</a></li></ul>',10);function g(d,u,C,b,m,f){const l=e("Badge");return o(),c("div",null,[i,a("h2",E,[s("Cache 注解失效场景 "),t(l,{text:"重要",type:"warning"}),s(),y]),h])}const D=p(r,[["render",g]]);export{v as __pageData,D as default};

import{_ as e,o as a,c as n,Q as s}from"./chunks/framework.01af844e.js";const x=JSON.parse('{"title":"Nginx 部署","description":"","frontmatter":{"title":"Nginx 部署","date":"2023-02-22T00:00:00.000Z","order":31},"headers":[],"relativePath":"devops/deploy/nginx.md","filePath":"devops/deploy/nginx.md","lastUpdated":1731900098000}'),o={name:"devops/deploy/nginx.md"},l=s('<h1 id="nginx-部署" tabindex="-1">Nginx 部署 <a class="header-anchor" href="#nginx-部署" aria-label="Permalink to &quot;Nginx 部署&quot;">​</a></h1><h2 id="nginx-是什么" tabindex="-1">Nginx 是什么？ <a class="header-anchor" href="#nginx-是什么" aria-label="Permalink to &quot;Nginx 是什么？&quot;">​</a></h2><p>Nginx (engine x) 是一个高性能的 HTTP 和反向代理 web 服务器，</p><p>Nginx 是一款轻量级的 Web 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器，在 BSD-like 协议下发行。其特点是占有内存少， 并发能力强，事实上 nginx 的并发能力确实在同类型的网页服务器中表现较好，中国大陆使用 nginx 网站用户有：百度、京东、新浪、网易、腾讯、淘宝等。</p><h2 id="核心功能" tabindex="-1">核心功能 <a class="header-anchor" href="#核心功能" aria-label="Permalink to &quot;核心功能&quot;">​</a></h2><ol><li>反向代理服务器</li><li>负载均衡</li></ol><h2 id="linux-安装-nginx" tabindex="-1">Linux 安装 Nginx <a class="header-anchor" href="#linux-安装-nginx" aria-label="Permalink to &quot;Linux 安装 Nginx&quot;">​</a></h2><blockquote><p>TODO</p></blockquote><h2 id="启动、停止和重新加载配置" tabindex="-1">启动、停止和重新加载配置 <a class="header-anchor" href="#启动、停止和重新加载配置" aria-label="Permalink to &quot;启动、停止和重新加载配置&quot;">​</a></h2><p>要启动 nginx，需要运行可执行文件。nginx 启动之后，可以通过调用可执行文件附带 <code>-s 参数</code> 来控制它。使用以下语法：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">nginx</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">信号</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">nginx</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">信号</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>信号可能是以下之一：</p><ul><li>stop - 立即关闭</li><li>quit - 正常关闭</li><li>reload - 重新加载配置文件</li><li>reopen - 重新打开日志文件</li></ul><p>例如，要等待工作进程处理完当前的请求才停止 nginx 进程，可以执行以下命令：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">nginx</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-s</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">quit</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">nginx</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-s</span><span style="color:#24292E;"> </span><span style="color:#032F62;">quit</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="配置文件结构" tabindex="-1">配置文件结构 <a class="header-anchor" href="#配置文件结构" aria-label="Permalink to &quot;配置文件结构&quot;">​</a></h2><p>nginx 是由配置文件中指定的指令控制模块组成。指令可分为简单指令和块指令。一个简单的指令是由空格分隔的名称和参数组成，并以分号 ; 结尾。块指令具有与简单指令相同的结构，但不是以分号结尾，而是以大括号{}包围的一组附加指令结尾。如果块指令的大括号内部可以有其它指令，则称这个块指令为上下文（例如：<code>events</code>，<code>http</code>，<code>server</code> 和 <code>location</code>）。</p><p>配置文件中被放置在任何上下文之外的指令都被认为是主上下文 <code>main</code>。<code>events</code> 和 <code>http</code> 指令在主 <code>main</code> 上下文中，<code>server</code> 在 http 中，<code>location</code> 又在 <code>server</code> 中。</p><p>井号 # 之后的行的内容被视为注释。</p>',19),i=[l];function t(p,c,r,d,h,g){return a(),n("div",null,i)}const b=e(o,[["render",t]]);export{x as __pageData,b as default};

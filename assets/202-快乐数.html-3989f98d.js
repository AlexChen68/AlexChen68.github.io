import{_ as l,W as o,X as c,Z as n,$ as s,a0 as a,a1 as i,C as t}from"./framework-ea95e8eb.js";const r={},d=n("h2",{id:"题目链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目链接","aria-hidden":"true"},"#"),s(" 题目链接")],-1),u={href:"https://leetcode.cn/problems/happy-number/",target:"_blank",rel:"noopener noreferrer"},k={id:"题目描述",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#",-1),m=i(`<p>编写一个算法来判断一个数 n 是不是快乐数。</p><p>「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。</p><p>如果 n 是快乐数就返回 True；不是，则返回 False。</p><p>示例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：n = 19
输出：true
解释：
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><ol><li>理论推理：</li></ol><p>首先实验不同位数数字的最大值，平方后的情况：</p><table><thead><tr><th>Digits</th><th style="text-align:center;">Largest</th><th style="text-align:right;">Next</th></tr></thead><tbody><tr><td>1</td><td style="text-align:center;">9</td><td style="text-align:right;">81</td></tr><tr><td>2</td><td style="text-align:center;">99</td><td style="text-align:right;">162</td></tr><tr><td>3</td><td style="text-align:center;">999</td><td style="text-align:right;">243</td></tr><tr><td>4</td><td style="text-align:center;">9999</td><td style="text-align:right;">324</td></tr><tr><td>13</td><td style="text-align:center;">9999999999999</td><td style="text-align:right;">1053</td></tr></tbody></table><p>由数据可以看出，在 3 位数时，总是小于 243；超过 3 位数，平方后数据位数会变小直至小于 243。</p><ol start="2"><li>算法设计</li></ol><p>我们可以对输入进行题述的运算，然后使用 Set 来统计已经经过运算的数字；</p><ul><li>如果得到运算结果为 1，则是快乐数；</li><li>如果得到一个已经经过运算的数字，则进入了循环，不是快乐数。</li></ul><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>set<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
            n <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> d <span class="token operator">=</span> n <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
            n <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
            sum <span class="token operator">+=</span> d<span class="token operator">*</span>d<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h2><ul><li>时间复杂度：O(logn)</li><li>空间复杂度：O(logn)</li></ul>`,17);function h(b,g){const e=t("ExternalLinkIcon"),p=t("Badge");return o(),c("div",null,[d,n("ul",null,[n("li",null,[n("a",u,[s("202. 快乐数"),a(e)])])]),n("h2",k,[v,s(" 题目描述 "),a(p,{text:"简单",type:"tip"})]),m])}const y=l(r,[["render",h],["__file","202-快乐数.html.vue"]]);export{y as default};

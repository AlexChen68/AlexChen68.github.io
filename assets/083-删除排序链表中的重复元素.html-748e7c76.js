import{_ as c,W as p,X as l,Y as n,a0 as s,Z as a,a1 as i,C as e}from"./framework-d3200c61.js";const d={},u={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list/",target:"_blank",rel:"noopener noreferrer"},r=n("hr",null,null,-1),k={id:"题目描述",tabindex:"-1"},h=n("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#",-1),v=i(`<p>给定一个已排序的链表的头 head，<em>删除所有重复的元素，使每个元素只出现一次</em>。返回<em>已排序的链表</em>。</p><p><strong>示例：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/list2.jpg" alt="Alt" loading="lazy"></p><div class="language-text" data-ext="text"><pre class="language-text"><code>输入：head = [1,1,2,3,3]
输出：[1,2,3]
</code></pre></div><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p><strong>遍历法：</strong></p><p>由于给定的链表是排好序的，因此重复的元素在链表中出现的位置是<strong>连续</strong>的，因此我们只需要对链表进行一次遍历，就可以删除重复的元素。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>关于代码中为什么使用一个 <code>cur</code> 引用而不是直接使用 <code>head</code></p><p><code>cur</code> 不是新开的链表，<code>cur</code> 只是一个引用类型的变量，相当于一个内存指针，这里的 <code>head</code> 也是一个指针，它指向的是链表开始位置的内存，让 <code>cur = head</code>，表示 <code>cur</code> 和 <code>head</code> 指向了同一块内存，也就是说这俩指针都存储了相同的内存地址，如果直接操作 <code>head</code>，那么你就丢失了链表起始位置的内存地址，测试程序就没办法从头开始遍历链表了，所以需要使用 <code>cur</code> 来遍历链表，同时直接对指向的内存数据进行操作，这样返回的 <code>head</code> 仍然指向链表开始位置的内存，而这个链表其实已经使用 <code>cur</code> 这个指针进行了修改了。</p></div><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">==</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h2><ul><li>时间复杂度：O(n)，其中 n 是链表的长度。</li><li>空间复杂度：O(1)。</li></ul>`,12);function m(_,b){const t=e("ExternalLinkIcon"),o=e("Badge");return p(),l("div",null,[n("blockquote",null,[n("p",null,[s("LeetCode 传送门 "),n("a",u,[s("https://leetcode.cn/problems/remove-duplicates-from-sorted-list/"),a(t)])])]),r,n("h2",k,[h,s(" 题目描述 "),a(o,{text:"简单",type:"tip"})]),v])}const g=c(d,[["render",m],["__file","083-删除排序链表中的重复元素.html.vue"]]);export{g as default};

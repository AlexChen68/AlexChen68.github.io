import{_ as e,o as r,c as l,Q as a}from"./chunks/framework.419948d5.js";const V=JSON.parse('{"title":"Spring MVC","description":"","frontmatter":{"title":"Spring MVC","article":true,"tag":"Spring","date":"2022-12-29T00:00:00.000Z"},"headers":[],"relativePath":"spring/spring/3.1-springmvc.md","filePath":"spring/spring/3.1-springmvc.md","lastUpdated":1695216405000}'),i={name:"spring/spring/3.1-springmvc.md"},t=a('<h2 id="spring-mvc-简介" tabindex="-1">Spring MVC 简介 <a class="header-anchor" href="#spring-mvc-简介" aria-label="Permalink to &quot;Spring MVC 简介&quot;">​</a></h2><p>Spring Web MVC 是一种基于 Java 的实现了 Web MVC 设计模式的请求驱动类型的轻量级 Web 框架，即使用了 MVC 架 构模式的思想，将 web 层进行职责解耦，基于请求驱动指的就是使用请求 - 响应模型，框架的目的就是帮助我们简化开发，Spring Web MVC 也是要简化我们日常 Web 开发的。</p><p>Spring MVC 将应用程序分为 Controller Model View 三层，Controller 接收客户端请求，调用 Model 生成业务数据，传递给 View,Spring MVC 就是对这套流程的封装，屏蔽了很多底层代码，开放出接口，让开发者可以更加轻松、便捷地完成基于 MVC 模式的 Web 开发。</p><p><img src="https://cdn.staticaly.com/gh/AlexChen68/OSS@master/images/1687805175823.png" alt="1687805175823.png"></p><h2 id="核心组件" tabindex="-1">核心组件 <a class="header-anchor" href="#核心组件" aria-label="Permalink to &quot;核心组件&quot;">​</a></h2><ul><li>DispatcherServlet：中央控制器，前端控制器</li></ul><p>用户请求到达前端控制器（dispatcherServlet），他是整个流程控制的中心，由它负责调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性。</p><ul><li>handler：处理器</li></ul><p>Handler 也叫后端控制器，在 DispatcherServlet 的控制下 Handler 对【具体的用户请求】进行处理，由于 Handler 涉及到【具体的用户业务请求】，所以一般情况需要程序员【根据业务需求开发 Handler】，也就是编写 Controller。</p><ul><li>View：视图</li></ul><p>一般情况下，需要通过【页面标签或页面模版技术】将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。目前我们接触过得视图技术就是 jsp，当然还有 Freemarker，Thymeleaf 等。</p><ul><li>HandlerMapping：处理器映射器</li></ul><p>HandlerMapping 负责根据【用户请求 url】找到【Handler】即处理器，springmvc 提供了不同的【处理器映射器】实现，如配置文件方式，实现接口方式，注解方式等。</p><ul><li>HandlAdapter：处理器适配器</li></ul><p>HandlerAdapter 负责调用具体的处理器，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。我们写的 controller 中的方法，将来就是会由处理器适配器调用。</p><ul><li>ViewResolver：视图解析器</li></ul><p>View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据【逻辑视图名】解析成【物理视图名】即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</p><h2 id="spring-mvc-的请求流程" tabindex="-1">Spring MVC 的请求流程 <a class="header-anchor" href="#spring-mvc-的请求流程" aria-label="Permalink to &quot;Spring MVC 的请求流程&quot;">​</a></h2><p><img src="https://cdn.staticaly.com/gh/AlexChen68/OSS@master/images/1687807324829.png" alt="1687807324829.png"></p><p><strong>核心架构的具体流程步骤</strong>如下：</p><ol><li><strong>首先用户发送请求——&gt;DispatcherServlet</strong>，前端控制器收到请求后自己不进行处理，而是委托给其他的解析器进行 处理，作为统一访问点，进行全局的流程控制；</li><li><strong>DispatcherServlet——&gt;HandlerMapping</strong>，HandlerMapping 将会把请求映射为 HandlerExecutionChain 对象（包含一 个 Handler 处理器（页面控制器）对象、多个 HandlerInterceptor 拦截器）对象，通过这种策略模式，很容易添加新 的映射策略；</li><li><strong>DispatcherServlet——&gt;HandlerAdapter</strong>，HandlerAdapter 将会把处理器包装为适配器，从而支持多种类型的处理器，即适配器设计模式的应用，从而很容易支持很多类型的处理器；</li><li><strong>HandlerAdapter——&gt;处理器功能处理方法的调用</strong>，HandlerAdapter 将会根据适配的结果调用真正的处理器的功能处 理方法，完成功能处理；并返回一个 ModelAndView 对象（包含模型数据、逻辑视图名）；</li><li><strong>ModelAndView 的逻辑视图名——&gt; ViewResolver</strong>，ViewResolver 将把逻辑视图名解析为具体的 View，通过这种策 略模式，很容易更换其他视图技术；</li><li><strong>View——&gt;渲染</strong>，View 会根据传进来的 Model 模型数据进行渲染，此处的 Model 实际是一个 Map 数据结构，因此 很容易支持其他视图技术；</li><li><strong>返回控制权给 DispatcherServlet</strong>，由 DispatcherServlet 返回响应给用户，到此一个流程结束。</li></ol><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://pdai.tech/md/spring/spring-x-framework-springmvc.html" target="_blank" rel="noreferrer">Spring 基础 - SpringMVC 请求流程和案例</a></li><li><a href="https://juejin.cn/post/6844903577547177991" target="_blank" rel="noreferrer">SpringMVC 源码分析系列 (精简)</a></li></ul>',23),n=[t];function p(s,o,g,d,c,h){return r(),l("div",null,n)}const S=e(i,[["render",p]]);export{V as __pageData,S as default};

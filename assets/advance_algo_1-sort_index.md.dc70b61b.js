import{_ as l,o as e,c as i,Q as t}from"./chunks/framework.419948d5.js";const m=JSON.parse('{"title":"排序算法","description":"","frontmatter":{"title":"排序算法","order":9,"date":"2023-02-21T00:00:00.000Z"},"headers":[],"relativePath":"advance/algo/1-sort/index.md","filePath":"advance/algo/1-sort/index.md","lastUpdated":1697399636000}'),a={name:"advance/algo/1-sort/index.md"},o=t('<h2 id="常见的排序算法" tabindex="-1">常见的排序算法 <a class="header-anchor" href="#常见的排序算法" aria-label="Permalink to &quot;常见的排序算法&quot;">​</a></h2><p><strong>排序算法分类：</strong></p><ul><li>交换排序 <ul><li>冒泡排序</li><li>快速排序</li></ul></li><li>插入排序 <ul><li>直接插入排序</li><li>希尔排序</li></ul></li><li>选择排序 <ul><li>直接选择排序</li><li>堆排序</li></ul></li><li>归并排序</li><li>基数排序</li></ul><p><strong>排序算法简介：</strong></p><ul><li><p>插入排序：插入排序基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为 O(n^2)。是稳定的排序方法。插入排序的基本思想是：每步将一个待排序的纪录，按其关键码值的大小插入前面已经排序的文件中适当位置上，直到全部插入完为止。</p></li><li><p>选择排序：选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。选择排序是不稳定的排序方法。</p></li><li><p>冒泡排序：冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越大的元素会经由交换慢慢“浮”到数列的顶端。</p></li><li><p>快速排序：快速排序（Quicksort）是对冒泡排序的一种改进。它的基本思想是：通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。</p></li><li><p>归并排序：归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。</p></li><li><p>希尔排序：希尔排序 (Shell Sort) 是插入排序的一种。也称缩小增量排序，是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至 1 时，整个文件恰被分成一组，算法便终止。</p></li></ul><h2 id="排序算法性能对比" tabindex="-1">排序算法性能对比 <a class="header-anchor" href="#排序算法性能对比" aria-label="Permalink to &quot;排序算法性能对比&quot;">​</a></h2><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/blog/advance/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AF%B9%E6%AF%94.png" alt="排序算法对比"></p>',7),r=[o];function n(s,d,p,c,_,u){return e(),i("div",null,r)}const g=l(a,[["render",n]]);export{m as __pageData,g as default};

const t=JSON.parse(`{"key":"v-3f0859b3","path":"/advance/ds/hashtable.html","title":"线性表 - 哈希表","lang":"zh-CN","frontmatter":{"title":"线性表 - 哈希表","date":"2023-01-08T00:00:00.000Z","category":"数据结构","description":"哈希表概述 哈希表（英文名字为 Hash table，国内也有一些算法书籍翻译为散列表，大家看到这两个名称知道都是指 hash table 就可以了）。 哈希表是根据关键码的值而直接进行访问的数据结构。 哈希表能解决什么问题： 快速判断一个元素是否出现集合里； 实现缓存。 哈希表的原理： 通过将散列函数将输入映射为数字，对应数组的索引下标，将数据存储在对应索引的位置中； 散列函数将不同的输入映射到不同的索引，从而可以利用数组实现时间复杂度为 O(1) 的快速查询。","head":[["meta",{"property":"og:url","content":"https://github.com/AlexChen68/AlexChen68.github.io/advance/ds/hashtable.html"}],["meta",{"property":"og:site_name","content":"AlexChen's Blog"}],["meta",{"property":"og:title","content":"线性表 - 哈希表"}],["meta",{"property":"og:description","content":"哈希表概述 哈希表（英文名字为 Hash table，国内也有一些算法书籍翻译为散列表，大家看到这两个名称知道都是指 hash table 就可以了）。 哈希表是根据关键码的值而直接进行访问的数据结构。 哈希表能解决什么问题： 快速判断一个元素是否出现集合里； 实现缓存。 哈希表的原理： 通过将散列函数将输入映射为数字，对应数组的索引下标，将数据存储在对应索引的位置中； 散列函数将不同的输入映射到不同的索引，从而可以利用数组实现时间复杂度为 O(1) 的快速查询。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-02T14:06:15.000Z"}],["meta",{"property":"article:published_time","content":"2023-01-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-02T14:06:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线性表 - 哈希表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-08T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-02T14:06:15.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"哈希表概述","slug":"哈希表概述","link":"#哈希表概述","children":[]},{"level":2,"title":"常见的哈希表表示","slug":"常见的哈希表表示","link":"#常见的哈希表表示","children":[]},{"level":2,"title":"相关算法题","slug":"相关算法题","link":"#相关算法题","children":[]}],"git":{"createdTime":1680340044000,"updatedTime":1680444375000,"contributors":[{"name":"alexchen","email":"1274812218@qq.com","commits":3}]},"readingTime":{"minutes":1.63,"words":488},"filePathRelative":"advance/ds/hashtable.md","localizedDate":"2023年1月8日","excerpt":"<h2> 哈希表概述</h2>\\n<p>哈希表（英文名字为 Hash table，国内也有一些算法书籍翻译为散列表，大家看到这两个名称知道都是指 hash table 就可以了）。</p>\\n<blockquote>\\n<p>哈希表是根据关键码的值而直接进行访问的数据结构。</p>\\n</blockquote>\\n<p><strong>哈希表能解决什么问题</strong>：</p>\\n<ol>\\n<li>快速判断一个元素是否出现集合里；</li>\\n<li>实现缓存。</li>\\n</ol>\\n<p><strong>哈希表的原理：</strong></p>\\n<blockquote>\\n<p>通过将<strong>散列函数</strong>将<strong>输入</strong>映射为<strong>数字</strong>，对应<strong>数组</strong>的索引下标，将数据存储在对应索引的位置中；</p>\\n<p>散列函数将不同的输入映射到不同的索引，从而可以利用<strong>数组</strong>实现时间复杂度为 <strong>O(1)</strong> 的快速查询。</p>\\n</blockquote>","autoDesc":true}`);export{t as data};

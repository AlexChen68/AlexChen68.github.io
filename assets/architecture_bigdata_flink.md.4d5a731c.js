import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.01af844e.js";const g=JSON.parse('{"title":"Flink 流式计算引擎","description":"","frontmatter":{"title":"Flink 流式计算引擎","date":"2023-10-13T00:00:00.000Z","order":2},"headers":[],"relativePath":"architecture/bigdata/flink.md","filePath":"architecture/bigdata/flink.md","lastUpdated":1740013072000}'),p={name:"architecture/bigdata/flink.md"},o=l(`<h1 id="apache-flink" tabindex="-1">Apache Flink <a class="header-anchor" href="#apache-flink" aria-label="Permalink to &quot;Apache Flink&quot;">​</a></h1><h2 id="flink-简介" tabindex="-1">Flink 简介 <a class="header-anchor" href="#flink-简介" aria-label="Permalink to &quot;Flink 简介&quot;">​</a></h2><p>Apache Flink 是一个在<strong>有界数据流</strong>和<strong>无界数据流</strong>上进行有状态计算分布式处理引擎和框架。</p><p>Flink 设计旨在所有常见的集群环境中运行，以任意规模和内存级速度执行计算。</p><p>Flink 官方文档：<a href="https://nightlies.apache.org/flink/flink-docs-release-1.20/zh/" target="_blank" rel="noreferrer">https://nightlies.apache.org/flink/flink-docs-release-1.20/zh/</a></p><h3 id="核心功能" tabindex="-1">核心功能 <a class="header-anchor" href="#核心功能" aria-label="Permalink to &quot;核心功能&quot;">​</a></h3><ul><li><p><strong>流处理 (Stream Processing)</strong></p><ul><li><p><strong>实时数据管道</strong>：持续处理无界数据流（如日志、传感器数据、交易记录等）。</p></li><li><p><strong>事件驱动型应用</strong>：基于事件触发的实时响应（如风险控制、实时推荐）。</p></li></ul></li><li><p><strong>批处理 (Batch Processing)</strong></p><ul><li>兼容传统批处理任务（如离线数据分析），并通过统一 API 实现流批一体。</li></ul></li></ul><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><ol><li><strong>电商和市场营销</strong>：实时数据报表、广告投放、实时推荐举例：</li><li><strong>物联网 (IOT)</strong>: 传感器实时数据采集和显示、实时报警，交通运输业</li><li><strong>物流配送和服务业</strong>：订单状态实时更新、通知信息推送</li><li><strong>银行和金融业</strong>：实时结算和通知推送，实时检测异常行为</li></ol><h2 id="flink-架构" tabindex="-1">Flink 架构 <a class="header-anchor" href="#flink-架构" aria-label="Permalink to &quot;Flink 架构&quot;">​</a></h2><p>Flink 是一个分布式系统，需要有效分配和管理计算资源才能执行流应用程序。它集成了所有常见的集群资源管理器，例如 Hadoop YARN，但也可以设置作为独立集群甚至库运行。</p><p>Flink 运行时由两种类型的进程组成：一个 <code>JobManager</code> 和一个或者多个 <code>TaskManager</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/images/2023/flink-2025-02-13-15-13-45.png" alt="flink-2025-02-13-15-13-45"></p><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/images/2025/flink-2025-02-18-14-57-15.png" alt="flink-2025-02-18-14-57-15"></p><p><code>Client</code> 不是运行时和程序执行的一部分，而是用于准备数据流并将其发送给 <code>JobManager</code>。之后，客户端可以断开连接（分离模式），或保持连接来接收进程报告（附加模式）。客户端可以作为触发执行 <code>Java/Scala</code> 程序的一部分运行，也可以在命令行进程 <code>./bin/flink run ...</code> 中运行。</p><p>可以通过多种方式启动 <code>JobManager</code> 和 <code>TaskManager</code>: 直接在机器上作为 <a href="https://nightlies.apache.org/flink/flink-docs-release-1.20/zh/docs/deployment/resource-providers/standalone/overview/" target="_blank" rel="noreferrer">standalone</a> 集群启动、在容器中启动、或者通过 YARN 等资源框架管理并启动。TaskManager 连接到 JobManagers，宣布自己可用，并被分配工作。</p><ul><li><strong>JobManager</strong></li></ul><p>JobManager 具有许多与协调 Flink 应用程序的分布式执行有关的职责：它决定何时调度下一个 task（或一组 task）、对完成的 task 或执行失败做出反应、协调 checkpoint、并且协调从失败中恢复等等。</p><ul><li><strong>TaskManagers</strong></li></ul><p>TaskManager（也称为 worker）执行作业流的 task，并且缓存和交换数据流。必须始终至少有一个 TaskManager。在 TaskManager 中资源调度的最小单位是 task slot。TaskManager 中 task slot 的数量表示并发处理 task 的数量。</p><h3 id="flink-四层-api" tabindex="-1">Flink 四层 API <a class="header-anchor" href="#flink-四层-api" aria-label="Permalink to &quot;Flink 四层 API&quot;">​</a></h3><p>Flink 为流式/批式处理应用程序的开发提供了不同级别的抽象。</p><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/images/2025/flink-2025-02-14-10-01-07.png" alt="flink-2025-02-14-10-01-07"></p><p>最常用的是 SQL 级别的 API。</p><h3 id="flink-核心概念" tabindex="-1">Flink 核心概念 <a class="header-anchor" href="#flink-核心概念" aria-label="Permalink to &quot;Flink 核心概念&quot;">​</a></h3><ol><li><strong>并行度（Parallelism）</strong></li></ol><p><strong>并行度（Parallelism）</strong> 是 Apache Flink 中用于描述任务并行执行程度的概念。它决定了任务在集群中运行时可以使用的并行实例数量。具体来说：</p><ul><li>并行实例：每个算子（Operator）在运行时可以有多个并行实例，每个实例处理数据流的一个子集。</li><li>全局与局部设置：并行度可以在全局范围内设置，也可以在单个算子级别设置。全局并行度影响整个作业，而局部并行度仅影响特定算子。</li><li>资源利用：较高的并行度通常意味着更高的资源利用率和更快的处理速度，但也会增加资源消耗和协调开销。</li></ul><div class="tip custom-block"><p class="custom-block-title">并行度优先级顺序</p><p>算子 &gt; ENV 全局 &gt; 任务提交参数 &gt; 配置文件</p></div><ol start="2"><li><strong>算子链（Operator Chain）</strong></li></ol><p><strong>算子链（Operator Chaining</strong>）是 Flink 优化任务执行的一种机制，通过将多个算子合并为一个任务来减少数据交换的开销。具体特点如下：</p><ul><li>任务合并：Flink 会将多个算子合并为一个任务，在同一个线程中执行，避免不必要的序列化和网络传输。</li><li>条件限制：算子链的形成需要满足一定条件，如前一个算子的输出类型与后一个算子的输入类型兼容，且并行度相同。</li><li>性能提升：算子链减少了线程切换和数据传输的开销，从而提升性能。</li><li>手动控制：用户可以通过 disableChaining() 方法禁用算子链，或使用 startNewChain() 方法开始新的算子链。</li></ul><ol start="3"><li><strong>任务槽 (Task slot)</strong></li></ol><ul><li><code>Task Slot</code> 是 Flink 集群中资源分配的最小单元，每个 <code>Slot</code> 可以运行一个或多个任务。</li><li>每个 <code>Slot</code> 拥有固定的资源（如 CPU 和内存），任务在 <code>Slot</code> 内共享这些资源，但不同 <code>Slot</code> 之间的资源相互隔离。</li><li><strong>并行度</strong>决定了一个任务可以拆分成多少个并行实例，每个实例需要一个 <code>Slot</code> 来运行。</li></ul><h3 id="flink-主要开发步骤" tabindex="-1">Flink 主要开发步骤 <a class="header-anchor" href="#flink-主要开发步骤" aria-label="Permalink to &quot;Flink 主要开发步骤&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/images/2025/flink-2025-02-19-11-33-25.png" alt="flink-2025-02-19-11-33-25"></p><h2 id="flink-三种部署模式" tabindex="-1">Flink 三种部署模式 <a class="header-anchor" href="#flink-三种部署模式" aria-label="Permalink to &quot;Flink 三种部署模式&quot;">​</a></h2><p>Flink 应用程序的作业可以被提交到长期运行的 <code>Flink Session</code> 集群、专用的 <code>Flink Job</code> 集群 或 <code>Flink Application</code> 集群。这些选项之间的差异主要与集群的生命周期和资源隔离保证有关。</p><ul><li><code>Flink Session</code> 集群：在 Flink Session 集群中，客户端连接到一个预先存在的、长期运行的集群，该集群可以接受多个作业提交。即使所有作业完成后，集群（和 JobManager）仍将继续运行直到手动停止 session 为止。因此，Flink Session 集群的寿命不受任何 Flink 作业寿命的约束。</li><li><code>Flink Job</code> 集群：会话模式因为资源共享会导致很多问题，所以为了更好地隔离资源，可以考虑为每个提交的作业启动一个集群。在 Flink Job 集群中，可用的集群管理器（例如 YARN）用于为每个提交的作业启动一个集群，并且该集群仅可用于该作业。在这里，客户端首先从集群管理器请求资源启动 JobManager，然后将作业提交给在这个进程中运行的 Dispatcher。然后根据作业的资源请求惰性的分配 TaskManager。一旦作业完成，Flink Job 集群将被拆除。</li><li><code>Flink Application</code> 集群：Flink Application 集群是专用的 Flink 集群，仅从 Flink 应用程序执行作业，并且 main() 方法在集群上而不是客户端上运行。提交作业是一个单步骤过程：无需先启动 Flink 集群，然后将作业提交到现有的 session 集群；相反，将应用程序逻辑和依赖打包成一个可执行的作业 JAR 中，并且集群入口（ApplicationClusterEntryPoint）负责调用 main() 方法来提取 JobGraph。例如，这允许你像在 Kubernetes 上部署任何其他应用程序一样部署 Flink 应用程序。因此，Flink Application 集群的寿命与 Flink 应用程序的寿命有关。</li></ul><p>参考链接：<a href="https://nightlies.apache.org/flink/flink-docs-release-1.20/zh/docs/concepts/flink-architecture/#flink-%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C" target="_blank" rel="noreferrer">Flink 应用程序执行</a></p><h2 id="datastream-api" tabindex="-1">DataStream API <a class="header-anchor" href="#datastream-api" aria-label="Permalink to &quot;DataStream API&quot;">​</a></h2><h3 id="执行环境" tabindex="-1">执行环境 <a class="header-anchor" href="#执行环境" aria-label="Permalink to &quot;执行环境&quot;">​</a></h3><h3 id="源算子" tabindex="-1">源算子 <a class="header-anchor" href="#源算子" aria-label="Permalink to &quot;源算子&quot;">​</a></h3><h4 id="从集合获取数据源" tabindex="-1">从集合获取数据源 <a class="header-anchor" href="#从集合获取数据源" aria-label="Permalink to &quot;从集合获取数据源&quot;">​</a></h4><p>使用 <code>fromData()</code> 方法获取集合数据源</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">StreamExecutionEnvironment env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StreamExecutionEnvironment.</span><span style="color:#B392F0;">getExecutionEnvironment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">DataStreamSource&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; dataStreamSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> env.</span><span style="color:#B392F0;">fromData</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">dataStreamSource.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">env.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">StreamExecutionEnvironment env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StreamExecutionEnvironment.</span><span style="color:#6F42C1;">getExecutionEnvironment</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">DataStreamSource&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; dataStreamSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> env.</span><span style="color:#6F42C1;">fromData</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">dataStreamSource.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">env.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="从文件获取数据源" tabindex="-1">从文件获取数据源 <a class="header-anchor" href="#从文件获取数据源" aria-label="Permalink to &quot;从文件获取数据源&quot;">​</a></h4><ol><li>引入依赖</li></ol><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.flink&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;flink-connector-files&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;\${flink.version}&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;provided&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.flink&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;flink-connector-files&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;\${flink.version}&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;provided&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="2"><li>使用 <code>FileSource</code> 获取数据源</li></ol><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">StreamExecutionEnvironment env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StreamExecutionEnvironment.</span><span style="color:#B392F0;">getExecutionEnvironment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Path path </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Path</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/Users/alexchen/Projects/github/flink-examples/flink-source-demo/input/data.txt&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">FileSource&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; source </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> FileSource.</span><span style="color:#B392F0;">forRecordStreamFormat</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TextLineInputFormat</span><span style="color:#E1E4E8;">(), path).</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">DataStreamSource&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; dataStreamSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> env.</span><span style="color:#B392F0;">fromSource</span><span style="color:#E1E4E8;">(source, WatermarkStrategy.</span><span style="color:#B392F0;">noWatermarks</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;fileSource&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">dataStreamSource.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">env.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">StreamExecutionEnvironment env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StreamExecutionEnvironment.</span><span style="color:#6F42C1;">getExecutionEnvironment</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Path path </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Path</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/Users/alexchen/Projects/github/flink-examples/flink-source-demo/input/data.txt&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">FileSource&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; source </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> FileSource.</span><span style="color:#6F42C1;">forRecordStreamFormat</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TextLineInputFormat</span><span style="color:#24292E;">(), path).</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">DataStreamSource&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; dataStreamSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> env.</span><span style="color:#6F42C1;">fromSource</span><span style="color:#24292E;">(source, WatermarkStrategy.</span><span style="color:#6F42C1;">noWatermarks</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;fileSource&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">dataStreamSource.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">env.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="从-socket-读取数据源" tabindex="-1">从 Socket 读取数据源 <a class="header-anchor" href="#从-socket-读取数据源" aria-label="Permalink to &quot;从 Socket 读取数据源&quot;">​</a></h5><p>使用 <code>socketTextStream</code> 方法获取 socket 数据源</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">StreamExecutionEnvironment env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StreamExecutionEnvironment.</span><span style="color:#B392F0;">getExecutionEnvironment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">DataStreamSource&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; dataStreamSource </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">        env.</span><span style="color:#B392F0;">socketTextStream</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;localhost&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">9999</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">dataStreamSource.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">env.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">StreamExecutionEnvironment env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StreamExecutionEnvironment.</span><span style="color:#6F42C1;">getExecutionEnvironment</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">DataStreamSource&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; dataStreamSource </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">        env.</span><span style="color:#6F42C1;">socketTextStream</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;localhost&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">9999</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">dataStreamSource.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">env.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h4 id="从-kafka-获取数据源" tabindex="-1">从 kafka 获取数据源 <a class="header-anchor" href="#从-kafka-获取数据源" aria-label="Permalink to &quot;从 kafka 获取数据源&quot;">​</a></h4><ol><li>添加 kafka 连接器 Maven 依赖</li></ol><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.flink&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;flink-connector-kafka&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;3.3.0-1.20&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.flink&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;flink-connector-kafka&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;3.3.0-1.20&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol start="2"><li>使用 <code>KafkaSource</code> 构造器创建数据源</li></ol><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">StreamExecutionEnvironment env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StreamExecutionEnvironment.</span><span style="color:#B392F0;">getExecutionEnvironment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">KafkaSource&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; kafkaSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> KafkaSource.</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#B392F0;">builder</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">setBootstrapServers</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;kafkahost:9092&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">setGroupId</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;flink-group&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">setTopics</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;flink-topic&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">setValueOnlyDeserializer</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SimpleStringSchema</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// 值序列化器</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">setStartingOffsets</span><span style="color:#E1E4E8;">(OffsetsInitializer.</span><span style="color:#B392F0;">earliest</span><span style="color:#E1E4E8;">()) </span><span style="color:#6A737D;">// 消费 kafka 的偏移量策略</span></span>
<span class="line"><span style="color:#E1E4E8;">        .</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">DataStreamSource&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; dataStreamSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> env.</span><span style="color:#B392F0;">fromSource</span><span style="color:#E1E4E8;">(kafkaSource, WatermarkStrategy.</span><span style="color:#B392F0;">noWatermarks</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;kafkaSource&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">dataStreamSource.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">env.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">StreamExecutionEnvironment env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StreamExecutionEnvironment.</span><span style="color:#6F42C1;">getExecutionEnvironment</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">KafkaSource&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; kafkaSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> KafkaSource.</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#6F42C1;">builder</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">setBootstrapServers</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;kafkahost:9092&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">setGroupId</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;flink-group&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">setTopics</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;flink-topic&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">setValueOnlyDeserializer</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SimpleStringSchema</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// 值序列化器</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">setStartingOffsets</span><span style="color:#24292E;">(OffsetsInitializer.</span><span style="color:#6F42C1;">earliest</span><span style="color:#24292E;">()) </span><span style="color:#6A737D;">// 消费 kafka 的偏移量策略</span></span>
<span class="line"><span style="color:#24292E;">        .</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">DataStreamSource&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; dataStreamSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> env.</span><span style="color:#6F42C1;">fromSource</span><span style="color:#24292E;">(kafkaSource, WatermarkStrategy.</span><span style="color:#6F42C1;">noWatermarks</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;kafkaSource&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">dataStreamSource.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">env.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ol start="3"><li>kafka 创建 topic</li></ol><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">./kafka-topics.sh</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--create</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--topic</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">flink-topic</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--zookeeper</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">localhost:2181</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--partitions</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--replication-factor</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">./kafka-topics.sh</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--create</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--topic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">flink-topic</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--zookeeper</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:2181</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--partitions</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--replication-factor</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="4"><li>往 kafka 写入测试数据</li></ol><div class="language-shell vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">./kafka-console-producer.sh</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--broker-list</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">localhost:9092</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--topic</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">flink-topic</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">./kafka-console-producer.sh</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--broker-list</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:9092</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--topic</span><span style="color:#24292E;"> </span><span style="color:#032F62;">flink-topic</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="使用-datagen-模拟数据源" tabindex="-1">使用 <code>DataGen</code> 模拟数据源 <a class="header-anchor" href="#使用-datagen-模拟数据源" aria-label="Permalink to &quot;使用 \`DataGen\` 模拟数据源&quot;">​</a></h4><ol><li>引入依赖</li></ol><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.apache.flink&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;flink-connector-datagen&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;\${flink.version}&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;provided&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.apache.flink&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;flink-connector-datagen&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;\${flink.version}&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;provided&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="2"><li>使用 <code>DataGeneratorSource</code> 创建数据源</li></ol><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">[] args) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    StreamExecutionEnvironment env </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> StreamExecutionEnvironment.</span><span style="color:#B392F0;">getExecutionEnvironment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 总数量会按并行度均分</span></span>
<span class="line"><span style="color:#E1E4E8;">    env.</span><span style="color:#B392F0;">setParallelism</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    DataGeneratorSource&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; dataGeneratorSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> DataGeneratorSource&lt;&gt;(</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyGeneratorFunction</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 数据总条数</span></span>
<span class="line"><span style="color:#E1E4E8;">            RateLimiterStrategy.</span><span style="color:#B392F0;">perSecond</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">), </span><span style="color:#6A737D;">// 每秒生成的数据数量</span></span>
<span class="line"><span style="color:#E1E4E8;">            Types.STRING</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"><span style="color:#E1E4E8;">    DataStreamSource&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; dataStreamSource </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> env.</span><span style="color:#B392F0;">fromSource</span><span style="color:#E1E4E8;">(dataGeneratorSource, WatermarkStrategy.</span><span style="color:#B392F0;">noWatermarks</span><span style="color:#E1E4E8;">(), </span><span style="color:#9ECBFF;">&quot;data-generator&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    dataStreamSource.</span><span style="color:#B392F0;">print</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    env.</span><span style="color:#B392F0;">execute</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyGeneratorFunction</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GeneratorFunction</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">Long</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyGeneratorFunction</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(Long </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Number:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">[] args) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    StreamExecutionEnvironment env </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> StreamExecutionEnvironment.</span><span style="color:#6F42C1;">getExecutionEnvironment</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 总数量会按并行度均分</span></span>
<span class="line"><span style="color:#24292E;">    env.</span><span style="color:#6F42C1;">setParallelism</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    DataGeneratorSource&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; dataGeneratorSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> DataGeneratorSource&lt;&gt;(</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyGeneratorFunction</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 数据总条数</span></span>
<span class="line"><span style="color:#24292E;">            RateLimiterStrategy.</span><span style="color:#6F42C1;">perSecond</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">), </span><span style="color:#6A737D;">// 每秒生成的数据数量</span></span>
<span class="line"><span style="color:#24292E;">            Types.STRING</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"><span style="color:#24292E;">    DataStreamSource&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; dataStreamSource </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> env.</span><span style="color:#6F42C1;">fromSource</span><span style="color:#24292E;">(dataGeneratorSource, WatermarkStrategy.</span><span style="color:#6F42C1;">noWatermarks</span><span style="color:#24292E;">(), </span><span style="color:#032F62;">&quot;data-generator&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    dataStreamSource.</span><span style="color:#6F42C1;">print</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    env.</span><span style="color:#6F42C1;">execute</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyGeneratorFunction</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GeneratorFunction</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">Long</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyGeneratorFunction</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(Long </span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Number:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>`,68),e=[o];function t(r,c,i,E,y,u){return n(),a("div",null,e)}const m=s(p,[["render",t]]);export{g as __pageData,m as default};

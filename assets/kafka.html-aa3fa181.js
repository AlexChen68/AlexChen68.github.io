const e=JSON.parse(`{"key":"v-d472610e","path":"/distributed/mq/kafka.html","title":"Kafka 消息队列","lang":"zh-CN","frontmatter":{"title":"Kafka 消息队列","category":"消息队列","date":"2023-04-02T00:00:00.000Z","description":"1.0 Kafka 简介 Kafka 是一个分布式、分区的、多副本的、多订阅者，基于 zookeeper 协调的分布式日志系统，可作为消息中间件。 sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 1.1 核心概念 Producer：生产者，发送消息的一方。生产者负责创建消息，然后将其发送到 Kafka。 Consumer：消费者，接受消息的一方。消费者连接到 Kafka 上并接收消息，进而进行相应的业务逻辑处理。 Consumer Group：一个消费者组可以包含一个或多个消费者。使用多分区 + 多消费者方式可以极大提高数据下游的处理速度，同一消费组中的消费者不会重复消费消息，同样的，不同消费组中的消费者消息消息时互不影响。Kafka 就是通过消费组的方式来实消息 P2P 模式和广播模式。 Broker：服务代理节点。Broker 是 Kafka 的服务节点，即 Kafka 的服务器。 Topic：Kafka 中的消息以 Topic 为单位进行划分，生产者将消息发送到特定的 Topic，而消费者负责订阅 Topic 的消息并进行消费。 Partition：Topic 是一个逻辑的概念，它可以细分为多个分区，每个分区只属于单个主题。同一个主题下不同分区包含的消息是不同的，分区在存储层面可以看作一个可追加的日志（Log）文件，消息在被追加到分区日志文件的时候都会分配一个特定的偏移量 offset）。 Offset：offset 是消息在分区中的唯一标识，Kafka 通过它来保证消息在分区内的顺序性，不过 offset 并不跨越分区，也就是说，Kafka 保证的是分区有序性而不是主题有序性。 Replication：副本，是 Kafka 保证数据高可用的方式，Kafka 同一 Partition 的数据可以在多 Broker 上存在多个副本，通常只有主副本对外提供读写服务，当主副本所在 broker 崩溃或发生网络异常，Kafka 会在 Controller 的管理下会重新选择新的 Leader 副对外提供读写服务。 Record：实际写入 Kafka 中并可以被读取的消息记录。每个 record 包含了 key、value 和 timestamp。","head":[["meta",{"property":"og:url","content":"https://github.com/AlexChen68/AlexChen68.github.io/distributed/mq/kafka.html"}],["meta",{"property":"og:site_name","content":"AlexChen's Blog"}],["meta",{"property":"og:title","content":"Kafka 消息队列"}],["meta",{"property":"og:description","content":"1.0 Kafka 简介 Kafka 是一个分布式、分区的、多副本的、多订阅者，基于 zookeeper 协调的分布式日志系统，可作为消息中间件。 sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 1.1 核心概念 Producer：生产者，发送消息的一方。生产者负责创建消息，然后将其发送到 Kafka。 Consumer：消费者，接受消息的一方。消费者连接到 Kafka 上并接收消息，进而进行相应的业务逻辑处理。 Consumer Group：一个消费者组可以包含一个或多个消费者。使用多分区 + 多消费者方式可以极大提高数据下游的处理速度，同一消费组中的消费者不会重复消费消息，同样的，不同消费组中的消费者消息消息时互不影响。Kafka 就是通过消费组的方式来实消息 P2P 模式和广播模式。 Broker：服务代理节点。Broker 是 Kafka 的服务节点，即 Kafka 的服务器。 Topic：Kafka 中的消息以 Topic 为单位进行划分，生产者将消息发送到特定的 Topic，而消费者负责订阅 Topic 的消息并进行消费。 Partition：Topic 是一个逻辑的概念，它可以细分为多个分区，每个分区只属于单个主题。同一个主题下不同分区包含的消息是不同的，分区在存储层面可以看作一个可追加的日志（Log）文件，消息在被追加到分区日志文件的时候都会分配一个特定的偏移量 offset）。 Offset：offset 是消息在分区中的唯一标识，Kafka 通过它来保证消息在分区内的顺序性，不过 offset 并不跨越分区，也就是说，Kafka 保证的是分区有序性而不是主题有序性。 Replication：副本，是 Kafka 保证数据高可用的方式，Kafka 同一 Partition 的数据可以在多 Broker 上存在多个副本，通常只有主副本对外提供读写服务，当主副本所在 broker 崩溃或发生网络异常，Kafka 会在 Controller 的管理下会重新选择新的 Leader 副对外提供读写服务。 Record：实际写入 Kafka 中并可以被读取的消息记录。每个 record 包含了 key、value 和 timestamp。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-18T13:57:04.000Z"}],["meta",{"property":"article:author","content":"AlexChen"}],["meta",{"property":"article:published_time","content":"2023-04-02T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-18T13:57:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Kafka 消息队列\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-02T00:00:00.000Z\\",\\"dateModified\\":\\"2023-07-18T13:57:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AlexChen\\",\\"url\\":\\"https://github.com/AlexChen68\\"}]}"]]},"headers":[{"level":2,"title":"1.0 Kafka 简介","slug":"_1-0-kafka-简介","link":"#_1-0-kafka-简介","children":[{"level":3,"title":"1.1 核心概念","slug":"_1-1-核心概念","link":"#_1-1-核心概念","children":[]},{"level":3,"title":"1.2 优缺点","slug":"_1-2-优缺点","link":"#_1-2-优缺点","children":[]}]},{"level":2,"title":"2.0 Docker 安装 Kafka","slug":"_2-0-docker-安装-kafka","link":"#_2-0-docker-安装-kafka","children":[{"level":3,"title":"2.1 创建网络","slug":"_2-1-创建网络","link":"#_2-1-创建网络","children":[]},{"level":3,"title":"2.2 安装 Zookeeper","slug":"_2-2-安装-zookeeper","link":"#_2-2-安装-zookeeper","children":[]},{"level":3,"title":"2.3 安装 Kafka","slug":"_2-3-安装-kafka","link":"#_2-3-安装-kafka","children":[]},{"level":3,"title":"2.4 安装 kafka-map 图形化管理工具（可选）","slug":"_2-4-安装-kafka-map-图形化管理工具-可选","link":"#_2-4-安装-kafka-map-图形化管理工具-可选","children":[]}]}],"git":{"createdTime":1684237450000,"updatedTime":1689688624000,"contributors":[{"name":"alexchen","email":"1274812218@qq.com","commits":2}]},"readingTime":{"minutes":3.87,"words":1160},"filePathRelative":"distributed/mq/kafka.md","localizedDate":"2023年4月2日","excerpt":"<h2> 1.0 Kafka 简介</h2>\\n<p>Kafka 是一个分布式、分区的、多副本的、多订阅者，基于 zookeeper 协调的分布式日志系统，可作为消息中间件。</p>\\n<p>sudo yum-config-manager <br>\\n--add-repo <br>\\nhttps://download.docker.com/linux/centos/docker-ce.repo</p>\\n<h3> 1.1 核心概念</h3>\\n<ul>\\n<li>Producer：生产者，发送消息的一方。生产者负责创建消息，然后将其发送到 Kafka。</li>\\n<li>Consumer：消费者，接受消息的一方。消费者连接到 Kafka 上并接收消息，进而进行相应的业务逻辑处理。</li>\\n<li>Consumer Group：一个消费者组可以包含一个或多个消费者。使用多分区 + 多消费者方式可以极大提高数据下游的处理速度，同一消费组中的消费者不会重复消费消息，同样的，不同消费组中的消费者消息消息时互不影响。Kafka 就是通过消费组的方式来实消息 P2P 模式和广播模式。</li>\\n<li>Broker：服务代理节点。Broker 是 Kafka 的服务节点，即 Kafka 的服务器。</li>\\n<li>Topic：Kafka 中的消息以 Topic 为单位进行划分，生产者将消息发送到特定的 Topic，而消费者负责订阅 Topic 的消息并进行消费。</li>\\n<li>Partition：Topic 是一个逻辑的概念，它可以细分为多个分区，每个分区只属于单个主题。同一个主题下不同分区包含的消息是不同的，分区在存储层面可以看作一个可追加的日志（Log）文件，消息在被追加到分区日志文件的时候都会分配一个特定的偏移量 offset）。</li>\\n<li>Offset：offset 是消息在分区中的唯一标识，Kafka 通过它来保证消息在分区内的顺序性，不过 offset 并不跨越分区，也就是说，Kafka 保证的是分区有序性而不是主题有序性。</li>\\n<li>Replication：副本，是 Kafka 保证数据高可用的方式，Kafka 同一 Partition 的数据可以在多 Broker 上存在多个副本，通常只有主副本对外提供读写服务，当主副本所在 broker 崩溃或发生网络异常，Kafka 会在 Controller 的管理下会重新选择新的 Leader 副对外提供读写服务。</li>\\n<li>Record：实际写入 Kafka 中并可以被读取的消息记录。每个 record 包含了 key、value 和 timestamp。</li>\\n</ul>","autoDesc":true}`);export{e as data};

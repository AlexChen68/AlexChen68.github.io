const e=JSON.parse(`{"key":"v-4a6fe572","path":"/java/concurrency/principle/cas.html","title":"CAS 与原子操作","lang":"zh-CN","frontmatter":{"title":"CAS 与原子操作","category":"Concurrency","date":"2023-03-17T00:00:00.000Z","description":"乐观锁与悲观锁的概念 锁可以从不同的角度分类。其中，乐观锁和悲观锁是一种分类方式。 悲观锁： 悲观锁就是我们常说的锁。对于悲观锁来说，它总是认为每次访问共享资源时会发生冲突，所以必须对每次数据操作加上锁，以保证临界区的程序同一时间只能有一个线程在执行。 乐观锁： 乐观锁又称为“无锁”，顾名思义，它是乐观派。乐观锁总是假设对共享资源的访问没有冲突，线程可以不停地执行，无需加锁也无需等待。而一旦多个线程发生冲突，乐观锁通常是使用一种称为 CAS 的技术来保证线程执行的安全性。","head":[["meta",{"property":"og:url","content":"https://github.com/AlexChen68/AlexChen68.github.io/java/concurrency/principle/cas.html"}],["meta",{"property":"og:site_name","content":"AlexChen's Blog"}],["meta",{"property":"og:title","content":"CAS 与原子操作"}],["meta",{"property":"og:description","content":"乐观锁与悲观锁的概念 锁可以从不同的角度分类。其中，乐观锁和悲观锁是一种分类方式。 悲观锁： 悲观锁就是我们常说的锁。对于悲观锁来说，它总是认为每次访问共享资源时会发生冲突，所以必须对每次数据操作加上锁，以保证临界区的程序同一时间只能有一个线程在执行。 乐观锁： 乐观锁又称为“无锁”，顾名思义，它是乐观派。乐观锁总是假设对共享资源的访问没有冲突，线程可以不停地执行，无需加锁也无需等待。而一旦多个线程发生冲突，乐观锁通常是使用一种称为 CAS 的技术来保证线程执行的安全性。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-01T09:07:24.000Z"}],["meta",{"property":"article:author","content":"AlexChen"}],["meta",{"property":"article:published_time","content":"2023-03-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-01T09:07:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"CAS 与原子操作\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-17T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-01T09:07:24.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AlexChen\\",\\"url\\":\\"https://github.com/AlexChen68\\"}]}"]]},"headers":[{"level":2,"title":"乐观锁与悲观锁的概念","slug":"乐观锁与悲观锁的概念","link":"#乐观锁与悲观锁的概念","children":[]},{"level":2,"title":"CAS 的概念","slug":"cas-的概念","link":"#cas-的概念","children":[]},{"level":2,"title":"Java 实现 CAS 的原理 - Unsafe 类","slug":"java-实现-cas-的原理-unsafe-类","link":"#java-实现-cas-的原理-unsafe-类","children":[]},{"level":2,"title":"原子操作-AtomicInteger 类源码简析","slug":"原子操作-atomicinteger-类源码简析","link":"#原子操作-atomicinteger-类源码简析","children":[]},{"level":2,"title":"CAS 实现原子操作的三大问题","slug":"cas-实现原子操作的三大问题","link":"#cas-实现原子操作的三大问题","children":[{"level":3,"title":"ABA 问题","slug":"aba-问题","link":"#aba-问题","children":[]},{"level":3,"title":"循环时间长开销大","slug":"循环时间长开销大","link":"#循环时间长开销大","children":[]},{"level":3,"title":"只能保证一个共享变量的原子操作","slug":"只能保证一个共享变量的原子操作","link":"#只能保证一个共享变量的原子操作","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1680340044000,"updatedTime":1680340044000,"contributors":[{"name":"alexchen","email":"1274812218@qq.com","commits":1}]},"readingTime":{"minutes":9.18,"words":2753},"filePathRelative":"java/concurrency/principle/cas.md","localizedDate":"2023年3月17日","excerpt":"<h2> 乐观锁与悲观锁的概念</h2>\\n<p>锁可以从不同的角度分类。其中，乐观锁和悲观锁是一种分类方式。</p>\\n<p><strong>悲观锁：</strong></p>\\n<p>悲观锁就是我们常说的锁。对于悲观锁来说，它总是认为每次访问共享资源时会发生冲突，所以必须对每次数据操作加上锁，以保证临界区的程序同一时间只能有一个线程在执行。</p>\\n<p><strong>乐观锁：</strong></p>\\n<p>乐观锁又称为“无锁”，顾名思义，它是乐观派。乐观锁总是假设对共享资源的访问没有冲突，线程可以不停地执行，无需加锁也无需等待。而一旦多个线程发生冲突，乐观锁通常是使用一种称为 CAS 的技术来保证线程执行的安全性。</p>","autoDesc":true}`);export{e as data};

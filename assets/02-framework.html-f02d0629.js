const e=JSON.parse(`{"key":"v-4d974860","path":"/devops/docker/02-framework.html","title":"Docker 架构","lang":"zh-CN","frontmatter":{"title":"Docker 架构","category":"Docker","date":"2023-01-28T00:00:00.000Z","description":"Docker 架构 基本概念 Docker 包含三个基本概念： 镜像：Docker 镜像（Image），就相当于是一个 root 文件系统。 容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 仓库（Repository）：仓库可看着一个代码控制中心，用来保存镜像。","head":[["meta",{"property":"og:url","content":"https://github.com/AlexChen68/AlexChen68.github.io/devops/docker/02-framework.html"}],["meta",{"property":"og:site_name","content":"AlexChen's Blog"}],["meta",{"property":"og:title","content":"Docker 架构"}],["meta",{"property":"og:description","content":"Docker 架构 基本概念 Docker 包含三个基本概念： 镜像：Docker 镜像（Image），就相当于是一个 root 文件系统。 容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 仓库（Repository）：仓库可看着一个代码控制中心，用来保存镜像。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-04-13T11:38:25.000Z"}],["meta",{"property":"article:author","content":"AlexChen"}],["meta",{"property":"article:published_time","content":"2023-01-28T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-04-13T11:38:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Docker 架构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-01-28T00:00:00.000Z\\",\\"dateModified\\":\\"2023-04-13T11:38:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AlexChen\\",\\"url\\":\\"https://github.com/AlexChen68\\"}]}"]]},"headers":[{"level":2,"title":"Docker 架构","slug":"docker-架构","link":"#docker-架构","children":[{"level":3,"title":"镜像（Image）","slug":"镜像-image","link":"#镜像-image","children":[]},{"level":3,"title":"容器（Container）","slug":"容器-container","link":"#容器-container","children":[]},{"level":3,"title":"仓库（Repository）","slug":"仓库-repository","link":"#仓库-repository","children":[]}]}],"git":{"createdTime":1681385905000,"updatedTime":1681385905000,"contributors":[{"name":"alexchen68","email":"1274812218@qq.com","commits":1}]},"readingTime":{"minutes":5.71,"words":1712},"filePathRelative":"devops/docker/02-framework.md","localizedDate":"2023年1月28日","excerpt":"<h2> Docker 架构</h2>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">基本概念</p>\\n<p>Docker 包含三个基本概念：</p>\\n<ul>\\n<li>\\n<p><strong>镜像</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。</p>\\n</li>\\n<li>\\n<p><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>\\n</li>\\n<li>\\n<p><strong>仓库（Repository）</strong>：仓库可看着一个代码控制中心，用来保存镜像。</p>\\n</li>\\n</ul>\\n</div>","autoDesc":true}`);export{e as data};

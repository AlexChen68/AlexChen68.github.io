const e=JSON.parse(`{"key":"v-8ded9d8e","path":"/java/basic/reflection.html","title":"Java 反射机制","lang":"zh-CN","frontmatter":{"title":"Java 反射机制","order":6,"category":"Java","date":"2023-04-13T00:00:00.000Z","description":"Java 反射机制简介 反射 (Reflection)，是指 Java 程序具有在运行期分析类以及修改其本身状态或行为的能力。 通俗点说就是：通过反射我们可以动态地获取一个类的所有属性和方法，还可以操作这些方法和属性。 类加载机制 一个类从被加载到虚拟机内存中开始，到从内存中卸载，整个生命周期需要经过七个阶段：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading），其中验证、准备、解析三个部分统称为连接（Linking）。","head":[["meta",{"property":"og:url","content":"https://github.com/AlexChen68/AlexChen68.github.io/java/basic/reflection.html"}],["meta",{"property":"og:site_name","content":"AlexChen's Blog"}],["meta",{"property":"og:title","content":"Java 反射机制"}],["meta",{"property":"og:description","content":"Java 反射机制简介 反射 (Reflection)，是指 Java 程序具有在运行期分析类以及修改其本身状态或行为的能力。 通俗点说就是：通过反射我们可以动态地获取一个类的所有属性和方法，还可以操作这些方法和属性。 类加载机制 一个类从被加载到虚拟机内存中开始，到从内存中卸载，整个生命周期需要经过七个阶段：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading），其中验证、准备、解析三个部分统称为连接（Linking）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-02T19:58:12.000Z"}],["meta",{"property":"article:author","content":"AlexChen"}],["meta",{"property":"article:published_time","content":"2023-04-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-02T19:58:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 反射机制\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-04-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-02T19:58:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AlexChen\\",\\"url\\":\\"https://github.com/AlexChen68\\"}]}"]]},"headers":[{"level":2,"title":"Java 反射机制简介","slug":"java-反射机制简介","link":"#java-反射机制简介","children":[]},{"level":2,"title":"类加载机制","slug":"类加载机制","link":"#类加载机制","children":[]},{"level":2,"title":"反射相关的类","slug":"反射相关的类","link":"#反射相关的类","children":[{"level":3,"title":"Class 类","slug":"class-类","link":"#class-类","children":[]},{"level":3,"title":"Constructor 类","slug":"constructor-类","link":"#constructor-类","children":[]},{"level":3,"title":"Field 类","slug":"field-类","link":"#field-类","children":[]},{"level":3,"title":"Method 类","slug":"method-类","link":"#method-类","children":[]},{"level":3,"title":"反射机制执行流程","slug":"反射机制执行流程","link":"#反射机制执行流程","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1681385905000,"updatedTime":1685735892000,"contributors":[{"name":"alexchen68","email":"1274812218@qq.com","commits":2},{"name":"alexchen","email":"1274812218@qq.com","commits":1}]},"readingTime":{"minutes":6.54,"words":1962},"filePathRelative":"java/basic/reflection.md","localizedDate":"2023年4月13日","excerpt":"<h2> Java 反射机制简介</h2>\\n<p>反射 (Reflection)，是指 Java 程序具有在<em>运行期</em><strong>分析类以及修改其本身状态或行为的能力</strong>。\\n通俗点说就是：通过反射我们可以动态地获取一个类的所有属性和方法，还可以操作这些方法和属性。</p>\\n<h2> 类加载机制</h2>\\n<p>一个类从被加载到虚拟机内存中开始，到从内存中卸载，整个生命周期需要经过七个阶段：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading），其中验证、准备、解析三个部分统称为连接（Linking）。</p>","autoDesc":true}`);export{e as data};

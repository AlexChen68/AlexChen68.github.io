import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.01af844e.js";const d=JSON.parse('{"title":"单元测试 - JUnit4","description":"","frontmatter":{"title":"单元测试 - JUnit4","date":"2023-02-21T00:00:00.000Z"},"headers":[],"relativePath":"devops/test/junit4.md","filePath":"devops/test/junit4.md","lastUpdated":1700132966000}'),p={name:"devops/test/junit4.md"},e=l(`<p>JUint 是 Java 编程语言的单元测试框架，用于编写和运行可重复的自动化测试。</p><p>本文主要介绍 JUnit4 的注解及其使用案例。</p><h2 id="什么是-junit" tabindex="-1">什么是 JUnit？ <a class="header-anchor" href="#什么是-junit" aria-label="Permalink to &quot;什么是 JUnit？&quot;">​</a></h2><p>JUint 是 Java 编程语言的单元测试框架，用于编写和运行可重复的自动化测试。</p><h2 id="junit-特点" tabindex="-1">JUnit 特点？ <a class="header-anchor" href="#junit-特点" aria-label="Permalink to &quot;JUnit 特点？&quot;">​</a></h2><p>JUnit 是一个开放的资源框架，用于编写和运行测试。</p><p>提供注解来识别测试方法。提供断言来测试预期结果。JUnit 测试允许你编写代码更快，并能提高质量。JUnit 优雅简洁。没那么复杂，花费时间较少。JUnit测试可以自动运行并且检查自身结果并提供即时反馈。所以也没有必要人工梳理测试结果的报告。JUnit测试可以被组织为测试套件，包含测试用例，甚至其他的测试套件。JUnit在一个条中显示进度。如果运行良好则是绿色；如果运行失败，则变成红色。</p><h2 id="常用注解介绍" tabindex="-1">常用注解介绍 <a class="header-anchor" href="#常用注解介绍" aria-label="Permalink to &quot;常用注解介绍&quot;">​</a></h2><h3 id="test" tabindex="-1">@Test <a class="header-anchor" href="#test" aria-label="Permalink to &quot;@Test&quot;">​</a></h3><p>定义被标注的方法是一个测试方法，即需要测试。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>测试方法必须是public void，即公共、无返回数据。可以抛出异常（方法的预期可以是异常）。</p></div><p><strong>指定超时时间</strong>：方法执行超过这个时间，则会测试失败。例如：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">timeout</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testCase1</span><span style="color:#E1E4E8;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    TimeUnit.SECONDS.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;in timeout exception&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">timeout</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testCase1</span><span style="color:#24292E;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">    TimeUnit.SECONDS.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;in timeout exception&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>预期返回异常</strong>：抛出指定的异常，测试通过；否则失败。例如：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">expected</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ArithmeticException.class)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exceptionTest</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;in exception success test&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> a;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">expected</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ArithmeticException.class)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exceptionTest</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;in exception success test&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> a;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="ignore" tabindex="-1">@Ignore <a class="header-anchor" href="#ignore" aria-label="Permalink to &quot;@Ignore&quot;">​</a></h3><p>执行单元测试时，会忽略使用该注解标注的方法；在运行结果中，junit会统计忽略的用例数，来提醒你。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果和 @Test 一起使用，会失效，即会加入单元测试中。</p></div><h3 id="beforeclass" tabindex="-1">@BeforeClass <a class="header-anchor" href="#beforeclass" aria-label="Permalink to &quot;@BeforeClass&quot;">​</a></h3><p>使用 @BeforeClass 标注的方法，会在其他测试方法执行前执行，通常用来做测试前的初始化操作；</p><p>在一次完整的单元测试生命周期中，<strong>只会运行一次这个方法</strong>，因此这个方法必须使用 <code>public static void</code> 修饰。</p><h3 id="afterclass" tabindex="-1">@AfterClass <a class="header-anchor" href="#afterclass" aria-label="Permalink to &quot;@AfterClass&quot;">​</a></h3><p>与 @BeforeClass 类似，不过是在其他测试方法执行后执行，通常用于处理一些测试后续工作，例如清理数据，恢复现场；</p><p>同样，在一次完整的单元测试生命周期中，<strong>只会运行一次这个方法</strong>，因此这个方法必须使用 <code>public static void</code> 修饰。</p><h3 id="before" tabindex="-1">@Before <a class="header-anchor" href="#before" aria-label="Permalink to &quot;@Before&quot;">​</a></h3><p>@Before 与 @BeforeClass 类似但不同，它会在<strong>每一个</strong>测试用例方法执行<strong>前</strong>都执行一遍，主要用于一些独立于用例之间的准备工作；</p><p>因此这个方法必须使用 <code>public void</code> 修饰，且不能使用 <code>static</code> 修饰。</p><h3 id="after" tabindex="-1">@After <a class="header-anchor" href="#after" aria-label="Permalink to &quot;@After&quot;">​</a></h3><p>@After 与 @AfterClass 类似但不同，它会在<strong>每一个</strong>测试用例方法执行<strong>后</strong>都执行一遍，主要用于一些独立于用例之间的清理工作；</p><p>因此这个方法必须使用 <code>public void</code> 修饰，且不能使用 <code>static</code> 修饰。</p><h3 id="runwith" tabindex="-1">@Runwith <a class="header-anchor" href="#runwith" aria-label="Permalink to &quot;@Runwith&quot;">​</a></h3><p>@Runwith 需要放在测试类名之前，通过指定<strong>测试运行器</strong>用来指定单元测试的运行环境，确定这个类怎么运行的，默认使用 <code>JUnit4.class</code>，常见的测试运行器如下：</p><ol><li>@RunWith(Parameterized.class) 参数化运行器，配合 <code>@Parameters</code> 使用 junit 的参数化功能；</li><li>@RunWith(Suite.class) @SuiteClasses({ATest.class,BTest.class,CTest.class}) 测试集运行器配合使用测试集功能；</li><li>@RunWith(JUnit4.class) junit4的默认运行器</li><li>@RunWith(JUnit38ClassRunner.class) 用于兼容junit3.8的运行器</li><li>一些其它运行器具备更多功能。例如@RunWith(SpringJUnit4ClassRunner.class)集成了spring的一些功能</li></ol><h3 id="parameters" tabindex="-1">@Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;@Parameters&quot;">​</a></h3><p>当使用 <code>@RunWith(Parameterized.class)</code> 标注测试类使用参数化运行器时，需要通过 <code>@Parameters</code> 指定参数列表方法， 该方法必须是一个使用 <code>public static</code> 修饰，返回类型为集合的无参方法，返回的集合为需要进行的测试数据列表。</p><p>例如：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Parameterized</span><span style="color:#E1E4E8;">.Parameters</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Collection </span><span style="color:#B392F0;">primeNumbers</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Object</span><span style="color:#E1E4E8;">[][]{</span></span>
<span class="line"><span style="color:#E1E4E8;">            {</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">            {</span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">            {</span><span style="color:#79B8FF;">19</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">            {</span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">            {</span><span style="color:#79B8FF;">23</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Parameterized</span><span style="color:#24292E;">.Parameters</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Collection </span><span style="color:#6F42C1;">primeNumbers</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Object</span><span style="color:#24292E;">[][]{</span></span>
<span class="line"><span style="color:#24292E;">            {</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">            {</span><span style="color:#005CC5;">6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">            {</span><span style="color:#005CC5;">19</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">            {</span><span style="color:#005CC5;">22</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">            {</span><span style="color:#005CC5;">23</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">    });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>完整代码: <a href="https://github.com/AlexChen68/daydayup/blob/main/junit4/src/test/java/PrimeNumberCheckerTest.java" target="_blank" rel="noreferrer">Click Here</a></p><h2 id="编写单元测试" tabindex="-1">编写单元测试 <a class="header-anchor" href="#编写单元测试" aria-label="Permalink to &quot;编写单元测试&quot;">​</a></h2><h3 id="maven-依赖" tabindex="-1">Maven 依赖 <a class="header-anchor" href="#maven-依赖" aria-label="Permalink to &quot;Maven 依赖&quot;">​</a></h3><p>JUint 主要通过注解的形式，指定需要测试类运行环境、测试的方法，并提供断言工具来判断是否符合预期。</p><p>其 Maven 依赖：</p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;junit&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;junit&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;4.13.2&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;test&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;junit&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;junit&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;4.13.2&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;test&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h3><p>由上述注解，我们知道了各类注解的作用，使用一个案例可以清晰的看出他们的执行顺序：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">BeforeClass</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">beforeClass</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;in before class&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AfterClass</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">afterClass</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;in after class&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Before</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">before</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;in before&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">After</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">after</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;in after&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testCase1</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;in test case 1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testCase2</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;in test case 2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">BeforeClass</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">beforeClass</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;in before class&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AfterClass</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">afterClass</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;in after class&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Before</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">before</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;in before&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">After</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">after</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;in after&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testCase1</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;in test case 1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testCase2</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;in test case 2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>执行结果：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">in before class</span></span>
<span class="line"><span style="color:#E1E4E8;">in before</span></span>
<span class="line"><span style="color:#E1E4E8;">in test </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#E1E4E8;">in after</span></span>
<span class="line"><span style="color:#E1E4E8;">in before</span></span>
<span class="line"><span style="color:#E1E4E8;">in test </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">in after</span></span>
<span class="line"><span style="color:#E1E4E8;">in after class</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">in before class</span></span>
<span class="line"><span style="color:#24292E;">in before</span></span>
<span class="line"><span style="color:#24292E;">in test </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#24292E;">in after</span></span>
<span class="line"><span style="color:#24292E;">in before</span></span>
<span class="line"><span style="color:#24292E;">in test </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">in after</span></span>
<span class="line"><span style="color:#24292E;">in after class</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>由结果可以看出，@BeforeClass 和 @AfterClass 只会执行一次，分别在最开始和最后执行；</p><p>@Before 和 @After 会在每个用 @Test 标注的方法前后执行一次。</p><h3 id="断言测试" tabindex="-1">断言测试 <a class="header-anchor" href="#断言测试" aria-label="Permalink to &quot;断言测试&quot;">​</a></h3><p>JUnit 提供了一系列断言方法在 <code>org.junit.Assert</code> 中，当断言成立时，测试通过，否则失败。</p><p>例如，断言一个布尔值：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testAssertTrue</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 断言结果为 true，否则抛出 java.lang.AssertionError 异常，并展示错误信息 &quot;failure - should be true&quot;，测试未通过</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertTrue</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failure - should be true&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testAssertFalse</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertFalse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failure - should be false&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testAssertTrue</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 断言结果为 true，否则抛出 java.lang.AssertionError 异常，并展示错误信息 &quot;failure - should be true&quot;，测试未通过</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertTrue</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failure - should be true&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testAssertFalse</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertFalse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failure - should be false&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>断言是否为 null：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testAssertNull</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertNull</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;should be null&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testAssertNotNull</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertNotNull</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;should not be null&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Object</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testAssertNull</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertNull</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;should be null&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testAssertNotNull</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertNotNull</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;should not be null&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Object</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>断言数组相等：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testAssertArrayEquals</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] expected </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;trial&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">[] actual </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;trial&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getBytes</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">assertArrayEquals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failure - byte arrays not same&quot;</span><span style="color:#E1E4E8;">, expected, actual);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testAssertArrayEquals</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] expected </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;trial&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">[] actual </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;trial&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">getBytes</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">assertArrayEquals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failure - byte arrays not same&quot;</span><span style="color:#24292E;">, expected, actual);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>更多案例: <a href="https://github.com/junit-team/junit4/wiki/Assertions" target="_blank" rel="noreferrer">Click Here</a></p><h3 id="超时测试" tabindex="-1">超时测试 <a class="header-anchor" href="#超时测试" aria-label="Permalink to &quot;超时测试&quot;">​</a></h3><p>如果一个测试的运行时间过长时，我们可以认为其测试未通过，因此需要一种方式来指定测试最多可以执行多长时间；</p><p>JUnit 可以在 <code>@Test</code> 注解中，设置 <code>timeout</code> 属性指定单个测试方法超时时间，例如：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">timeout</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testCase1</span><span style="color:#E1E4E8;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    TimeUnit.SECONDS.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;in timeout exception&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">timeout</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testCase1</span><span style="color:#24292E;">() throws InterruptedException {</span></span>
<span class="line"><span style="color:#24292E;">    TimeUnit.SECONDS.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;in timeout exception&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>执行结果（未通过）：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">org.junit.runners.model.TestTimedOutException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> test timed out after </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;"> milliseconds</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	at java.lang.Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(Native Method)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.lang.Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(Thread.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">342</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.util.concurrent.TimeUnit.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(TimeUnit.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">386</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at TimeoutTest.</span><span style="color:#B392F0;">testCase1</span><span style="color:#E1E4E8;">(TimeoutTest.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">13</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">org.junit.runners.model.TestTimedOutException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> test timed out after </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;"> milliseconds</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	at java.lang.Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(Native Method)</span></span>
<span class="line"><span style="color:#24292E;">	at java.lang.Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(Thread.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">342</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at java.util.concurrent.TimeUnit.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(TimeUnit.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">386</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at TimeoutTest.</span><span style="color:#6F42C1;">testCase1</span><span style="color:#24292E;">(TimeoutTest.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">13</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>如果有很多测试方法，一个个地指定超时时间很麻烦，而且不好修改，此时可以通过设定<strong>超时规则</strong>，并应用到测试类的所有测试用例。</p><p>看看下面的例子：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> CountDownLatch latch </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CountDownLatch</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Rule</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Timeout globalTimeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Timeout.</span><span style="color:#B392F0;">seconds</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 3 seconds max per method tested</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testSleepForTooLong</span><span style="color:#E1E4E8;">() throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    TimeUnit.SECONDS.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// sleep for 5 seconds</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testBlockForever</span><span style="color:#E1E4E8;">() throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    latch.</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// will block</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> CountDownLatch latch </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CountDownLatch</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Rule</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Timeout globalTimeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Timeout.</span><span style="color:#6F42C1;">seconds</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 3 seconds max per method tested</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testSleepForTooLong</span><span style="color:#24292E;">() throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    TimeUnit.SECONDS.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// sleep for 5 seconds</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testBlockForever</span><span style="color:#24292E;">() throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    latch.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">(); </span><span style="color:#6A737D;">// will block</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>执行结果：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">org.junit.runners.model.TestTimedOutException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> test timed out after </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> seconds</span></span>
<span class="line"><span style="color:#E1E4E8;">	at sun.misc.Unsafe.</span><span style="color:#B392F0;">park</span><span style="color:#E1E4E8;">(Native Method)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.util.concurrent.locks.LockSupport.</span><span style="color:#B392F0;">park</span><span style="color:#E1E4E8;">(LockSupport.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">175</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.util.concurrent.locks.AbstractQueuedSynchronizer.</span><span style="color:#B392F0;">parkAndCheckInterrupt</span><span style="color:#E1E4E8;">(AbstractQueuedSynchronizer.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">836</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.util.concurrent.locks.AbstractQueuedSynchronizer.</span><span style="color:#B392F0;">doAcquireSharedInterruptibly</span><span style="color:#E1E4E8;">(AbstractQueuedSynchronizer.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">997</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.util.concurrent.locks.AbstractQueuedSynchronizer.</span><span style="color:#B392F0;">acquireSharedInterruptibly</span><span style="color:#E1E4E8;">(AbstractQueuedSynchronizer.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">1304</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.util.concurrent.CountDownLatch.</span><span style="color:#B392F0;">await</span><span style="color:#E1E4E8;">(CountDownLatch.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">231</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at HasGlobalTimeoutTest.</span><span style="color:#B392F0;">testBlockForever</span><span style="color:#E1E4E8;">(HasGlobalTimeoutTest.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">27</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">org.junit.runners.model.TestTimedOutException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> test timed out after </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;"> seconds</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.lang.Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(Native Method)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.lang.Thread.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(Thread.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">342</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at java.util.concurrent.TimeUnit.</span><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(TimeUnit.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">386</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at HasGlobalTimeoutTest.</span><span style="color:#B392F0;">testSleepForTooLong</span><span style="color:#E1E4E8;">(HasGlobalTimeoutTest.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">22</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">org.junit.runners.model.TestTimedOutException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> test timed out after </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> seconds</span></span>
<span class="line"><span style="color:#24292E;">	at sun.misc.Unsafe.</span><span style="color:#6F42C1;">park</span><span style="color:#24292E;">(Native Method)</span></span>
<span class="line"><span style="color:#24292E;">	at java.util.concurrent.locks.LockSupport.</span><span style="color:#6F42C1;">park</span><span style="color:#24292E;">(LockSupport.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">175</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at java.util.concurrent.locks.AbstractQueuedSynchronizer.</span><span style="color:#6F42C1;">parkAndCheckInterrupt</span><span style="color:#24292E;">(AbstractQueuedSynchronizer.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">836</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at java.util.concurrent.locks.AbstractQueuedSynchronizer.</span><span style="color:#6F42C1;">doAcquireSharedInterruptibly</span><span style="color:#24292E;">(AbstractQueuedSynchronizer.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">997</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at java.util.concurrent.locks.AbstractQueuedSynchronizer.</span><span style="color:#6F42C1;">acquireSharedInterruptibly</span><span style="color:#24292E;">(AbstractQueuedSynchronizer.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">1304</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at java.util.concurrent.CountDownLatch.</span><span style="color:#6F42C1;">await</span><span style="color:#24292E;">(CountDownLatch.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">231</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at HasGlobalTimeoutTest.</span><span style="color:#6F42C1;">testBlockForever</span><span style="color:#24292E;">(HasGlobalTimeoutTest.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">27</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">org.junit.runners.model.TestTimedOutException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> test timed out after </span><span style="color:#005CC5;">3</span><span style="color:#24292E;"> seconds</span></span>
<span class="line"><span style="color:#24292E;">	at java.lang.Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(Native Method)</span></span>
<span class="line"><span style="color:#24292E;">	at java.lang.Thread.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(Thread.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">342</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at java.util.concurrent.TimeUnit.</span><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(TimeUnit.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">386</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at HasGlobalTimeoutTest.</span><span style="color:#6F42C1;">testSleepForTooLong</span><span style="color:#24292E;">(HasGlobalTimeoutTest.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">22</span><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>可以看到，两个测试方法都会在执行超过 3 秒时抛异常且未通过测试。</p><h3 id="套件测试" tabindex="-1">套件测试 <a class="header-anchor" href="#套件测试" aria-label="Permalink to &quot;套件测试&quot;">​</a></h3><p><strong>套件测试</strong>是指捆绑了几个单元测试用例并运行起来，在JUnit中，@RunWith 和 @Suite 这两个注解是用来运行套件测试。</p><p>我们来试一下，先创建两个测试类，然后在第三个测试类中，使用 @RunWith 和 @Suite 同时运行这两个测试类：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// JunitTest1.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JunitTest1</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printMessage</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;in JunitTest1&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// JunitTest2.java</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JunitTest2</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printMessage</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;in JunitTest2&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// JunitSuiteTest.java</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RunWith</span><span style="color:#E1E4E8;">(Suite.class)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Suite.SuiteClasses</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        JunitTest1.class, </span><span style="color:#6A737D;">//此处类的配置顺序会影响执行顺序</span></span>
<span class="line"><span style="color:#E1E4E8;">        JunitTest2.class</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JunitSuiteTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 这里的 test 不会生效了</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">printMessage</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Suite Test&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// JunitTest1.java</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JunitTest1</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printMessage</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;in JunitTest1&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// JunitTest2.java</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JunitTest2</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printMessage</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;in JunitTest2&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// JunitSuiteTest.java</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RunWith</span><span style="color:#24292E;">(Suite.class)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Suite.SuiteClasses</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        JunitTest1.class, </span><span style="color:#6A737D;">//此处类的配置顺序会影响执行顺序</span></span>
<span class="line"><span style="color:#24292E;">        JunitTest2.class</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">JunitSuiteTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * 这里的 test 不会生效了</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">printMessage</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Suite Test&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>执行结果：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">in JunitTest1</span></span>
<span class="line"><span style="color:#E1E4E8;">in JunitTest2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">in JunitTest1</span></span>
<span class="line"><span style="color:#24292E;">in JunitTest2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>使用了 @Suite.SuiteClasses 注解的测试类，其本身被 @Test 标注的方法会失效，无法成为一个测试方法。</p></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://junit.org/junit4/" target="_blank" rel="noreferrer">JUnit4 官方文档</a></li><li><a href="https://pdai.tech/md/develop/ut/dev-ut-x-junit.html" target="_blank" rel="noreferrer">Java 全栈知识体系</a></li></ul>`,80),o=[e];function t(r,c,E,i,y,u){return n(),a("div",null,o)}const F=s(p,[["render",t]]);export{d as __pageData,F as default};

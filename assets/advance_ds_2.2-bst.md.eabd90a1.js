import{_ as e,o as r,c as t,Q as a}from"./chunks/framework.419948d5.js";const f=JSON.parse('{"title":"树 - 二叉搜索数树","description":"","frontmatter":{"title":"树 - 二叉搜索数树","date":"2023-04-26T00:00:00.000Z"},"headers":[],"relativePath":"advance/ds/2.2-bst.md","filePath":"advance/ds/2.2-bst.md","lastUpdated":1697770247000}'),l={name:"advance/ds/2.2-bst.md"},n=a('<h2 id="二叉搜索树-bst" tabindex="-1">二叉搜索树（BST） <a class="header-anchor" href="#二叉搜索树-bst" aria-label="Permalink to &quot;二叉搜索树（BST）&quot;">​</a></h2><p>前面介绍的树，都没有数值的，而二叉搜索树是有数值的了，二叉搜索树是一个有序树。二叉搜索树的定义：</p><blockquote><p>一棵二叉树，可以为空；如果不为空，满足以下性质：</p><ol><li>非空左子树的所有键值小于其根结点的键值；</li><li>非空右子树的所有键值大于其根结点的键值；</li><li>左、右子树都是二叉搜索树。</li></ol></blockquote><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/blog/advance/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%A4%BA%E4%BE%8B.png" alt="二叉搜索树示例"></p><p>二叉搜索树相比于其他数据结构的优势在于查找、插入的时间复杂度较低为 <em>O(logn)</em> 。</p><p>二叉搜索树是基础性数据结构，用于构建更为抽象的数据结构，如集合、多重集、关联数组等。</p><p>重要特性：</p><ol><li><em>二叉搜索树的中序遍历的结果是有序的</em>。</li><li>在二叉搜索树中搜索值时，可以利用有序的特性判断左右的方向，从而决定递归的方向。</li></ol><h2 id="相关算法题" tabindex="-1">相关算法题 <a class="header-anchor" href="#相关算法题" aria-label="Permalink to &quot;相关算法题&quot;">​</a></h2><ul><li>二叉搜索树 <ul><li><a href="https://leetcode.cn/problems/validate-binary-search-tree/" target="_blank" rel="noreferrer">098. 验证二叉搜索树</a></li><li><a href="https://leetcode.cn/problems/search-in-a-binary-search-tree/" target="_blank" rel="noreferrer">700. 二叉搜索树中的搜索</a></li><li><a href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/" target="_blank" rel="noreferrer">530. 二叉搜索树的最小绝对差</a></li><li><a href="https://leetcode.cn/problems/find-mode-in-binary-search-tree/" target="_blank" rel="noreferrer">501. 二叉搜索树中的众数</a></li><li><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/" target="_blank" rel="noreferrer">235. 二叉搜索树的最近公共祖先</a></li><li><a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/" target="_blank" rel="noreferrer">701. 二叉搜索树中的插入操作</a></li><li><a href="https://leetcode.cn/problems/delete-node-in-a-bst/" target="_blank" rel="noreferrer">450. 删除二叉搜索树中的节点</a></li><li><a href="https://leetcode.cn/problems/trim-a-binary-search-tree/" target="_blank" rel="noreferrer">669. 修剪二叉搜索树</a></li><li><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/" target="_blank" rel="noreferrer">108. 将有序数组转换为二叉搜索树</a></li><li><a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/" target="_blank" rel="noreferrer">538. 把二叉搜索树转换为累加树</a></li></ul></li></ul>',10),o=[n];function i(s,c,d,h,p,b){return r(),t("div",null,o)}const m=e(l,[["render",i]]);export{f as __pageData,m as default};

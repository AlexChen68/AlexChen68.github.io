import{_ as t,o as e,c as d,Q as r}from"./chunks/framework.01af844e.js";const b=JSON.parse('{"title":"正则表达式","description":"","frontmatter":{"title":"正则表达式","date":"2022-09-30T00:00:00.000Z","order":5},"headers":[],"relativePath":"devops/code/regex.md","filePath":"devops/code/regex.md","lastUpdated":1740013072000}'),a={name:"devops/code/regex.md"},o=r('<h1 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h1><h2 id="什么是正则表达式" tabindex="-1">什么是正则表达式？ <a class="header-anchor" href="#什么是正则表达式" aria-label="Permalink to &quot;什么是正则表达式？&quot;">​</a></h2><p>正则表达式是一组由字母和符号组成的特殊文本，它可以用来从文本中找出满足你想要的格式的句子。</p><p>一个正则表达式是一种从左到右匹配主体字符串的模式。 “Regular expression”这个词比较拗口，我们常使用缩写的术语“regex”或“regexp”。正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等。</p><h2 id="正则规则" tabindex="-1">正则规则 <a class="header-anchor" href="#正则规则" aria-label="Permalink to &quot;正则规则&quot;">​</a></h2><h3 id="元字符" tabindex="-1">元字符 <a class="header-anchor" href="#元字符" aria-label="Permalink to &quot;元字符&quot;">​</a></h3><p>正则表达式主要依赖于元字符。元字符不代表他们本身的字面意思，他们都有特殊的含义。一些元字符写在方括号中的时候有一些特殊的意思。以下是一些元字符的介绍：</p><table><thead><tr><th style="text-align:center;">元字符</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>.</code></td><td>句号匹配任意单个字符除了换行符。</td></tr><tr><td style="text-align:center;"><code>[ ]</code></td><td>字符种类。匹配方括号内的任意字符。</td></tr><tr><td style="text-align:center;"><code>[^ ]</code></td><td>否定的字符种类。匹配除了方括号里的任意字符</td></tr><tr><td style="text-align:center;"><code>*</code></td><td>匹配 &gt;=0 个重复的在 * 号之前的字符。</td></tr><tr><td style="text-align:center;"><code>+</code></td><td>匹配 &gt;=1 个重复的 + 号前的字符。</td></tr><tr><td style="text-align:center;"><code>?</code></td><td>标记？之前的字符为可选。</td></tr><tr><td style="text-align:center;"><code>{n,m}</code></td><td>匹配 num 个大括号之前的字符或字符集 (n &lt;= num &lt;= m).</td></tr><tr><td style="text-align:center;"><code>(xyz)</code></td><td>字符集，匹配与 xyz 完全相等的字符串。</td></tr><tr><td style="text-align:center;"><code>|</code></td><td>或运算符，匹配符号前或后的字符。</td></tr><tr><td style="text-align:center;"><code>/</code></td><td>转义字符，用于匹配一些保留的字符 <code>[ ] ( ) { } . * + ? ^ $ \\ |</code></td></tr><tr><td style="text-align:center;"><code>^</code></td><td>从开始行开始匹配。</td></tr><tr><td style="text-align:center;"><code>$</code></td><td>从末端开始匹配。</td></tr></tbody></table><h3 id="简写字符集" tabindex="-1">简写字符集 <a class="header-anchor" href="#简写字符集" aria-label="Permalink to &quot;简写字符集&quot;">​</a></h3><p>正则表达式提供一些常用的字符集简写。如下：</p><table><thead><tr><th style="text-align:center;">简写</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>.</code></td><td>除换行符外的所有字符</td></tr><tr><td style="text-align:center;"><code>\\w</code></td><td>匹配所有字母数字，等同于 <code>[a-zA-Z0-9_]</code></td></tr><tr><td style="text-align:center;"><code>\\W</code></td><td>匹配所有非字母数字，即符号，等同于： <code>[^\\w]</code></td></tr><tr><td style="text-align:center;"><code>\\d</code></td><td>匹配数字： <code>[0-9]</code></td></tr><tr><td style="text-align:center;"><code>\\D</code></td><td>匹配非数字： <code>[^\\d]</code></td></tr><tr><td style="text-align:center;"><code>\\s</code></td><td>匹配所有空格字符，等同于： <code>[\\t\\n\\f\\r\\p{Z}]</code></td></tr><tr><td style="text-align:center;"><code>\\S</code></td><td>匹配所有非空格字符： <code>[^\\s]</code></td></tr><tr><td style="text-align:center;"><code>\\f</code></td><td>匹配一个换页符</td></tr><tr><td style="text-align:center;"><code>\\n</code></td><td>匹配一个换行符</td></tr><tr><td style="text-align:center;"><code>\\r</code></td><td>匹配一个回车符</td></tr><tr><td style="text-align:center;"><code>\\t</code></td><td>匹配一个制表符</td></tr><tr><td style="text-align:center;"><code>\\v</code></td><td>匹配一个垂直制表符</td></tr><tr><td style="text-align:center;"><code>\\p</code></td><td>匹配 CR/LF（等同于 <code>\\r\\n</code>），用来匹配 DOS 行终止符</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>更多正则规则，可以参考：<a href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md" target="_blank" rel="noreferrer">https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md</a></p></div><h2 id="常用正则参考" tabindex="-1">常用正则参考 <a class="header-anchor" href="#常用正则参考" aria-label="Permalink to &quot;常用正则参考&quot;">​</a></h2><ul><li><a href="https://github.com/cdoco/common-regex" target="_blank" rel="noreferrer">common-regex</a>: 🎃 常用正则表达式 - 收集一些在平时项目开发中经常用到的正则表达式。</li></ul><h2 id="正则测试网站" tabindex="-1">正则测试网站 <a class="header-anchor" href="#正则测试网站" aria-label="Permalink to &quot;正则测试网站&quot;">​</a></h2><ul><li><a href="https://regex101.com/" target="_blank" rel="noreferrer">regex101</a></li></ul>',16),c=[o];function l(n,s,i,h,x,g){return e(),d("div",null,c)}const m=t(a,[["render",l]]);export{b as __pageData,m as default};

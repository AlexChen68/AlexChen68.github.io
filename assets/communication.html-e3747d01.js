const e=JSON.parse(`{"key":"v-7ce4340e","path":"/md/java/concurrency/basic/communication.html","title":"Java 线程间的通信","lang":"zh-CN","frontmatter":{"title":"Java 线程间的通信","category":"Concurrency","date":"2023-03-15T00:00:00.000Z","description":"合理的使用 Java 多线程可以更好地利用服务器资源。一般来讲，线程内部有自己私有的线程上下文，互不干扰。但是当我们需要多个线程之间相互协作的时候，就需要我们掌握 Java 线程的通信方式。本文将介绍 Java 线程之间的几种通信原理。 锁与同步 在 Java 中，锁的概念都是基于对象的，所以我们又经常称它为对象锁。线程和锁的关系，我们可以用婚姻关系来理解。一个锁同一时间只能被一个线程持有。也就是说，一个锁如果和一个线程“结婚”（持有），那其他线程如果需要得到这个锁，就得等这个线程和这个锁“离婚”（释放）。","head":[["meta",{"property":"og:url","content":"https://github.com/AlexChen68/AlexChen68.github.io/md/java/concurrency/basic/communication.html"}],["meta",{"property":"og:site_name","content":"AlexChen's Blog"}],["meta",{"property":"og:title","content":"Java 线程间的通信"}],["meta",{"property":"og:description","content":"合理的使用 Java 多线程可以更好地利用服务器资源。一般来讲，线程内部有自己私有的线程上下文，互不干扰。但是当我们需要多个线程之间相互协作的时候，就需要我们掌握 Java 线程的通信方式。本文将介绍 Java 线程之间的几种通信原理。 锁与同步 在 Java 中，锁的概念都是基于对象的，所以我们又经常称它为对象锁。线程和锁的关系，我们可以用婚姻关系来理解。一个锁同一时间只能被一个线程持有。也就是说，一个锁如果和一个线程“结婚”（持有），那其他线程如果需要得到这个锁，就得等这个线程和这个锁“离婚”（释放）。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-15T17:48:29.000Z"}],["meta",{"property":"article:published_time","content":"2023-03-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-15T17:48:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 线程间的通信\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-15T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-15T17:48:29.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"锁与同步","slug":"锁与同步","link":"#锁与同步","children":[]},{"level":2,"title":"等待/通知机制","slug":"等待-通知机制","link":"#等待-通知机制","children":[]},{"level":2,"title":"信号量","slug":"信号量","link":"#信号量","children":[]},{"level":2,"title":"管道","slug":"管道","link":"#管道","children":[]},{"level":2,"title":"其它通信相关","slug":"其它通信相关","link":"#其它通信相关","children":[{"level":3,"title":"join 方法","slug":"join-方法","link":"#join-方法","children":[]},{"level":3,"title":"sleep 方法","slug":"sleep-方法","link":"#sleep-方法","children":[]},{"level":3,"title":"ThreadLocal 类","slug":"threadlocal-类","link":"#threadlocal-类","children":[]},{"level":3,"title":"InheritableThreadLocal","slug":"inheritablethreadlocal","link":"#inheritablethreadlocal","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1678902509000,"updatedTime":1678902509000,"contributors":[{"name":"AlexChen","email":"1274812218@qq.com","commits":1}]},"readingTime":{"minutes":12.32,"words":3697},"filePathRelative":"md/java/concurrency/basic/communication.md","localizedDate":"2023年3月15日","excerpt":"<blockquote>\\n<p>合理的使用 Java 多线程可以更好地利用服务器资源。一般来讲，线程内部有自己私有的线程上下文，互不干扰。但是当我们需要多个线程之间相互协作的时候，就需要我们掌握 Java 线程的通信方式。本文将介绍 Java 线程之间的几种通信原理。</p>\\n</blockquote>\\n<h2> 锁与同步</h2>\\n<p>在 Java 中，锁的概念都是基于对象的，所以我们又经常称它为对象锁。线程和锁的关系，我们可以用婚姻关系来理解。一个锁同一时间只能被一个线程持有。也就是说，一个锁如果和一个线程“结婚”（持有），那其他线程如果需要得到这个锁，就得等这个线程和这个锁“离婚”（释放）。</p>","autoDesc":true}`);export{e as data};

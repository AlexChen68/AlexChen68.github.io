import{_ as t,W as p,X as e,Z as n,a0 as a,a1 as c,$ as o,G as l}from"./framework-3160f2a1.js";const i={},u={href:"http://www.iocoder.cn/Spring-Boot/Cache/",target:"_blank",rel:"noopener noreferrer"},k=o(`<h2 id="什么是-spring-cache" tabindex="-1"><a class="header-anchor" href="#什么是-spring-cache" aria-hidden="true">#</a> 什么是 Spring Cache？</h2><p>Spring 3.1 引入了激动人心的基于注释（annotation）的缓存（cache）技术，它本质上不是一个具体的缓存实现方案（例如 EHCache 或者 OSCache），而是一个对缓存使用的抽象，通过在既有代码中添加少量它定义的各种 annotation，即能够达到缓存方法的返回对象的效果。</p><p>Spring 的缓存技术还具备相当的灵活性，不仅能够使用 SpEL（Spring Expression Language）来定义缓存的 key 和各种 condition，还提供开箱即用的缓存临时存储方案，也支持和主流的专业缓存例如 EHCache 集成。</p><p>其特点总结如下：</p><ul><li>通过少量的配置 annotation 注释即可使得既有代码支持缓存；</li><li>支持开箱即用 Out-Of-The-Box，即不用安装和部署额外第三方组件即可使用缓存；</li><li>支持 Spring Express Language，能使用对象的任何属性或者方法来定义缓存的 key 和 condition；</li><li>支持 AspectJ，并通过其实现任何方法的缓存支持；</li><li>支持自定义 key 和自定义缓存管理者，具有相当的灵活性和扩展性。</li></ul><p>总的来说，它是一个基于 Spring 框架的 Cache 门面框架，我们可以使用它提供的注解来进行缓存的操作，而与缓存服务器的连接和操作由所配置的缓存客户端去实现。</p><h2 id="spring-cache-注解" tabindex="-1"><a class="header-anchor" href="#spring-cache-注解" aria-hidden="true">#</a> Spring Cache 注解</h2><p>在入门 Spring Cache 之前，我们先了解下其提供的所有注解：</p><ul><li>@Cacheable</li><li>@CachePut</li><li>@CacheEvict</li><li>@CacheConfig</li><li>@Caching</li><li>@EnableCaching</li></ul><h3 id="cacheable" tabindex="-1"><a class="header-anchor" href="#cacheable" aria-hidden="true">#</a> @Cacheable</h3><p>@Cacheable 注解，添加在方法上，缓存方法的执行结果。执行过程如下：</p><ol><li>首先，判断方法执行结果的缓存。如果有，则直接返回该缓存结果。</li><li>然后，执行方法，获得方法结果。</li><li>之后，根据是否满足缓存的条件。如果满足，则缓存方法结果到缓存。</li><li>最后，返回方法结果。</li></ol><p>@Cacheable 注解的常用属性，如下：</p><ul><li><p>cacheNames 属性：缓存名。必填。[] 数组，可以填写多个缓存名。</p></li><li><p>values 属性：和 cacheNames 属性相同，是它的别名。</p></li><li><p>key 属性：缓存的 key 。允许空。如果为空，则默认方法的所有参数进行组合。如果非空，则需要按照 SpEL(Spring Expression Language) 来配置。例如说，@Cacheable(value = &quot;users&quot;, key = &quot;#id&quot;) ，使用方法参数 id 的值作为缓存的 key 。</p></li><li><p>condition 属性：基于方法入参，判断要缓存的条件。允许空。如果为空，则不进行入参的判断。如果非空，则需要按照 SpEL(Spring Expression Language) 来配置。例如说，@Cacheable(condition=&quot;#id &gt; 0&quot;) ，需要传入的 id 大于零。</p></li><li><p>unless 属性：基于方法返回，判断不缓存的条件。允许空。如果为空，则不进行入参的判断。如果非空，则需要按照 SpEL(Spring Expression Language) 来配置。例如说，@Cacheable(unless=&quot;#result == null&quot;) ，如果返回结果为 null ，则不进行缓存。 要注意，condition 和 unless 都是条件属性，差别在于前者针对入参，后者针对结果。</p></li></ul><p>@Cacheable 注解的不常用属性，如下：</p><ul><li><p>keyGenerator 属性：自定义 key 生成器 KeyGenerator Bean 的名字。允许空。如果设置，则 key 失效。</p></li><li><p>cacheManager 属性：自定义缓存管理器 CacheManager Bean 的名字。允许空。一般不填写，除非有多个 CacheManager Bean 的情况下。</p></li><li><p>cacheResolver 属性：自定义缓存解析器 CacheResolver Bean 的名字。允许空。</p></li><li><p>sync 属性，在获得不到缓存的情况下，是否同步执行方法。默认为 false ，表示无需同步。如果设置为 true ，则执行方法时，会进行加锁，保证同一时刻，有且仅有一个方法在执行，其它线程阻塞等待。通过这样的方式，避免重复执行方法。注意，该功能的实现，需要参考第三方缓存的具体实现。</p></li></ul><h3 id="cacheput" tabindex="-1"><a class="header-anchor" href="#cacheput" aria-hidden="true">#</a> @CachePut</h3><p>@CachePut 注解，添加在方法上，缓存方法的执行结果。不同于 @Cacheable 注解，它的执行过程如下：</p><ol><li>首先，执行方法，获得方法结果。也就是说，无论是否有缓存，都会执行方法。</li><li>然后，根据是否满足缓存的条件。如果满足，则缓存方法结果到缓存。</li><li>最后，返回方法结果。 一般来说，使用方式如下：</li></ol><p>@Cacheable：搭配读操作，实现缓存的被动写。 @CachePut：配置写操作，实现缓存的主动写。 @Cacheable 注解的属性，和 @Cacheable 注解的属性，基本一致，只少一个 sync 属性。</p><h3 id="cacheevict" tabindex="-1"><a class="header-anchor" href="#cacheevict" aria-hidden="true">#</a> @CacheEvict</h3><p>@CacheEvict 注解，添加在方法上，删除缓存。</p><p>相比 @CachePut 注解，它额外多了两个属性：</p><ul><li><p>allEntries 属性，是否删除缓存名( cacheNames )下，所有 key 对应的缓存。默认为 false ，只删除指定 key 的缓存。</p></li><li><p>beforeInvocation 属性，是否在方法执行前删除缓存。默认为 false ，在方法执行后删除缓存。</p></li></ul><h3 id="cacheconfig" tabindex="-1"><a class="header-anchor" href="#cacheconfig" aria-hidden="true">#</a> @CacheConfig</h3><p>@CacheConfig 注解，添加在类上，共享如下四个属性的配置：</p><ul><li>cacheNames</li><li>keyGenerator</li><li>cacheManager</li><li>cacheResolver</li></ul><h3 id="caching" tabindex="-1"><a class="header-anchor" href="#caching" aria-hidden="true">#</a> @Caching</h3><p>@Caching 注解，添加在方法上，可以组合使用多个 @Cacheable、@CachePut、@CacheEvict 注解。不太常用，可以暂时忽略。</p><h3 id="enablecaching" tabindex="-1"><a class="header-anchor" href="#enablecaching" aria-hidden="true">#</a> @EnableCaching</h3><p><code>@EnableCaching</code> 注解，标记开启 Spring Cache 功能，所以一定要添加。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// EnableCaching.java</span>

<span class="token keyword">boolean</span> <span class="token function">proxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token class-name">AdviceMode</span> <span class="token function">mode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">AdviceMode</span><span class="token punctuation">.</span><span class="token constant">PROXY</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">LOWEST_PRECEDENCE</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-boot-中使用-spring-cache-门面" tabindex="-1"><a class="header-anchor" href="#spring-boot-中使用-spring-cache-门面" aria-hidden="true">#</a> Spring Boot 中使用 Spring Cache 门面</h2><p>在 Spring Boot 里，提供了 spring-boot-starter-cache 库，实现 Spring Cache 的自动化配置，通过 CacheAutoConfiguration 配置类。</p><p>Spring Cache Maven 依赖如下：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 实现对 Caches 的自动化配置 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Java 后端开发中，常见的缓存工具和框架列举如下：</p><ul><li><p>本地缓存：Guava LocalCache、Ehcache、Caffeine 。</p><p>Ehcache 的功能更加丰富，Caffeine 的性能要比 Guava LocalCache 好。</p></li><li><p>分布式缓存：Redis、Memcached、Tair 。</p><p>Redis 最为主流和常用。</p></li></ul><p>那么，在这些缓存方案当中，spring-boot-starter-cache 怎么知道使用哪种呢？在默认情况下，Spring Boot 会按照如下顺序，自动判断使用哪种缓存方案，创建对应的 CacheManager 缓存管理器。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// CacheConfigurations.java</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CacheType</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token constant">MAPPINGS</span><span class="token punctuation">;</span>

<span class="token keyword">static</span> <span class="token punctuation">{</span>
	<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CacheType</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> mappings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">CacheType</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CacheType</span><span class="token punctuation">.</span><span class="token constant">GENERIC</span><span class="token punctuation">,</span> <span class="token class-name">GenericCacheConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CacheType</span><span class="token punctuation">.</span><span class="token constant">EHCACHE</span><span class="token punctuation">,</span> <span class="token class-name">EhCacheCacheConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CacheType</span><span class="token punctuation">.</span><span class="token constant">HAZELCAST</span><span class="token punctuation">,</span> <span class="token class-name">HazelcastCacheConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CacheType</span><span class="token punctuation">.</span><span class="token constant">INFINISPAN</span><span class="token punctuation">,</span> <span class="token class-name">InfinispanCacheConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CacheType</span><span class="token punctuation">.</span><span class="token constant">JCACHE</span><span class="token punctuation">,</span> <span class="token class-name">JCacheCacheConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CacheType</span><span class="token punctuation">.</span><span class="token constant">COUCHBASE</span><span class="token punctuation">,</span> <span class="token class-name">CouchbaseCacheConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CacheType</span><span class="token punctuation">.</span><span class="token constant">REDIS</span><span class="token punctuation">,</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CacheType</span><span class="token punctuation">.</span><span class="token constant">CAFFEINE</span><span class="token punctuation">,</span> <span class="token class-name">CaffeineCacheConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CacheType</span><span class="token punctuation">.</span><span class="token constant">SIMPLE</span><span class="token punctuation">,</span> <span class="token class-name">SimpleCacheConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	mappings<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">CacheType</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">,</span> <span class="token class-name">NoOpCacheConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token constant">MAPPINGS</span> <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>mappings<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为自动判断可能和我们希望使用的缓存方案不同，此时我们可以手动配置 spring.cache.type 指定类型。</p><p>目前最常使用的是 Ehcache 本地缓存，和 Redis 分布式缓存。</p><p>Ehcache Maven 依赖：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- Ehcache 依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>net.sf.ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Redis Maven 依赖如下，Spring Boot 默认使用 lettuce 作为 Redis 客户端, 如果你想使用 Jedis，可以像下面这样替换：</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 去掉对 Lettuce 的依赖，因为 Spring Boot 优先使用 Lettuce 作为 Redis 客户端 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.lettuce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lettuce-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 引入 Jedis 的依赖，这样 Spring Boot 实现对 Jedis 的自动化配置 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前，Spring Data Redis 暂时只支持 Jedis、Lettuce 的内部封装，而 Redisson 是由 <code>redisson-spring-data</code> 来提供。</p>`,47);function d(r,g){const s=l("ExternalLinkIcon");return p(),e("div",null,[n("blockquote",null,[n("p",null,[a("摘要: 原创出处 "),n("a",u,[a("http://www.iocoder.cn/Spring-Boot/Cache/"),c(s)])])]),k])}const v=t(i,[["render",d],["__file","03-spring-cache.html.vue"]]);export{v as default};

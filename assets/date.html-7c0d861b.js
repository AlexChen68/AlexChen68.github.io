import{_ as e,W as a,X as o,a1 as d}from"./framework-ea95e8eb.js";const c={},t=d('<h2 id="_1-date-和-calendar" tabindex="-1"><a class="header-anchor" href="#_1-date-和-calendar" aria-hidden="true">#</a> 1. Date 和 Calendar</h2><p><code>java.util.Date</code> 与 <code>java.util.Calendar</code> 是 JDK 早期提供的日期工具，不过由于 API 设计混乱，吐槽的地方太多了。比如：</p><ul><li>在易用性方面有着很大的缺陷，年份的起始时间选择是 1900 年，月份是从 0 开始。</li><li>toString 方法返回值不直观，带有时区。</li><li>很多时间操作都需要 <code>SimpleDateTimeFormat</code> 来格式化。</li><li><code>java.util.Date</code> 与 <code>java.util.Calendar</code> 中的所有属性都是可变的。</li><li><code>SimpleDateTimeFormat</code> 是非线程安全。</li></ul><p>因此，从 JDK8 起，提供了新的日期工具包 <code>java.time</code> 来替换原来的日期工具。</p><h2 id="_2-java8-时间和日期" tabindex="-1"><a class="header-anchor" href="#_2-java8-时间和日期" aria-hidden="true">#</a> 2. Java8 时间和日期</h2><p>Java 8 仍然延用了 ISO 的日历体系，并且与它的前辈们不同，<code>java.time</code> 包中的类是不可变且线程安全的。新的时间及日期 API 位于 <code>java.time</code> 包中，下面是里面的一些关键的类：</p><ol><li><code>Instant</code>——它代表的是时间戳</li><li><code>LocalDate</code>——不包含具体时间的日期，比如 2014-01-14。它可以用来存储生日，周年纪念日，入职日期等。</li><li><code>LocalTime</code>——它代表的是不含日期的时间</li><li><code>LocalDateTime</code>——它包含了日期及时间，不过还是没有偏移信息或者说时区。</li><li><code>ZonedDateTime</code>——这是一个包含时区的完整的日期时间，偏移量是以 UTC/格林威治时间为基准的。</li></ol><p>新的库还增加了 ZoneOffset 及 Zoned，可以为时区提供更好的支持。有了新的 DateTimeFormatter 之后日期的解析及格式化也变得焕然一新了。</p>',8),i=[t];function l(r,n){return a(),o("div",null,i)}const s=e(c,[["render",l],["__file","date.html.vue"]]);export{s as default};

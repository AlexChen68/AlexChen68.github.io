const e=JSON.parse(`{"key":"v-bc9deba0","path":"/advance/algo/scenario/%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E5%8F%96%E5%89%8Dn%E4%B8%AA%E6%95%B0.html","title":"大数据量取前 n 个数","lang":"zh-CN","frontmatter":{"title":"大数据量取前 n 个数","category":"算法","date":"2023-05-13T00:00:00.000Z","description":"问题描述 如何在 1 亿个数中找出最大的 10000 个数？ 解决方法 1. 快速排序法 直接对所有数据进行快速排序，然后取前 10000 个数，时间复杂度为 O(nlongn)。 机器内存可以撑住，但是效率不高，不推荐使用。 2. 淘汰法 用一个 list 保存前 10000 个数字，然后遍历剩下的数字，如果某一个数字比容器中的最小值要大，就替换它。 从容器中找到最小值的时间复杂度是 O(10000)，替换一次之后，又需要重新找最小值；整体时间复杂度较高，不推荐使用。","head":[["meta",{"property":"og:url","content":"https://github.com/AlexChen68/AlexChen68.github.io/advance/algo/scenario/%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E5%8F%96%E5%89%8Dn%E4%B8%AA%E6%95%B0.html"}],["meta",{"property":"og:site_name","content":"AlexChen's Blog"}],["meta",{"property":"og:title","content":"大数据量取前 n 个数"}],["meta",{"property":"og:description","content":"问题描述 如何在 1 亿个数中找出最大的 10000 个数？ 解决方法 1. 快速排序法 直接对所有数据进行快速排序，然后取前 10000 个数，时间复杂度为 O(nlongn)。 机器内存可以撑住，但是效率不高，不推荐使用。 2. 淘汰法 用一个 list 保存前 10000 个数字，然后遍历剩下的数字，如果某一个数字比容器中的最小值要大，就替换它。 从容器中找到最小值的时间复杂度是 O(10000)，替换一次之后，又需要重新找最小值；整体时间复杂度较高，不推荐使用。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-13T14:29:06.000Z"}],["meta",{"property":"article:author","content":"AlexChen"}],["meta",{"property":"article:published_time","content":"2023-05-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-13T14:29:06.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"大数据量取前 n 个数\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-13T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-13T14:29:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AlexChen\\",\\"url\\":\\"https://github.com/AlexChen68\\"}]}"]]},"headers":[{"level":2,"title":"问题描述","slug":"问题描述","link":"#问题描述","children":[]},{"level":2,"title":"解决方法","slug":"解决方法","link":"#解决方法","children":[{"level":3,"title":"1. 快速排序法","slug":"_1-快速排序法","link":"#_1-快速排序法","children":[]},{"level":3,"title":"2. 淘汰法","slug":"_2-淘汰法","link":"#_2-淘汰法","children":[]},{"level":3,"title":"3. 分治法","slug":"_3-分治法","link":"#_3-分治法","children":[]},{"level":3,"title":"4. 堆排序","slug":"_4-堆排序","link":"#_4-堆排序","children":[]}]}],"git":{"createdTime":1683988146000,"updatedTime":1683988146000,"contributors":[{"name":"alexchen","email":"1274812218@qq.com","commits":1}]},"readingTime":{"minutes":1.43,"words":429},"filePathRelative":"advance/algo/scenario/大数据量取前n个数.md","localizedDate":"2023年5月13日","excerpt":"<h2> 问题描述</h2>\\n<blockquote>\\n<p>如何在 1 亿个数中找出最大的 10000 个数？</p>\\n</blockquote>\\n<h2> 解决方法</h2>\\n<h3> 1. 快速排序法</h3>\\n<p>直接对所有数据进行快速排序，然后取前 10000  个数，时间复杂度为 <em>O(nlong<sub>n</sub>)</em>。</p>\\n<p>机器内存可以撑住，但是效率不高，不推荐使用。</p>\\n<h3> 2. 淘汰法</h3>\\n<p>用一个 list 保存前 10000 个数字，然后遍历剩下的数字，如果某一个数字比容器中的最小值要大，就替换它。</p>\\n<p>从容器中找到最小值的时间复杂度是 <em>O(10000)</em>，替换一次之后，又需要重新找最小值；整体时间复杂度较高，不推荐使用。</p>","autoDesc":true}`);export{e as data};

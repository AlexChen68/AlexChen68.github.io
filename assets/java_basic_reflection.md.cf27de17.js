import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.01af844e.js";const b=JSON.parse('{"title":"Java 反射机制","description":"","frontmatter":{"title":"Java 反射机制","order":6,"date":"2023-04-13T00:00:00.000Z"},"headers":[],"relativePath":"java/basic/reflection.md","filePath":"java/basic/reflection.md","lastUpdated":1731900098000}'),p={name:"java/basic/reflection.md"},e=l(`<h2 id="java-反射机制简介" tabindex="-1">Java 反射机制简介 <a class="header-anchor" href="#java-反射机制简介" aria-label="Permalink to &quot;Java 反射机制简介&quot;">​</a></h2><p>反射 (Reflection)，是指 Java 程序具有在<em>运行期</em><strong>分析类以及修改其本身状态或行为的能力</strong>。 通俗点说就是：通过反射我们可以动态地获取一个类的所有属性和方法，还可以操作这些方法和属性。</p><h2 id="类加载机制" tabindex="-1">类加载机制 <a class="header-anchor" href="#类加载机制" aria-label="Permalink to &quot;类加载机制&quot;">​</a></h2><p>一个类从被加载到虚拟机内存中开始，到从内存中卸载，整个生命周期需要经过七个阶段：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading），其中验证、准备、解析三个部分统称为连接（Linking）。</p><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/blog/java/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.jpeg" alt="类加载过程"></p><p>更具体的，可以参考 <a href="./../jvm/classloader.html">JVM 类加载过程</a></p><h2 id="反射相关的类" tabindex="-1">反射相关的类 <a class="header-anchor" href="#反射相关的类" aria-label="Permalink to &quot;反射相关的类&quot;">​</a></h2><ul><li>Class 类</li><li>Field 类</li><li>Method 类</li><li>Constructor 类</li></ul><h3 id="class-类" tabindex="-1">Class 类 <a class="header-anchor" href="#class-类" aria-label="Permalink to &quot;Class 类&quot;">​</a></h3><p>Class 类，Class 类也是一个实实在在的类，存在于 JDK 的 java.lang 包中。</p><p>Class 类的实例表示 java 应用运行时的类 (class ans enum) 或接口 (interface and annotation)。</p><p>Class 类可以通过如下三种方式获得：</p><ol><li>类名.class</li><li>实例.getClass()</li><li>Class.forName(&quot;类名&quot;)</li></ol><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 方式一</span></span>
<span class="line"><span style="color:#E1E4E8;">Class&lt;</span><span style="color:#F97583;">ReflectDemo</span><span style="color:#E1E4E8;">&gt; clazz1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> ReflectDemo.class;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 方式二</span></span>
<span class="line"><span style="color:#E1E4E8;">ReflectDemo demo </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ReflectDemo</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">ReflectDemo</span><span style="color:#E1E4E8;">&gt; clazz2 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> demo.</span><span style="color:#B392F0;">getClass</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 方式三</span></span>
<span class="line"><span style="color:#E1E4E8;">Class&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; clazz3 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Class.</span><span style="color:#B392F0;">forName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tech.alexchen.java.basic.reflection.ReflectDemo&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 方式一</span></span>
<span class="line"><span style="color:#24292E;">Class&lt;</span><span style="color:#D73A49;">ReflectDemo</span><span style="color:#24292E;">&gt; clazz1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> ReflectDemo.class;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 方式二</span></span>
<span class="line"><span style="color:#24292E;">ReflectDemo demo </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ReflectDemo</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">ReflectDemo</span><span style="color:#24292E;">&gt; clazz2 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> demo.</span><span style="color:#6F42C1;">getClass</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 方式三</span></span>
<span class="line"><span style="color:#24292E;">Class&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; clazz3 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Class.</span><span style="color:#6F42C1;">forName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tech.alexchen.java.basic.reflection.ReflectDemo&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><strong>数组</strong>同样也被映射为 class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 Class 对象。</p><p><strong>基本类型</strong> boolean，byte，char，short，int，long，float，double 和关键字 void 同样表现为 class 对象。</p></div><p>Class 类定义：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Class</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> java.io.</span><span style="color:#B392F0;">Serializable</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                              </span><span style="color:#B392F0;">GenericDeclaration</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                              </span><span style="color:#B392F0;">Type</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                              </span><span style="color:#B392F0;">AnnotatedElement</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ANNOTATION</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x00002000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> ENUM      </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x00004000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> SYNTHETIC </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x00001000</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">native</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">registerNatives</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">registerNatives</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">     * Private constructor. Only the Java Virtual Machine creates Class objects.   //私有构造器，只有 JVM 才能调用创建 Class 对象</span></span>
<span class="line"><span style="color:#6A737D;">     * This constructor is not used and prevents the default constructor being</span></span>
<span class="line"><span style="color:#6A737D;">     * generated.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Class</span><span style="color:#E1E4E8;">(ClassLoader </span><span style="color:#FFAB70;">loader</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Initialize final field for classLoader.  The initialization value of non-null</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// prevents future JIT optimizations from assuming this final field is null.</span></span>
<span class="line"><span style="color:#E1E4E8;">        classLoader </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> loader;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Class</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> java.io.</span><span style="color:#6F42C1;">Serializable</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                              </span><span style="color:#6F42C1;">GenericDeclaration</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                              </span><span style="color:#6F42C1;">Type</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">                              </span><span style="color:#6F42C1;">AnnotatedElement</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ANNOTATION</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x00002000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> ENUM      </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x00004000</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> SYNTHETIC </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x00001000</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">native</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">registerNatives</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">registerNatives</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/*</span></span>
<span class="line"><span style="color:#6A737D;">     * Private constructor. Only the Java Virtual Machine creates Class objects.   //私有构造器，只有 JVM 才能调用创建 Class 对象</span></span>
<span class="line"><span style="color:#6A737D;">     * This constructor is not used and prevents the default constructor being</span></span>
<span class="line"><span style="color:#6A737D;">     * generated.</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Class</span><span style="color:#24292E;">(ClassLoader </span><span style="color:#E36209;">loader</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Initialize final field for classLoader.  The initialization value of non-null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// prevents future JIT optimizations from assuming this final field is null.</span></span>
<span class="line"><span style="color:#24292E;">        classLoader </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> loader;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>到这我们也就可以得出以下几点信息：</p><ul><li>Class 类也是类的一种，与 class 关键字是不一样的。</li><li>手动编写的类被编译后会产生一个 Class 对象，其表示的是创建的类的类型信息，而且这个 Class 对象保存在同名.class 的文件中 (字节码文件)</li><li>每个通过关键字 class 标识的类，在内存中有且只有一个与之对应的 Class 对象来描述其类型信息，无论创建多少个实例对象，其依据的都是用一个 Class 对象。</li><li>Class 类只存私有构造函数，因此对应 Class 对象只能有 JVM 创建和加载</li><li>Class 类的对象作用是运行时提供或获得某个对象的类型信息，这点对于反射技术很重要 (关于反射稍后分析)。</li></ul><h3 id="constructor-类" tabindex="-1">Constructor 类 <a class="header-anchor" href="#constructor-类" aria-label="Permalink to &quot;Constructor 类&quot;">​</a></h3><p>用 new 的形式创建一个类的对象实际上是在调用它的构造方法，反射机制中可以通过 Constructor 对象来创建一个类的对象。</p><p>Constructor 对象可以通过 Class 对象的 <code>getConstructor(Class&lt;?&gt;... parameterTypes)</code> 的相关方法获得，需要注意的是，一个类可能有多个构造方法，那么需要在调用 getConstructor 方法的时候，传入与构造方法相匹配的参数的 Class 对象，才能获得对应参数的构造方法；如果不传入参数，那么获取的自然就是无参方法了。</p><p>常用的方法如下：</p><ul><li><code>Constructor&lt;?&gt;[] getConstructors()</code>: 获取访问权限是 public 的构造方法数组</li><li><code>Constructor&lt;?&gt;] getDeclaredConstructors()</code>: 获取全部的构造方法数组</li><li><code>Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)</code>: 获取与传入参数类型相匹配的、且访问权限是 public 的构造方法</li><li><code>Constructor&lt;T&gt; getDeclaredConstrutor(Class&lt;?&gt;... parameterTypes)</code>: 获取与传入参数类型相匹配的构造方法</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Class&lt;</span><span style="color:#F97583;">People</span><span style="color:#E1E4E8;">&gt; clazz </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> People.class;</span></span>
<span class="line"><span style="color:#6A737D;">// 获取无参构造方法</span></span>
<span class="line"><span style="color:#E1E4E8;">Constructor&lt;</span><span style="color:#F97583;">People</span><span style="color:#E1E4E8;">&gt; constructor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clazz.</span><span style="color:#B392F0;">getConstructor</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Class&lt;</span><span style="color:#D73A49;">People</span><span style="color:#24292E;">&gt; clazz </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> People.class;</span></span>
<span class="line"><span style="color:#6A737D;">// 获取无参构造方法</span></span>
<span class="line"><span style="color:#24292E;">Constructor&lt;</span><span style="color:#D73A49;">People</span><span style="color:#24292E;">&gt; constructor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getConstructor</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>通过 Constructor 对象，我们可以直接通过其 <code>newInstance()</code> 方法创建实例；如果构造方法是私有的，还可以通过 <code>setAccessible(true)</code> 改变其可访问范围，然后再创建实例。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// People.class</span></span>
<span class="line"><span style="color:#6A737D;">// 设置无参构造函数为私有的</span></span>
<span class="line"><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">People</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 构造实例</span></span>
<span class="line"><span style="color:#E1E4E8;">constructor.</span><span style="color:#B392F0;">setAccessible</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);  </span><span style="color:#6A737D;">// 设置允许访问</span></span>
<span class="line"><span style="color:#E1E4E8;">People people </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> constructor.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// People.class</span></span>
<span class="line"><span style="color:#6A737D;">// 设置无参构造函数为私有的</span></span>
<span class="line"><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">People</span><span style="color:#24292E;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 构造实例</span></span>
<span class="line"><span style="color:#24292E;">constructor.</span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);  </span><span style="color:#6A737D;">// 设置允许访问</span></span>
<span class="line"><span style="color:#24292E;">People people </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> constructor.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="field-类" tabindex="-1">Field 类 <a class="header-anchor" href="#field-类" aria-label="Permalink to &quot;Field 类&quot;">​</a></h3><p>Field 提供有关类或接口的单个字段的信息，以及对它的动态访问权限。反射的字段可能是一个类（静态）字段或实例字段。</p><p>Filed 可以通过 Class 的 <code>getFileds</code> 相关方法获得，包括：</p><ul><li><code>getFields()</code>: 获取所有被 public 修饰的属性</li><li><code>getField(String name)</code>: 获取指定名称的、被 public 修饰的属性</li><li><code>getDeclaredFields()</code>: 获取所有定义的属性</li><li><code>getDeclaredField(String name)</code>: 获取指定名称的属性</li></ul><p>通过 Field 对象，我们获取属性的信息，也可以对属性进行赋值，但是需要先获取到实例对象，并指定为哪个具体的实例对象赋值。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 获取无参构造函数（这里使用无参构造函数为共有了，符合一般使用习惯）</span></span>
<span class="line"><span style="color:#E1E4E8;">Constructor&lt;</span><span style="color:#F97583;">People</span><span style="color:#E1E4E8;">&gt; constructor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clazz.</span><span style="color:#B392F0;">getDeclaredConstructor</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">People people </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> constructor.</span><span style="color:#B392F0;">newInstance</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取指定名称的属性</span></span>
<span class="line"><span style="color:#E1E4E8;">Field nameField </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> clazz.</span><span style="color:#B392F0;">getDeclaredField</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;name&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// name 字段是私有的（按照规范，通常属性都是私有的），需要先设置为允许访问</span></span>
<span class="line"><span style="color:#E1E4E8;">nameField.</span><span style="color:#B392F0;">setAccessible</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">nameField.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(people, </span><span style="color:#9ECBFF;">&quot;zhangsan&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 获取无参构造函数（这里使用无参构造函数为共有了，符合一般使用习惯）</span></span>
<span class="line"><span style="color:#24292E;">Constructor&lt;</span><span style="color:#D73A49;">People</span><span style="color:#24292E;">&gt; constructor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getDeclaredConstructor</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">People people </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> constructor.</span><span style="color:#6F42C1;">newInstance</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 获取指定名称的属性</span></span>
<span class="line"><span style="color:#24292E;">Field nameField </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> clazz.</span><span style="color:#6F42C1;">getDeclaredField</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;name&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// name 字段是私有的（按照规范，通常属性都是私有的），需要先设置为允许访问</span></span>
<span class="line"><span style="color:#24292E;">nameField.</span><span style="color:#6F42C1;">setAccessible</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">nameField.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(people, </span><span style="color:#032F62;">&quot;zhangsan&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="method-类" tabindex="-1">Method 类 <a class="header-anchor" href="#method-类" aria-label="Permalink to &quot;Method 类&quot;">​</a></h3><p>Method 提供关于类或接口上单独某个方法（以及如何访问该方法）的信息，所反映的方法可能是类方法或实例方法（包括抽象方法）。</p><p>同样，Class 提供了获取 Method 的方法：</p><ul><li><code>getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)</code>: 返回一个指定参数的 Method 对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。</li><li><code>getDeclaredMethods()</code>: 返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</li><li><code>getMethod(String name, Class&lt;?&gt;... parameterTypes)</code>: 返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法。</li><li><code>getMethods()</code>: 返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。</li></ul><p>再获取到 Method 对象后，可以使用 Method 类的 <code>invoke(Object obj, Object... args)</code> 方法来动态调用类的方法，第一个参数代表调用的对象，第二个参数传递的调用方法的参数。</p><h3 id="反射机制执行流程" tabindex="-1">反射机制执行流程 <a class="header-anchor" href="#反射机制执行流程" aria-label="Permalink to &quot;反射机制执行流程&quot;">​</a></h3><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/blog/java/%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt="反射机制执行流程"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>最后，用几句话总结反射的实现原理：</p><ol><li>反射类及反射方法的获取，都是通过从列表中搜寻查找匹配的方法，所以查找性能会随类的大小方法多少而变化；</li><li>每个类都会有一个与之对应的 Class 实例，从而每个类都可以获取 method 反射方法，并作用到其他实例身上；</li><li>反射也是考虑了线程安全的，放心使用；</li><li>反射使用软引用 relectionData 缓存 class 信息，避免每次重新从 jvm 获取带来的开销；</li><li>反射调用多次生成新代理 Accessor, 而通过字节码生存的则考虑了卸载功能，所以会使用独立的类加载器；</li><li>当找到需要的方法，都会 copy 一份出来，而不是使用原来的实例，从而保证数据隔离；</li><li>调度反射方法，最终是由 jvm 执行 invoke0() 执行；</li></ol><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://pdai.tech/md/java/basic/java-basic-x-reflection.html" target="_blank" rel="noreferrer">Java 基础 - 反射机制详解</a></li><li><a href="https://www.zhihu.com/question/585913105/answer/2948150246" target="_blank" rel="noreferrer">Java 反射机制是什么？</a></li></ul>`,45),o=[e];function t(c,r,i,E,y,d){return a(),n("div",null,o)}const m=s(p,[["render",t]]);export{b as __pageData,m as default};

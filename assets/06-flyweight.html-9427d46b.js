const e=JSON.parse(`{"key":"v-31926b68","path":"/md/advance/design/structural/06-flyweight.html","title":"享元模式","lang":"zh-CN","frontmatter":{"title":"享元模式","category":["设计模式"],"date":"2023-02-19T00:00:00.000Z","description":"享元模式","head":[["meta",{"property":"og:url","content":"https://AlexChen68.github.com/blog/md/advance/design/structural/06-flyweight.html"}],["meta",{"property":"og:site_name","content":"AlexChen's Blog"}],["meta",{"property":"og:title","content":"享元模式"}],["meta",{"property":"og:description","content":"享元模式"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-04T08:23:01.000Z"}],["meta",{"property":"article:published_time","content":"2023-02-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-04T08:23:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"享元模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-02-19T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-04T08:23:01.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"享元模式","slug":"享元模式","link":"#享元模式","children":[]},{"level":2,"title":"结构图","slug":"结构图","link":"#结构图","children":[]},{"level":2,"title":"伪代码","slug":"伪代码","link":"#伪代码","children":[]},{"level":2,"title":"应用实例","slug":"应用实例","link":"#应用实例","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"主要优点","slug":"主要优点","link":"#主要优点","children":[]},{"level":3,"title":"主要缺点","slug":"主要缺点","link":"#主要缺点","children":[]},{"level":3,"title":"适用场景","slug":"适用场景","link":"#适用场景","children":[]}]}],"git":{"createdTime":1677916727000,"updatedTime":1677918181000,"contributors":[{"name":"AlexChen","email":"1274812218@qq.com","commits":2}]},"readingTime":{"minutes":6.85,"words":2055},"filePathRelative":"md/advance/design/structural/06-flyweight.md","localizedDate":"2023年2月19日","excerpt":"<h2> 享元模式</h2>\\n<p>当一个软件系统在运行时产生的对象数量太多，将导致运行代价过高，带来系统性能下降等问题。例如在一个文本字符串中存在很多重复的字符，如果每一个字符都用一个单独的对象来表示，将会占用较多的内存空间，那么我们如何去避免系统中出现大量相同或相似的对象，同时又不影响客户端程序通过面向对象的方式对这些对象进行操作？享元模式正为解决这一类问题而诞生。享元模式通过共享技术实现相同或相似对象的重用，在逻辑上每一个出现的字符都有一个对象与之对应，然而在物理上它们却共享同一个享元对象，这个对象可以出现在一个字符串的不同地方，相同的字符对象都指向同一个实例，在享元模式中，存储这些共享实例对象的地方称为享元池 (Flyweight Pool)。我们可以针对每一个不同的字符创建一个享元对象，将其放在享元池中，需要时再从享元池取出。如下图所示</p>"}`);export{e as data};

import{_ as h,W as t,X as d,Z as a,a0 as e,a1 as n,$ as i,G as c}from"./framework-3160f2a1.js";const o={},s={href:"https://pdai.tech/md/java/thread/java-thread-x-thread-basic.html",target:"_blank",rel:"noopener noreferrer"},l=i('<h2 id="什么是线程" tabindex="-1"><a class="header-anchor" href="#什么是线程" aria-hidden="true">#</a> 什么是线程</h2><ul><li>进程，是对运行时程序的封装，是系统进行资源调度和分配的基本单位，实现了操作系统的并发。</li><li>线程，是进程的子任务，是CPU调度和分派的基本单位，实现了进程内部的并发。</li></ul><h2 id="线程的状态" tabindex="-1"><a class="header-anchor" href="#线程的状态" aria-hidden="true">#</a> 线程的状态</h2><h2 id="创建线程的方式" tabindex="-1"><a class="header-anchor" href="#创建线程的方式" aria-hidden="true">#</a> 创建线程的方式</h2><h2 id="基础线程机制" tabindex="-1"><a class="header-anchor" href="#基础线程机制" aria-hidden="true">#</a> 基础线程机制</h2><h2 id="线程中断" tabindex="-1"><a class="header-anchor" href="#线程中断" aria-hidden="true">#</a> 线程中断</h2><h2 id="线程互斥同步" tabindex="-1"><a class="header-anchor" href="#线程互斥同步" aria-hidden="true">#</a> 线程互斥同步</h2><h2 id="线程间的协作" tabindex="-1"><a class="header-anchor" href="#线程间的协作" aria-hidden="true">#</a> 线程间的协作</h2>',8);function _(u,f){const r=c("ExternalLinkIcon");return t(),d("div",null,[a("blockquote",null,[a("p",null,[e("本文转载自 "),a("a",s,[e("Java全栈知识体系【Java 并发-线程基础】"),n(r)])])]),l])}const b=h(o,[["render",_],["__file","01-thread.html.vue"]]);export{b as default};

import{_ as n,W as l,X as i,Z as e,a0 as t,$ as r,a1 as s,C as d}from"./framework-ea95e8eb.js";const a={},h=s('<h2 id="redis-数据类型" tabindex="-1"><a class="header-anchor" href="#redis-数据类型" aria-hidden="true">#</a> Redis 数据类型</h2><p>Redis 所有的 key（键）都是字符串。我们在谈基础数据结构时，讨论的是存储值的数据类型，主要包括常见的 5 种数据类型，分别是：</p><ul><li><strong>String</strong></li><li><strong>List</strong></li><li><strong>Set</strong></li><li><strong>Zset</strong></li><li><strong>Hash</strong></li></ul><p>此外，还有三种特殊的数据类型，分别是 <strong>HyperLogLogs</strong>（基数统计）， <strong>Bitmaps</strong> (位图) 和 <strong>geospatial</strong> （地理位置）。</p><p>Redis5.0 中还增加了一个数据类型 Stream，它借鉴了 Kafka 的设计，是一个新的强大的支持多播的可持久化的消息队列</p><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h3><p>Redis 字符串存储字节序列，包括文本、序列化对象和二进制数组。</p><p>因此，字符串是最基本的 Redis 数据类型。</p><p>它们通常用于缓存，但它们支持额外的功能，也可以实现计数器并执行按位操作。</p><p>默认情况下，单个 Redis 字符串最大为 512 MB。</p><p><strong>基本命令：</strong></p>',11),_={href:"https://redis.io/commands/set",target:"_blank",rel:"noopener noreferrer"},c=e("code",null,"SET",-1),p={href:"https://redis.io/commands/setnx",target:"_blank",rel:"noopener noreferrer"},u=e("code",null,"SETNX",-1),f={href:"https://redis.io/commands/get",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"GET",-1),g={href:"https://redis.io/commands/mget",target:"_blank",rel:"noopener noreferrer"},b=e("code",null,"MGET",-1),k={href:"https://redis.io/commands/incrby",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,"INCRBY",-1),S={href:"https://redis.io/docs/data-types/strings/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://redis.io/commands/?group=string",target:"_blank",rel:"noopener noreferrer"},L=e("h3",{id:"list",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#list","aria-hidden":"true"},"#"),r(" List")],-1),x=e("p",null,"Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。",-1),N=e("p",null,"一个列表最多可以包含 2^32 - 1 个元素 (4294967295, 每个列表超过 40 亿个元素)。",-1),y=e("p",null,[e("strong",null,"基本命令：")],-1),B={href:"https://redis.io/commands/lpush",target:"_blank",rel:"noopener noreferrer"},C=e("code",null,"LPUSH",-1),H={href:"https://redis.io/commands/rpush",target:"_blank",rel:"noopener noreferrer"},P=e("code",null,"RPUSH",-1),T={href:"https://redis.io/commands/lpop",target:"_blank",rel:"noopener noreferrer"},I=e("code",null,"LPOP",-1),M={href:"https://redis.io/commands/rpop",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"RPOP",-1),A={href:"https://redis.io/commands/llen",target:"_blank",rel:"noopener noreferrer"},V=e("code",null,"LLEN",-1),Z={href:"https://redis.io/commands/lmove",target:"_blank",rel:"noopener noreferrer"},D=e("code",null,"LMOVE",-1),O={href:"https://redis.io/commands/ltrim",target:"_blank",rel:"noopener noreferrer"},G=e("code",null,"LTRIM",-1),z={href:"https://redis.io/commands/blpop",target:"_blank",rel:"noopener noreferrer"},w=e("code",null,"BLPOP",-1),K={href:"https://redis.io/commands/blmove",target:"_blank",rel:"noopener noreferrer"},U=e("code",null,"BLMOVE",-1),X={href:"https://redis.io/docs/data-types/lists/",target:"_blank",rel:"noopener noreferrer"},Y={href:"https://redis.io/commands/?group=list",target:"_blank",rel:"noopener noreferrer"},W=e("h3",{id:"set",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#set","aria-hidden":"true"},"#"),r(" Set")],-1),$=e("p",null,"Redis Set 是唯一字符串（成员）的无序集合。您可以使用 Redis 集有效地：",-1),j=e("ul",null,[e("li",null,"跟踪唯一项目（例如，跟踪访问给定博客文章的所有唯一 IP 地址）。"),e("li",null,"表示关系（例如，具有给定角色的所有用户的集合）。"),e("li",null,"执行常见的集合操作，例如交集、并集和差分。")],-1),q=e("p",null,[e("strong",null,"基本命令：")],-1),F={href:"https://redis.io/commands/sadd",target:"_blank",rel:"noopener noreferrer"},J=e("code",null,"SADD",-1),Q={href:"https://redis.io/commands/srem",target:"_blank",rel:"noopener noreferrer"},ee=e("code",null,"SREM",-1),re={href:"https://redis.io/commands/sismember",target:"_blank",rel:"noopener noreferrer"},oe=e("code",null,"SISMEMBER",-1),te={href:"https://redis.io/commands/sinter",target:"_blank",rel:"noopener noreferrer"},se=e("code",null,"SINTER",-1),ne={href:"https://redis.io/commands/scard",target:"_blank",rel:"noopener noreferrer"},le=e("code",null,"SCARD",-1),ie={href:"https://redis.io/docs/data-types/sets/",target:"_blank",rel:"noopener noreferrer"},de={href:"https://redis.io/commands/?group=set",target:"_blank",rel:"noopener noreferrer"},ae=s('<h3 id="sorted-set" tabindex="-1"><a class="header-anchor" href="#sorted-set" aria-hidden="true">#</a> Sorted Set</h3><p>Redis sorted set 和 set 一样也是 string 类型元素的集合，且不允许重复的成员。</p><p>不同的是每个元素都会关联一个 double 类型的分数。redis 正是通过分数来为集合中的成员进行从小到大的排序。</p><p>有序集合的成员是唯一的，但分数 (score) 却可以重复。</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。集合中最大的成员数为 232 - 1 (4294967295, 每个集合可存储 40 多亿个成员)。</p><p>Redis sorted set(排序集) 是按关联分数排序的唯一字符串（成员）的集合。当多个字符串具有相同的分数时，字符串按字典顺序排列。排序集的一些用例包括：</p><ul><li>排行榜。例如，您可以使用排序集轻松维护大型在线游戏中最高分的有序列表。</li><li>速率限制器。特别是，您可以使用排序集来构建滑动窗口速率限制器，以防止过多的 API 请求。</li></ul><p><strong>基本命令：</strong></p>',8),he={href:"https://redis.io/commands/zadd",target:"_blank",rel:"noopener noreferrer"},_e=e("code",null,"ZADD",-1),ce={href:"https://redis.io/commands/zrange",target:"_blank",rel:"noopener noreferrer"},pe=e("code",null,"ZRANGE",-1),ue={href:"https://redis.io/commands/zrank",target:"_blank",rel:"noopener noreferrer"},fe=e("code",null,"ZRANK",-1),me={href:"https://redis.io/commands/zrevrank",target:"_blank",rel:"noopener noreferrer"},ge=e("code",null,"ZREVRANK",-1),be={href:"https://redis.io/docs/data-types/sorted-sets/#",target:"_blank",rel:"noopener noreferrer"},ke={href:"https://redis.io/commands/?group=sorted-set",target:"_blank",rel:"noopener noreferrer"},Re=e("h3",{id:"hash",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hash","aria-hidden":"true"},"#"),r(" Hash")],-1),Se=e("p",null,"Redis hash 是一个 string 类型的 field（字段）和 value（值）的映射表，hash 特别适合用于存储对象。",-1),Ee=e("p",null,"Redis 中每个 hash 可以存储 232 - 1 键值对（40 多亿）。",-1),Le=e("p",null,[e("strong",null,"基本命令：")],-1),xe={href:"https://redis.io/commands/hset",target:"_blank",rel:"noopener noreferrer"},Ne=e("code",null,"HSET",-1),ye={href:"https://redis.io/commands/hget",target:"_blank",rel:"noopener noreferrer"},Be=e("code",null,"HGET",-1),Ce={href:"https://redis.io/commands/hmget",target:"_blank",rel:"noopener noreferrer"},He=e("code",null,"HMGET",-1),Pe={href:"https://redis.io/commands/hincrby",target:"_blank",rel:"noopener noreferrer"},Te=e("code",null,"HINCRBY",-1),Ie={href:"https://redis.io/docs/data-types/hashes/",target:"_blank",rel:"noopener noreferrer"},Me={href:"https://redis.io/commands/?group=hash",target:"_blank",rel:"noopener noreferrer"},ve=e("h2",{id:"参考资料",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),r(" 参考资料")],-1),Ae={href:"https://redis.io/docs/",target:"_blank",rel:"noopener noreferrer"},Ve={href:"https://www.runoob.com/redis/redis-tutorial.html",target:"_blank",rel:"noopener noreferrer"};function Ze(De,Oe){const o=d("ExternalLinkIcon");return l(),i("div",null,[h,e("ul",null,[e("li",null,[e("a",_,[c,t(o)]),r(" 存储字符串值。")]),e("li",null,[r("仅当字符串值尚不存在时，"),e("a",p,[u,t(o)]),r(" 才会存储该值。对于实现锁很有用。")]),e("li",null,[e("a",f,[m,t(o)]),r(" 检索字符串值。")]),e("li",null,[e("a",g,[b,t(o)]),r(" 在单个操作中检索多个字符串值。")]),e("li",null,[e("a",k,[R,t(o)]),r("以原子方式递增（并在传递负数时递减）存储在给定键上的计数器。")])]),e("p",null,[r("官方文档："),e("a",S,[r("Redis Strings | Redis"),t(o)])]),e("p",null,[r("String 完整命令列表："),e("a",E,[r("Commands | Redis"),t(o)])]),L,x,N,y,e("ul",null,[e("li",null,[e("a",B,[C,t(o)]),r(" 在列表的头部添加一个新元素;"),e("a",H,[P,t(o)]),r("添加到尾部。")]),e("li",null,[e("a",T,[I,t(o)]),r(" 从列表的头部删除并返回一个元素;"),e("a",M,[v,t(o)]),r(" 执行相同的操作，但从列表的尾部。")]),e("li",null,[e("a",A,[V,t(o)]),r(" 返回列表的长度。")]),e("li",null,[e("a",Z,[D,t(o)]),r(" 以原子方式将元素从一个列表移动到另一个列表。")]),e("li",null,[e("a",O,[G,t(o)]),r(" 将列表缩减到指定的元素范围。")]),e("li",null,[e("a",z,[w,t(o)]),r(" 从列表的头部删除并返回一个元素。如果列表为空，则该命令将一直阻止，直到元素可用或达到指定的超时。")]),e("li",null,[e("a",K,[U,t(o)]),r(" 以原子方式将元素从源列表移动到目标列表。如果源列表为空，则该命令将阻塞，直到新元素可用。")])]),e("p",null,[r("官方文档："),e("a",X,[r("Redis lists | Redis"),t(o)])]),e("p",null,[r("List 完整命令列表："),e("a",Y,[r("Commands | Redis"),t(o)])]),W,$,j,q,e("ul",null,[e("li",null,[e("a",F,[J,t(o)]),r(" 将新成员添加到集合中。")]),e("li",null,[e("a",Q,[ee,t(o)]),r("从集合中删除指定的成员。")]),e("li",null,[e("a",re,[oe,t(o)]),r("测试字符串的集合成员资格。")]),e("li",null,[e("a",te,[se,t(o)]),r(" 返回两个或多个集合共有的成员集（即交集）。")]),e("li",null,[e("a",ne,[le,t(o)]),r(" 返回集合的大小（也称为基数）。")])]),e("p",null,[r("官方文档："),e("a",ie,[r("Redis sets | Redis"),t(o)])]),e("p",null,[r("Set 完整命令列表："),e("a",de,[r("Commands | Redis"),t(o)])]),ae,e("ul",null,[e("li",null,[e("a",he,[_e,t(o)]),r("将新成员和关联的分数添加到已排序的集合中。如果该成员已经存在，则更新分数。")]),e("li",null,[e("a",ce,[pe,t(o)]),r("返回在给定范围内排序的有序集合的成员。")]),e("li",null,[e("a",ue,[fe,t(o)]),r("返回所提供成员的排名，假设排序是按升序排列。")]),e("li",null,[e("a",me,[ge,t(o)]),r("返回所提供成员的排名，假设排序集按降序排列。")])]),e("p",null,[r("官方文档："),e("a",be,[r("Redis sorted sets | Redis"),t(o)])]),e("p",null,[r("Zset 完整命令列表："),e("a",ke,[r("Commands | Redis"),t(o)])]),Re,Se,Ee,Le,e("ul",null,[e("li",null,[e("a",xe,[Ne,t(o)]),r(" 在哈希上设置一个或多个字段的值。")]),e("li",null,[e("a",ye,[Be,t(o)]),r(" 返回给定字段的值。")]),e("li",null,[e("a",Ce,[He,t(o)]),r(" 返回一个或多个给定字段的值。")]),e("li",null,[e("a",Pe,[Te,t(o)]),r(" 将给定字段的值按提供的整数递增。")])]),e("p",null,[r("官方文档："),e("a",Ie,[r("Redis hashes | Redis"),t(o)])]),e("p",null,[r("Hash 完整命令列表："),e("a",Me,[r("Commands | Redis"),t(o)])]),ve,e("ul",null,[e("li",null,[e("a",Ae,[r("Redis 官方文档"),t(o)])]),e("li",null,[e("a",Ve,[r("Redis 教程｜菜鸟教程"),t(o)])])])])}const ze=n(a,[["render",Ze],["__file","1.2-datatype.html.vue"]]);export{ze as default};

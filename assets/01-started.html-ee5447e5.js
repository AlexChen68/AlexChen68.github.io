import{_ as c,W as i,X as o,Y as r,Z as a,$ as e,a0 as n,a1 as d,C as t}from"./framework-ea95e8eb.js";const p={},l=a("p",null,"Redis 的介绍和初步安装、卸载教程。",-1),u=d(`<h2 id="redis-简介" tabindex="-1"><a class="header-anchor" href="#redis-简介" aria-hidden="true">#</a> Redis 简介</h2><p>Redis 是完全开源的，遵守 BSD 协议，是一个高性能的 key-value 数据库。</p><p>Redis 与其他 key - value 缓存产品有以下三个特点：</p><p>Redis 支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis 不仅仅支持简单的 key-value 类型的数据，同时还提供 list，set，zset，hash 等数据结构的存储。 Redis 支持数据的备份，即 master-slave 模式的数据备份。</p><h2 id="安装和卸载" tabindex="-1"><a class="header-anchor" href="#安装和卸载" aria-hidden="true">#</a> 安装和卸载</h2><h3 id="docker-安装-redis" tabindex="-1"><a class="header-anchor" href="#docker-安装-redis" aria-hidden="true">#</a> Docker 安装 Redis</h3><p>拉取 Redis 最新镜像</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull redis:latest
</code></pre></div><p>查看镜像</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre></div><p>使用自定义的 <code>redis.conf</code> 启动 Redis 容器，并绑定端口，<code>[redis-container-name]</code>使用自定义的容器名称替换</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">-v</span> /root/redis:/usr/local/etc/redis <span class="token parameter variable">--name</span> <span class="token punctuation">[</span>redis-container-name<span class="token punctuation">]</span> <span class="token parameter variable">-d</span> redis redis-server /usr/local/etc/redis/redis.conf
</code></pre></div><p>查看容器是否启动</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token punctuation">[</span>redis-container-name<span class="token punctuation">]</span>
</code></pre></div><p>进入 redis 容器，使用 <code>redis-cli</code> 登录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token punctuation">[</span>redis-container-name<span class="token punctuation">]</span> <span class="token function">bash</span>
<span class="token comment"># 进入 redis 命令行界面</span>
redis-cli
<span class="token comment"># 鉴权登录,yourpassword 为在 redis.conf 中，使用 requirepass 配置的密码</span>
auth yourpassword
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redis-配置" tabindex="-1"><a class="header-anchor" href="#redis-配置" aria-hidden="true">#</a> Redis 配置</h3><h4 id="redis-conf-配置文件" tabindex="-1"><a class="header-anchor" href="#redis-conf-配置文件" aria-hidden="true">#</a> redis.conf 配置文件</h4><p>Redis 可以通过在启动时，指定配置文件 <code>redis.conf</code> 来加载自定义配置。</p>`,19),h={href:"https://github.com/redis/redis/blob/unstable/redis.conf",target:"_blank",rel:"noopener noreferrer"},g=d(`<p>常见的配置项：</p><ul><li><p>指定 Redis 是否以守护进程的方式启动，默认为 no，表示不以守护进程的方式启动</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>daemonize yes
</code></pre></div></li><li><p>指定 Redis 监听端口，默认端口为 6379</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>port 6379
</code></pre></div></li><li><p>设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 <code>AUTH &lt;password&gt;</code> 命令提供密码，默认关闭</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>requirepass password
</code></pre></div></li><li><p>绑定主机地址；如果指定了 bind，则说明只允许来自指定网卡的 Redis 请求。如果没有指定，就说明可以接受来自任意一个网卡的 Redis 请求，需要远程连接时，可以注释掉该配置</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>bind 127.0.0.1
</code></pre></div></li><li><p>当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>pidfile /var/run/redis.pid
</code></pre></div></li><li><p>当客户端闲置多长秒后关闭连接，如果指定为 0，表示关闭该功能</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>timeout 300
</code></pre></div></li><li><p>设置数据库的数量，默认数据库为 0，可以使用 SELECT 命令在连接上指定数据库 id</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>databases 16
</code></pre></div></li></ul>`,2),f={href:"https://redis.io/docs/manual/config/",target:"_blank",rel:"noopener noreferrer"},k=d(`<h4 id="redis-cli-命令行配置" tabindex="-1"><a class="header-anchor" href="#redis-cli-命令行配置" aria-hidden="true">#</a> Redis-cli 命令行配置</h4><p>在通过 Redis-cli 工具连接上 Redis 并通过 <code>auth [password]</code> 认证后，可以使用 <code>config set/get [param]</code> 命令设置或查询 Redis 配置。</p><p>查看全部配置</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>config get *
</code></pre></div><p>查询某个配置，例如查询密码</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>config get requirepass
</code></pre></div><p>设置某个配置，例如设置密码</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>config <span class="token builtin class-name">set</span> requirepass <span class="token punctuation">[</span>password<span class="token punctuation">]</span>
</code></pre></div><h3 id="docker-卸载-redis" tabindex="-1"><a class="header-anchor" href="#docker-卸载-redis" aria-hidden="true">#</a> Docker 卸载 Redis</h3><p>查看正在运行的 redis 容器</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token punctuation">[</span>redis-container-name<span class="token punctuation">]</span>
</code></pre></div><p>停止容器，[redis-container-name] 为容器名称</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop <span class="token punctuation">[</span>redis-container-name<span class="token punctuation">]</span>
</code></pre></div><p>查看 Redis 镜像</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> iamges
</code></pre></div><p>删除 Redis 镜像，<code>[redis-image-id]</code> 为 Redis 镜像的 <code>IMAGE ID</code></p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> image <span class="token function">rm</span> <span class="token punctuation">[</span>redis-image-id<span class="token punctuation">]</span>
</code></pre></div><hr><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,19),v={href:"https://redis.io/docs/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.runoob.com/redis/redis-tutorial.html",target:"_blank",rel:"noopener noreferrer"};function m(_,x){const s=t("ExternalLinkIcon");return i(),o("div",null,[l,r(" more "),u,a("p",null,[e("该文件可以在 Redis 安装目录下找到，或者从 "),a("a",h,[e("Github"),n(s)]),e(" 下载。")]),g,a("p",null,[e("更多具体设置，见 "),a("a",f,[e("Redis 官方文档"),n(s)]),e("。")]),k,a("ul",null,[a("li",null,[a("a",v,[e("Redis 官方文档"),n(s)])]),a("li",null,[a("a",b,[e("Redis 教程｜菜鸟教程"),n(s)])])])])}const w=c(p,[["render",m],["__file","01-started.html.vue"]]);export{w as default};

const e=JSON.parse(`{"key":"v-3bcc0011","path":"/advance/algo/search/2-binary-search.html","title":"二分法查找","lang":"zh-CN","frontmatter":{"title":"二分法查找","category":"算法","date":"2023-06-07T00:00:00.000Z","description":"什么是二分法查找 二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。 但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。 二分查找每次都能将查找区间减半，这种折半特性的算法时间复杂度都为 O(logN)。 查找过程 找到区间的中间值，与目标值比较，如果等于则返回；如果小于目标值则将区间缩小为右区间；反之缩小为左区间。 关键在于确定中间值与区间缩小时的边界。","head":[["meta",{"property":"og:url","content":"https://github.com/AlexChen68/AlexChen68.github.io/advance/algo/search/2-binary-search.html"}],["meta",{"property":"og:site_name","content":"AlexChen's Blog"}],["meta",{"property":"og:title","content":"二分法查找"}],["meta",{"property":"og:description","content":"什么是二分法查找 二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。 但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。 二分查找每次都能将查找区间减半，这种折半特性的算法时间复杂度都为 O(logN)。 查找过程 找到区间的中间值，与目标值比较，如果等于则返回；如果小于目标值则将区间缩小为右区间；反之缩小为左区间。 关键在于确定中间值与区间缩小时的边界。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-07T09:31:54.000Z"}],["meta",{"property":"article:author","content":"AlexChen"}],["meta",{"property":"article:published_time","content":"2023-06-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-07T09:31:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二分法查找\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-07T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-07T09:31:54.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AlexChen\\",\\"url\\":\\"https://github.com/AlexChen68\\"}]}"]]},"headers":[{"level":2,"title":"什么是二分法查找","slug":"什么是二分法查找","link":"#什么是二分法查找","children":[]},{"level":2,"title":"查找过程","slug":"查找过程","link":"#查找过程","children":[{"level":3,"title":"确定中值","slug":"确定中值","link":"#确定中值","children":[]},{"level":3,"title":"确定边界","slug":"确定边界","link":"#确定边界","children":[]}]},{"level":2,"title":"复杂度分析","slug":"复杂度分析","link":"#复杂度分析","children":[]}],"git":{"createdTime":1686130314000,"updatedTime":1686130314000,"contributors":[{"name":"alexchen","email":"1274812218@qq.com","commits":1}]},"readingTime":{"minutes":1,"words":300},"filePathRelative":"advance/algo/search/2-binary-search.md","localizedDate":"2023年6月7日","excerpt":"<h2> 什么是二分法查找</h2>\\n<p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。</p>\\n<p>但是，折半查找要求线性表必须采用<strong>顺序存储结构</strong>，而且表中元素按关键字<strong>有序排列</strong>。</p>\\n<p>二分查找每次都能将查找区间减半，这种折半特性的算法时间复杂度都为 <strong>O(logN)</strong>。</p>\\n<h2> 查找过程</h2>\\n<p>找到区间的中间值，与目标值比较，如果等于则返回；如果小于目标值则将区间缩小为右区间；反之缩小为左区间。</p>\\n<p>关键在于确定中间值与区间缩小时的边界。</p>","autoDesc":true}`);export{e as data};

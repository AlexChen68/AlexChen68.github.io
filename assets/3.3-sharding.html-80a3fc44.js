const e=JSON.parse(`{"key":"v-9a787310","path":"/database/mysql/3.3-sharding.html","title":"Mysql 分库分表","lang":"zh-CN","frontmatter":{"title":"Mysql 分库分表","category":"Mysql","date":"2023-06-14T00:00:00.000Z","description":"为什么要分库分表？ 关系型数据库本身比较容易成为系统瓶颈，单机存储容量、连接数、处理能力都有限。当单表的数据量达到一定程度以后，由于查询维度较多，即使添加从库、优化索引，做很多操作时性能仍下降严重。此时就要考虑对其进行拆分了，拆分的目的就在于减少数据库的负担，缩短查询时间。 数据库分布式核心内容无非就是数据拆分（Sharding），以及拆分后对数据的定位、整合。数据拆分就是将数据分散存储到多个数据库中，使得单一数据库中的数据量变小，通过扩充主机的数量缓解单一数据库的性能问题，从而达到提升数据库操作性能的目的。 分库分表的拆分方式","head":[["meta",{"property":"og:url","content":"https://github.com/AlexChen68/AlexChen68.github.io/database/mysql/3.3-sharding.html"}],["meta",{"property":"og:site_name","content":"AlexChen's Blog"}],["meta",{"property":"og:title","content":"Mysql 分库分表"}],["meta",{"property":"og:description","content":"为什么要分库分表？ 关系型数据库本身比较容易成为系统瓶颈，单机存储容量、连接数、处理能力都有限。当单表的数据量达到一定程度以后，由于查询维度较多，即使添加从库、优化索引，做很多操作时性能仍下降严重。此时就要考虑对其进行拆分了，拆分的目的就在于减少数据库的负担，缩短查询时间。 数据库分布式核心内容无非就是数据拆分（Sharding），以及拆分后对数据的定位、整合。数据拆分就是将数据分散存储到多个数据库中，使得单一数据库中的数据量变小，通过扩充主机的数量缓解单一数据库的性能问题，从而达到提升数据库操作性能的目的。 分库分表的拆分方式"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-14T17:17:08.000Z"}],["meta",{"property":"article:author","content":"AlexChen"}],["meta",{"property":"article:published_time","content":"2023-06-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-14T17:17:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Mysql 分库分表\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-14T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-14T17:17:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AlexChen\\",\\"url\\":\\"https://github.com/AlexChen68\\"}]}"]]},"headers":[{"level":2,"title":"为什么要分库分表？","slug":"为什么要分库分表","link":"#为什么要分库分表","children":[]},{"level":2,"title":"分库分表的拆分方式","slug":"分库分表的拆分方式","link":"#分库分表的拆分方式","children":[{"level":3,"title":"垂直拆分","slug":"垂直拆分","link":"#垂直拆分","children":[]},{"level":3,"title":"水平拆分","slug":"水平拆分","link":"#水平拆分","children":[]},{"level":3,"title":"数据分片策略","slug":"数据分片策略","link":"#数据分片策略","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1686763028000,"updatedTime":1686763028000,"contributors":[{"name":"alexchen","email":"1274812218@qq.com","commits":1}]},"readingTime":{"minutes":3.87,"words":1162},"filePathRelative":"database/mysql/3.3-sharding.md","localizedDate":"2023年6月14日","excerpt":"<h2> 为什么要分库分表？</h2>\\n<p>关系型数据库本身比较容易成为系统瓶颈，单机存储容量、连接数、处理能力都有限。当单表的数据量达到一定程度以后，由于查询维度较多，即使添加从库、优化索引，做很多操作时性能仍下降严重。此时就要考虑对其进行拆分了，拆分的目的就在于减少数据库的负担，缩短查询时间。</p>\\n<p>数据库分布式核心内容无非就是数据拆分（Sharding），以及拆分后对数据的定位、整合。数据拆分就是将数据分散存储到多个数据库中，使得单一数据库中的数据量变小，通过扩充主机的数量缓解单一数据库的性能问题，从而达到提升数据库操作性能的目的。</p>\\n<h2> 分库分表的拆分方式</h2>","autoDesc":true}`);export{e as data};

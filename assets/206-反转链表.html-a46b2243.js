import{_ as c,W as l,X as p,Y as n,a0 as a,Z as s,a1 as i,C as e}from"./framework-35f74cfc.js";const d={},r=n("h2",{id:"题目链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#题目链接","aria-hidden":"true"},"#"),a(" 题目链接")],-1),u={href:"https://leetcode.cn/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"},k={id:"题目描述",tabindex:"-1"},h=n("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#",-1),v=i(`<p>给你单链表的头节点 head，请你反转链表，并返回反转后的链表。</p><p>示例 1：</p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg" alt="示例" loading="lazy"></p><div class="language-text" data-ext="text"><pre class="language-text"><code>输入：head = [1,2,3,4,5]
输出：[5,4,3,2,1]
</code></pre></div><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p><strong>递归法：</strong></p><ul><li>使用递归函数，一直递归到链表的最后一个结点，该结点就是反转后的头结点；</li><li>此后，每次函数在返回的过程中，让当前结点的下一个结点的 next 指针指向当前节点；</li><li>同时让当前结点的 next 指针指向 NULL，从而实现从链表尾部开始的局部反转；</li><li>当递归函数全部出栈后，链表反转完成。</li></ul><p><img src="https://pic.leetcode-cn.com/8951bc3b8b7eb4da2a46063c1bb96932e7a69910c0a93d973bd8aa5517e59fc8.gif" alt="递归法" width="500" height="360" loading="lazy"></p><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> head<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 获取后面反转的结果</span>
        <span class="token class-name">ListNode</span> node <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 下一个结点的 next 指针指向 head</span>
        head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token comment">// head 指向 null</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h2><ul><li>时间复杂度：O(n)，其中 n 是链表的长度。需要对链表的每个节点进行反转操作。</li><li>空间复杂度：O(n)，其中 n 是链表的长度。空间复杂度主要取决于递归调用的栈空间，最多为 n 层。</li></ul>`,12);function m(_,b){const t=e("ExternalLinkIcon"),o=e("Badge");return l(),p("div",null,[r,n("ul",null,[n("li",null,[n("a",u,[a("206. 反转链表"),s(t)])])]),n("h2",k,[h,a(" 题目描述 "),s(o,{text:"简单",type:"tip"})]),v])}const g=c(d,[["render",m],["__file","206-反转链表.html.vue"]]);export{g as default};

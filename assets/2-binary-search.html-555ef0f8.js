import{_ as e,W as a,X as r,a1 as i}from"./framework-ea95e8eb.js";const h={},t=i('<h2 id="什么是二分法查找" tabindex="-1"><a class="header-anchor" href="#什么是二分法查找" aria-hidden="true">#</a> 什么是二分法查找</h2><p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。</p><p>但是，折半查找要求线性表必须采用<strong>顺序存储结构</strong>，而且表中元素按关键字<strong>有序排列</strong>。</p><p>二分查找每次都能将查找区间减半，这种折半特性的算法时间复杂度都为 <strong>O(logN)</strong>。</p><h2 id="查找过程" tabindex="-1"><a class="header-anchor" href="#查找过程" aria-hidden="true">#</a> 查找过程</h2><p>找到区间的中间值，与目标值比较，如果等于则返回；如果小于目标值则将区间缩小为右区间；反之缩小为左区间。</p><p>关键在于确定中间值与区间缩小时的边界。</p><h3 id="确定中值" tabindex="-1"><a class="header-anchor" href="#确定中值" aria-hidden="true">#</a> 确定中值</h3><p>有两种计算中值 m 的方式：</p><ul><li>m = (l + h) / 2</li><li>m = l + (h - l) / 2</li></ul><p>l + h 可能出现加法溢出，最好使用第二种方式。</p><h3 id="确定边界" tabindex="-1"><a class="header-anchor" href="#确定边界" aria-hidden="true">#</a> 确定边界</h3><p>边界也有两种常用的写法：</p><ul><li>左闭右闭：<code>[left, right]</code></li><li>左闭右开：<code>[left, right)</code></li></ul><p>当取左边界时，第一种写法的 right 应该为 <code>right = mid-1</code>，而第二种为 <code>right = mid</code></p><h2 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h2><ul><li>时间复杂度：<em>O(log<sub>n</sub>)</em></li><li>空间复杂度：<em>O(1)</em></li></ul>',17),d=[t];function l(n,c){return a(),r("div",null,d)}const s=e(h,[["render",l],["__file","2-binary-search.html.vue"]]);export{s as default};

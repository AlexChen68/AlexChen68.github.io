import{_ as a,o as s,c as l,Q as t}from"./chunks/framework.419948d5.js";const u=JSON.parse('{"title":"Java 基础语法","description":"","frontmatter":{"title":"Java 基础语法","order":1,"date":"2023-04-12T00:00:00.000Z"},"headers":[],"relativePath":"java/basic/grammar.md","filePath":"java/basic/grammar.md","lastUpdated":1695216405000}'),n={name:"java/basic/grammar.md"},e=t(`<h2 id="java-三大特性" tabindex="-1">Java 三大特性 <a class="header-anchor" href="#java-三大特性" aria-label="Permalink to &quot;Java 三大特性&quot;">​</a></h2><p>Java 具有三大特性，分别是<strong>封装</strong>、<strong>继承</strong>和<strong>多态</strong>。</p><p><strong>封装</strong></p><p>利用抽象数据类型将数据和基于数据的操作封装在一起，使其构成一个不可分割的独立实体。数据被保护在抽象数据类型的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系。用户无需知道对象内部的细节，但可以通过对象对外提供的接口来访问该对象。</p><p>优点：</p><ul><li>减少耦合：可以独立地开发、测试、优化、使用、理解和修改</li><li>减轻维护的负担：可以更容易被程序员理解，并且在调试的时候可以不影响其他模块</li><li>有效地调节性能：可以通过剖析确定哪些模块影响了系统的性能</li><li>提高软件的可重用性</li><li>降低了构建大型系统的风险：即使整个系统不可用，但是这些独立的模块却有可能是可用的</li></ul><p><strong>继承</strong></p><p>从一个已知的类中派生出一个新的类，新类可以拥有已知类的行为和属性，并且可以通过覆盖/重写来增强已知类的能力。</p><p><strong>多态</strong></p><p>多态分为编译时多态和运行时多态：</p><ul><li>编译时多态主要指方法的重载</li><li>运行时多态指程序中定义的对象引用所指向的具体类型在运行期间才确定</li></ul><p>运行时多态有三个条件：</p><ul><li>继承：在多态中必须存在有继承关系的子类和父类。</li><li>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。</li><li>向上转型：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。</li></ul><h2 id="java-数据类型" tabindex="-1">Java 数据类型 <a class="header-anchor" href="#java-数据类型" aria-label="Permalink to &quot;Java 数据类型&quot;">​</a></h2><p>Java 中的数据类型可分为 2 种：</p><ol><li>基本数据类型。</li></ol><p>基本数据类型是 Java 语言操作数据的基础，包括 boolean、char、byte、short、int、long、float 和 double，共 8 种。</p><ol start="2"><li>引用数据类型。</li></ol><p>除了基本数据类型以外的类型，都是所谓的引用类型。常见的有数组（对，没错，数组是引用类型）、class（也就是类），以及接口（指向的是实现接口的类的对象）。</p><h3 id="八种基本数据类型" tabindex="-1">八种基本数据类型 <a class="header-anchor" href="#八种基本数据类型" aria-label="Permalink to &quot;八种基本数据类型&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>基本数据类型被创建时，在栈内存中会被划分出一定的内存，并将数值存储在该内存中。</p><p>Java 基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱（转为包装类）与拆箱（转为基本类型）完成。</p></div><table><thead><tr><th>数据类型</th><th>长度 (位)</th><th>数值范围</th><th>默认值</th><th>缓存池</th></tr></thead><tbody><tr><td>boolean</td><td>1 位</td><td>false/true</td><td>false</td><td>false 和 true</td></tr><tr><td>char</td><td>16 位</td><td>&#39;\\u0000&#39;（0）到 &#39;\\uffff&#39;（65535）</td><td>\\u0000（空格）</td><td>\\u0000 到 \\u007F</td></tr><tr><td>byte</td><td>8 位</td><td>-2^7（-128）到 2^7-1（127）</td><td>0</td><td>所有字符</td></tr><tr><td>short</td><td>16 位</td><td>-2^15（-32768）到 2^15-1（32767）</td><td>0</td><td>-128 到 127</td></tr><tr><td>int</td><td>32 位</td><td>-2^31 到 2^31-1</td><td>0</td><td>-128 到 127</td></tr><tr><td>long</td><td>64 位</td><td>-2^63 到 2^63-1</td><td>0</td><td>-</td></tr><tr><td>float</td><td>32 位</td><td>-2^128 到 2^128</td><td>0.0f</td><td>-</td></tr><tr><td>double</td><td>64 位</td><td>-2^1024 到 2^1024</td><td>0.0d</td><td>-</td></tr></tbody></table><h3 id="引用数据类型" tabindex="-1">引用数据类型 <a class="header-anchor" href="#引用数据类型" aria-label="Permalink to &quot;引用数据类型&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>引用数据类型被创建时，首先会在栈内存中分配一块空间，然后在堆内存中也会分配一块具体的空间用来存储数据的具体信息，即 hash 值，然后由栈中引用指向堆中的对象地址。</p></div><p>Java 中的类、接口和数组都是引用数据类型。</p><h3 id="两种类型的区别" tabindex="-1">两种类型的区别 <a class="header-anchor" href="#两种类型的区别" aria-label="Permalink to &quot;两种类型的区别&quot;">​</a></h3><p>基本数据类型：</p><ol><li>变量名指向具体的数值。</li><li>基本数据类型存储在<strong>栈</strong>上。</li></ol><p>引用数据类型：</p><ol><li>变量名指向的是存储对象的内存地址，在<strong>栈</strong>上。</li><li>内存地址指向的对象存储在<strong>堆</strong>上。</li></ol><p><strong>堆</strong>是在程序运行时在内存中申请的空间（可理解为动态的过程）；切记，不是在编译时；因此，Java 中的对象就放在这里，这样做的好处就是：</p><p>当需要一个对象时，只需要通过 new 关键字写一行代码即可，当执行这行代码时，会自动在内存的“堆”区分配空间——这样就很灵活。</p><p><strong>栈</strong>，能够和处理器（CPU，也就是脑子）直接关联，因此访问速度更快。既然访问速度快，要好好利用啊！Java 就把对象的引用放在栈里。为什么呢？因为引用的使用频率高吗？</p><p>不是的，因为 Java 在编译程序时，必须明确的知道存储在栈里的东西的生命周期，否则就没法释放旧的内存来开辟新的内存空间存放引用——空间就那么大，前浪要把后浪拍死在沙滩上啊。</p><h2 id="数据类型转换" tabindex="-1">数据类型转换 <a class="header-anchor" href="#数据类型转换" aria-label="Permalink to &quot;数据类型转换&quot;">​</a></h2><h3 id="自动类型转换" tabindex="-1">自动类型转换 <a class="header-anchor" href="#自动类型转换" aria-label="Permalink to &quot;自动类型转换&quot;">​</a></h3><p>如果以下 2 个条件都满足，那么将一种类型的数据赋给另外一种类型的变量的时候，将会发生自动类型转换（automatic type conversion）。</p><ul><li>两种数据类型彼此兼容</li><li>目标类型的取值范围大于源数据类型（低级类型数据转换成高级类型数据） <ul><li>数值型数据的转换：byte→short→int→long→float→double。</li><li>字符型转换为整型：char→int。</li></ul></li></ul><h3 id="强制类型转换" tabindex="-1">强制类型转换 <a class="header-anchor" href="#强制类型转换" aria-label="Permalink to &quot;强制类型转换&quot;">​</a></h3><p>所以当两种数据类型不兼容，或目标类型的取值范围小于源类型时，自动转换将无法进行，这时就需要进行强制类型转换。</p><p>其语法格式如下：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">(type)variableName</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">(type)variableName</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>例如：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">double</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5.0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">)b;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">double</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5.0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">int</span><span style="color:#24292E;">)b;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上述代码中首先将 double 类型变量 b 的值强制转换成 int 类型，然后将值赋给 a，但是变量 b 本身的值是没有发生变化的。</p><p>在强制类型转换中，如果是将浮点类型的值转换为整数，直接去掉小数点后边的所有数字；而如果是整数类型强制转换为浮点类型时，将在小数点后面补零。</p><h3 id="int-和-char-类型互转" tabindex="-1">int 和 char 类型互转 <a class="header-anchor" href="#int-和-char-类型互转" aria-label="Permalink to &quot;int 和 char 类型互转&quot;">​</a></h3><p>这里整理一波 int 和 char 类型的互转，它们之间比较特殊。也会在以后的学习当中经常遇到。</p><ol><li>int 类型的数据可以通过 <code>(char)</code> 类型强制、<code>Character.forDigit()</code> 方法和 Integer 的 toString() 方法，转换为 char 类型，其转换的映射可通过 ASCII 表查询。</li></ol><div class="language-Java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">65</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">((</span><span style="color:#F97583;">char</span><span style="color:#E1E4E8;">)a); </span><span style="color:#6A737D;">// A</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">65</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">((</span><span style="color:#D73A49;">char</span><span style="color:#24292E;">)a); </span><span style="color:#6A737D;">// A</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>char 转 int</li></ol><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;A&#39;</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// 65</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;A&#39;</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">// 65</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="int-和-list-integer-转换" tabindex="-1"><code>int[]</code> 和 <code>List&lt;Integer&gt;</code> 转换 <a class="header-anchor" href="#int-和-list-integer-转换" aria-label="Permalink to &quot;\`int[]\` 和 \`List&lt;Integer&gt;\` 转换&quot;">​</a></h3><p>在实际开发中，常常会用到 <code>int[]</code> 与 <code>List&lt;Integer&gt;</code> 的相互转换。</p><ul><li><code>List&lt;Integer&gt;</code> 转 <code>int[]</code></li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">[] arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> list.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">mapToInt</span><span style="color:#E1E4E8;">(x </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> x).</span><span style="color:#B392F0;">toArray</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;">[] arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> list.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">mapToInt</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> x).</span><span style="color:#6F42C1;">toArray</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>int[]</code> 转 <code>List&lt;Integer&gt;</code></li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">List&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; list </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">(arr).</span><span style="color:#B392F0;">boxed</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">collect</span><span style="color:#E1E4E8;">(Collectors.</span><span style="color:#B392F0;">toList</span><span style="color:#E1E4E8;">());</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">List&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; list </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">(arr).</span><span style="color:#6F42C1;">boxed</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">collect</span><span style="color:#24292E;">(Collectors.</span><span style="color:#6F42C1;">toList</span><span style="color:#24292E;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="./[https://](https://tobebetterjavaer.com/basic-grammar/type-cast.html).html">Java 程序员进阶之路</a></li><li><a href="https://pdai.tech/md/java/basic/java-basic-oop.html" target="_blank" rel="noreferrer">Java 基础 - Java 全栈知识体系</a></li></ul>`,60),o=[e];function p(r,c,i,d,y,h){return s(),l("div",null,o)}const b=a(n,[["render",p]]);export{u as __pageData,b as default};

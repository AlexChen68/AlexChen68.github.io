import{_ as e,o as a,c as t,Q as r}from"./chunks/framework.01af844e.js";const m=JSON.parse('{"title":"微服务","description":"","frontmatter":{"title":"微服务","date":"2023-10-17T00:00:00.000Z"},"headers":[],"relativePath":"architecture/micro-service/index.md","filePath":"architecture/micro-service/index.md","lastUpdated":1701689478000}'),o={name:"architecture/micro-service/index.md"},i=r('<h1 id="微服务架构" tabindex="-1">微服务架构 <a class="header-anchor" href="#微服务架构" aria-label="Permalink to &quot;微服务架构&quot;">​</a></h1><h2 id="什么是微服务架构" tabindex="-1">什么是微服务架构？ <a class="header-anchor" href="#什么是微服务架构" aria-label="Permalink to &quot;什么是微服务架构？&quot;">​</a></h2><p>所谓服务（service），就是在后台不间断运行、提供某种功能的一个程序。最常见的服务就是 Web 服务，通过 80 端口向外界提供网页访问。</p><p>微服务架构（通常简称为微服务）是指开发应用所用的一种架构形式。通过微服务，可将大型应用分解成多个独立的组件，其中每个组件都有各自的责任领域。在处理一个用户请求时，基于微服务的应用可能会调用许多内部微服务来共同生成其响应。</p><p>容器是微服务架构的绝佳示例，因为它们可让您专注于开发服务，而无需担心依赖项。现代云原生应用通常使用容器构建为微服务。</p><h2 id="微服务架构的定义" tabindex="-1">微服务架构的定义 <a class="header-anchor" href="#微服务架构的定义" aria-label="Permalink to &quot;微服务架构的定义&quot;">​</a></h2><blockquote><p>微服务架构是一种应用架构类型，其中应用会开发为一系列服务。它提供了独立开发、部署和维护微服务架构图和服务的框架。</p></blockquote><p>在微服务架构中，每个微服务都是独立的服务，旨在容纳一种应用特性并处理离散的任务。每个微服务都通过简单的接口与其他服务通信，以解决业务问题。</p><h2 id="微服务架构的用途有哪些" tabindex="-1">微服务架构的用途有哪些？ <a class="header-anchor" href="#微服务架构的用途有哪些" aria-label="Permalink to &quot;微服务架构的用途有哪些？&quot;">​</a></h2><p>通常，微服务可用于加快应用开发速度。使用 Java 构建的微服务架构非常常见，尤其是 Spring Boot 架构。比较微服务与面向服务的架构也很常见。它们具有相同的目标，即将单体式应用分解为更小的组件，但这些架构所用的具体方法素有不同。</p>',10),c=[i];function n(s,d,h,l,_,p){return a(),t("div",null,c)}const f=e(o,[["render",n]]);export{m as __pageData,f as default};

const n=JSON.parse(`{"key":"v-711d1774","path":"/java/concurrency/juc/collection.html","title":"并发集合容器","lang":"zh-CN","frontmatter":{"title":"并发集合容器","category":"Concurrency","date":"2023-03-09T00:00:00.000Z","description":"同步容器与并发容器 我们知道在 java.util 包下提供了一些容器类，而 Vector 和 Hashtable 是线程安全的容器类，但是这些容器实现同步的方式是通过对方法加锁 (sychronized) 方式实现的，这样读写均需要锁操作，导致性能低下。 而即使是 Vector 这样线程安全的类，在面对多线程下的复合操作的时候也是需要通过客户端加锁的方式保证原子性。如下面例子说明： public class TestVector { \\tprivate Vector&lt;String&gt; vector; \\t//方法一 \\tpublic Object getLast(Vector vector) { \\t int lastIndex = vector.size() - 1; \\t return vector.get(lastIndex); \\t} \\t \\t//方法二 \\tpublic void deleteLast(Vector vector) { \\t int lastIndex = vector.size() - 1; \\t vector.remove(lastIndex); \\t} \\t \\t//方法三 \\tpublic Object getLastSysnchronized(Vector vector) { \\t\\tsynchronized(vector){ \\t\\t\\tint lastIndex = vector.size() - 1; \\t\\t\\treturn vector.get(lastIndex); \\t\\t} \\t} \\t//方法四 \\tpublic void deleteLastSysnchronized(Vector vector) { \\t\\tsynchronized (vector){ \\t\\t\\tint lastIndex = vector.size() - 1; \\t\\t\\tvector.remove(lastIndex); \\t\\t} \\t} }","head":[["meta",{"property":"og:url","content":"https://github.com/AlexChen68/AlexChen68.github.io/java/concurrency/juc/collection.html"}],["meta",{"property":"og:site_name","content":"AlexChen's Blog"}],["meta",{"property":"og:title","content":"并发集合容器"}],["meta",{"property":"og:description","content":"同步容器与并发容器 我们知道在 java.util 包下提供了一些容器类，而 Vector 和 Hashtable 是线程安全的容器类，但是这些容器实现同步的方式是通过对方法加锁 (sychronized) 方式实现的，这样读写均需要锁操作，导致性能低下。 而即使是 Vector 这样线程安全的类，在面对多线程下的复合操作的时候也是需要通过客户端加锁的方式保证原子性。如下面例子说明： public class TestVector { \\tprivate Vector&lt;String&gt; vector; \\t//方法一 \\tpublic Object getLast(Vector vector) { \\t int lastIndex = vector.size() - 1; \\t return vector.get(lastIndex); \\t} \\t \\t//方法二 \\tpublic void deleteLast(Vector vector) { \\t int lastIndex = vector.size() - 1; \\t vector.remove(lastIndex); \\t} \\t \\t//方法三 \\tpublic Object getLastSysnchronized(Vector vector) { \\t\\tsynchronized(vector){ \\t\\t\\tint lastIndex = vector.size() - 1; \\t\\t\\treturn vector.get(lastIndex); \\t\\t} \\t} \\t//方法四 \\tpublic void deleteLastSysnchronized(Vector vector) { \\t\\tsynchronized (vector){ \\t\\t\\tint lastIndex = vector.size() - 1; \\t\\t\\tvector.remove(lastIndex); \\t\\t} \\t} }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-06-02T19:58:12.000Z"}],["meta",{"property":"article:author","content":"AlexChen"}],["meta",{"property":"article:published_time","content":"2023-03-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-06-02T19:58:12.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并发集合容器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-03-09T00:00:00.000Z\\",\\"dateModified\\":\\"2023-06-02T19:58:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AlexChen\\",\\"url\\":\\"https://github.com/AlexChen68\\"}]}"]]},"headers":[{"level":2,"title":"同步容器与并发容器","slug":"同步容器与并发容器","link":"#同步容器与并发容器","children":[]},{"level":2,"title":"并发容器类介绍","slug":"并发容器类介绍","link":"#并发容器类介绍","children":[{"level":3,"title":"并发 Map","slug":"并发-map","link":"#并发-map","children":[]},{"level":3,"title":"并发 Queue","slug":"并发-queue","link":"#并发-queue","children":[]},{"level":3,"title":"并发 Set","slug":"并发-set","link":"#并发-set","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1680340044000,"updatedTime":1685735892000,"contributors":[{"name":"alexchen","email":"1274812218@qq.com","commits":2}]},"readingTime":{"minutes":5.56,"words":1668},"filePathRelative":"java/concurrency/juc/collection.md","localizedDate":"2023年3月9日","excerpt":"<h2> 同步容器与并发容器</h2>\\n<p>我们知道在 java.util 包下提供了一些容器类，而 Vector 和 Hashtable 是线程安全的容器类，但是这些容器实现同步的方式是通过对方法加锁 (sychronized) 方式实现的，这样读写均需要锁操作，导致性能低下。</p>\\n<p>而即使是 Vector 这样线程安全的类，在面对多线程下的复合操作的时候也是需要通过客户端加锁的方式保证原子性。如下面例子说明：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">TestVector</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Vector</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">&gt;</span></span> vector<span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token comment\\">//方法一</span>\\n\\t<span class=\\"token keyword\\">public</span>  <span class=\\"token class-name\\">Object</span> <span class=\\"token function\\">getLast</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Vector</span> vector<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t    <span class=\\"token keyword\\">int</span> lastIndex <span class=\\"token operator\\">=</span> vector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\t    <span class=\\"token keyword\\">return</span> vector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>lastIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\n\\t<span class=\\"token comment\\">//方法二</span>\\n\\t<span class=\\"token keyword\\">public</span>  <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">deleteLast</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Vector</span> vector<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t    <span class=\\"token keyword\\">int</span> lastIndex <span class=\\"token operator\\">=</span> vector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\t    vector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">remove</span><span class=\\"token punctuation\\">(</span>lastIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\t\\n\\t<span class=\\"token comment\\">//方法三</span>\\n\\t<span class=\\"token keyword\\">public</span>  <span class=\\"token class-name\\">Object</span> <span class=\\"token function\\">getLastSysnchronized</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Vector</span> vector<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">synchronized</span><span class=\\"token punctuation\\">(</span>vector<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">int</span> lastIndex <span class=\\"token operator\\">=</span> vector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\t<span class=\\"token keyword\\">return</span> vector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>lastIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n\\n\\t<span class=\\"token comment\\">//方法四</span>\\n\\t<span class=\\"token keyword\\">public</span>  <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">deleteLastSysnchronized</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Vector</span> vector<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t\\t<span class=\\"token keyword\\">synchronized</span> <span class=\\"token punctuation\\">(</span>vector<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n\\t\\t\\t<span class=\\"token keyword\\">int</span> lastIndex <span class=\\"token operator\\">=</span> vector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t\\tvector<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">remove</span><span class=\\"token punctuation\\">(</span>lastIndex<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\t<span class=\\"token punctuation\\">}</span>\\n\\t<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};

const e=JSON.parse(`{"key":"v-7c56260e","path":"/spring/spring/","title":"Spring 概述","lang":"zh-CN","frontmatter":{"title":"Spring 概述","date":"2022-09-15T00:00:00.000Z","index":false,"article":false,"description":"Spring 介绍 要谈 Spring 的历史，就要先谈 J2EE。J2EE 应用程序的广泛实现是在 1999 年和 2000 年开始的，它的出现带来了诸如事务管理之类的核心中间层概念的标准化，但是在实践中并没有获得绝对的成功，因为开发效率，开发难度和实际的性能都令人失望。 曾经使用过 EJB 开发 JAVA EE 应用的人，一定知道，在 EJB 开始的学习和应用非常的艰苦，很多东西都不能一下子就很容易的理解。EJB 要严格地实现各种不同类型的接口，类似的或者重复的代码大量存在。而配置也是复杂和单调，同样使用 JNDI 进行对象查找的代码也是单调而枯燥。虽然有一些开发工作随着 xdoclet 的出现，而有所缓解，但是学习 EJB 的高昂代价，和极低的开发效率，极高的资源消耗，都造成了 EJB 的使用困难。而 Spring 出现的初衷就是为了解决类似的这些问题。","head":[["meta",{"property":"og:url","content":"https://github.com/AlexChen68/AlexChen68.github.io/spring/spring/"}],["meta",{"property":"og:site_name","content":"AlexChen's Blog"}],["meta",{"property":"og:title","content":"Spring 概述"}],["meta",{"property":"og:description","content":"Spring 介绍 要谈 Spring 的历史，就要先谈 J2EE。J2EE 应用程序的广泛实现是在 1999 年和 2000 年开始的，它的出现带来了诸如事务管理之类的核心中间层概念的标准化，但是在实践中并没有获得绝对的成功，因为开发效率，开发难度和实际的性能都令人失望。 曾经使用过 EJB 开发 JAVA EE 应用的人，一定知道，在 EJB 开始的学习和应用非常的艰苦，很多东西都不能一下子就很容易的理解。EJB 要严格地实现各种不同类型的接口，类似的或者重复的代码大量存在。而配置也是复杂和单调，同样使用 JNDI 进行对象查找的代码也是单调而枯燥。虽然有一些开发工作随着 xdoclet 的出现，而有所缓解，但是学习 EJB 的高昂代价，和极低的开发效率，极高的资源消耗，都造成了 EJB 的使用困难。而 Spring 出现的初衷就是为了解决类似的这些问题。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-14T04:47:17.000Z"}],["meta",{"property":"article:author","content":"AlexChen"}],["meta",{"property":"article:published_time","content":"2022-09-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-14T04:47:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Spring 概述\\",\\"description\\":\\"Spring 介绍 要谈 Spring 的历史，就要先谈 J2EE。J2EE 应用程序的广泛实现是在 1999 年和 2000 年开始的，它的出现带来了诸如事务管理之类的核心中间层概念的标准化，但是在实践中并没有获得绝对的成功，因为开发效率，开发难度和实际的性能都令人失望。 曾经使用过 EJB 开发 JAVA EE 应用的人，一定知道，在 EJB 开始的学习和应用非常的艰苦，很多东西都不能一下子就很容易的理解。EJB 要严格地实现各种不同类型的接口，类似的或者重复的代码大量存在。而配置也是复杂和单调，同样使用 JNDI 进行对象查找的代码也是单调而枯燥。虽然有一些开发工作随着 xdoclet 的出现，而有所缓解，但是学习 EJB 的高昂代价，和极低的开发效率，极高的资源消耗，都造成了 EJB 的使用困难。而 Spring 出现的初衷就是为了解决类似的这些问题。\\"}"]]},"headers":[{"level":2,"title":"Spring 介绍","slug":"spring-介绍","link":"#spring-介绍","children":[]}],"git":{"createdTime":1680340044000,"updatedTime":1684039637000,"contributors":[{"name":"alexchen","email":"1274812218@qq.com","commits":2}]},"readingTime":{"minutes":1.63,"words":489},"filePathRelative":"spring/spring/README.md","localizedDate":"2022年9月15日","excerpt":"<h2> Spring 介绍</h2>\\n<p>要谈 Spring 的历史，就要先谈 J2EE。J2EE 应用程序的广泛实现是在 1999 年和 2000 年开始的，它的出现带来了诸如事务管理之类的核心中间层概念的标准化，但是在实践中并没有获得绝对的成功，因为开发效率，开发难度和实际的性能都令人失望。</p>\\n<p>曾经使用过 EJB 开发 JAVA EE 应用的人，一定知道，在 EJB 开始的学习和应用非常的艰苦，很多东西都不能一下子就很容易的理解。EJB 要严格地实现各种不同类型的接口，类似的或者重复的代码大量存在。而配置也是复杂和单调，同样使用 JNDI 进行对象查找的代码也是单调而枯燥。虽然有一些开发工作随着 xdoclet 的出现，而有所缓解，但是学习 EJB 的高昂代价，和极低的开发效率，极高的资源消耗，都造成了 EJB 的使用困难。而 Spring 出现的初衷就是为了解决类似的这些问题。</p>","autoDesc":true}`);export{e as data};

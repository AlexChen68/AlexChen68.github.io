import{_ as t,W as c,X as r,Y as d,Z as s,$ as a,a0 as n,a2 as i,a1 as e,C as l}from"./framework-ea95e8eb.js";const u={},k=s("p",null,"本文介绍两种安装 Mysql 的方式，以及 Mysql 的权限设置：",-1),m=s("ul",null,[s("li",null,[s("a",{href:"#docker"},"Docker 安装 Mysql")]),s("li",null,[s("a",{href:"#yum"},"Yum 安装 Mysql")]),s("li",null,[s("a",{href:"#auth-config"},"Mysql 权限设置")])],-1),h=e(`<h2 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker 安装 Mysql</h2><h3 id="下载-mysql-镜像" tabindex="-1"><a class="header-anchor" href="#下载-mysql-镜像" aria-hidden="true">#</a> 下载 Mysql 镜像</h3><p>下载最新版本</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull mysql
</code></pre></div><p>或者指定版本号</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull mysql:8.0.31
</code></pre></div><h3 id="启动容器" tabindex="-1"><a class="header-anchor" href="#启动容器" aria-hidden="true">#</a> 启动容器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> mysql8<span class="token punctuation">\\</span> 
<span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306<span class="token punctuation">\\</span> 
<span class="token parameter variable">-v</span> ~/docker/mysql/conf:/etc/mysql/conf.d<span class="token punctuation">\\</span> 
<span class="token parameter variable">-v</span> ~/docker/mysql/data:/var/lib/mysql<span class="token punctuation">\\</span> 
<span class="token parameter variable">-v</span> ~/docker/mysql/log:/var/log/mysql<span class="token punctuation">\\</span> 
<span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>PASSWORD<span class="token punctuation">\\</span> 
<span class="token parameter variable">-d</span> mysql:tag
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>--name</code> 参数为容器名称;</p><p><code>-p</code> 指定端口映射；</p><p><code>-v</code> 目录挂载，<code>:</code>前面为宿主机目录，后面为虚拟机对应目录；</p><p><code>-e</code> 为启动参数，<code>MYSQL_ROOT_PASSWORD</code> 是配置的 Mysql 的 root 用户密码；</p><p><code>-d</code> 后台运行容器。</p><p>示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># mac</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> mysql8 <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-v</span> ~/docker/mysql/conf:/etc/mysql/conf.d <span class="token parameter variable">-v</span> ~/docker/mysql/data:/var/lib/mysql <span class="token parameter variable">-v</span> ~/docker/mysql/log:/var/log/mysql <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root <span class="token parameter variable">-d</span> mysql

<span class="token comment"># windows</span>
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> mysql8 <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-v</span> D:/Docker/mysql/conf:/etc/mysql/conf.d <span class="token parameter variable">-v</span> D:/Docker/mysql/data:/var/lib/mysql <span class="token parameter variable">-v</span> D:/Docker/mysql/logs:/var/log/mysql <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span>root <span class="token parameter variable">-d</span> mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动后可以通过 <code>docker ps</code> 查看容器启动情况。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>本文示例中的 <code>mysql8</code> 参数位置，都为容器实例的名称，实际使用时请修改为自己容器的名称。</p></div><h3 id="查看生成的-root-密码" tabindex="-1"><a class="header-anchor" href="#查看生成的-root-密码" aria-hidden="true">#</a> 查看生成的 Root 密码</h3><p>初始化完成后，命令的输出将包含为 root 用户生成的随机密码; 例如，使用以下命令检查密码：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs mysql8 <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">|</span> <span class="token function">grep</span> GENERATED
</code></pre></div><h3 id="从容器内连接-mysql" tabindex="-1"><a class="header-anchor" href="#从容器内连接-mysql" aria-hidden="true">#</a> 从容器内连接 mysql</h3><p>服务器准备就绪后，您可以在 MySQL 服务器中运行 mysql 客户端。容器，并将其连接到 MySQL 服务器。</p><p>使用 <code>docker exec -it</code> 命令在 Docker 容器内启动 mysql 客户端 已启动，如下所示：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql8 mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span>
</code></pre></div><p>随后输入 root 用户的密码登录。</p><h3 id="修改-root-密码" tabindex="-1"><a class="header-anchor" href="#修改-root-密码" aria-hidden="true">#</a> 修改 Root 密码</h3><p>通常，我们首次连接 mysql 后，都需要修改 Root 用户的密码，使用以下命令（替换 password 为修改后的密码）：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;root&#39;</span><span class="token variable">@&#39;localhost&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>更改密码后需要刷新权限：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>flush privileges<span class="token punctuation">;</span>
</code></pre></div><h3 id="容器外壳访问" tabindex="-1"><a class="header-anchor" href="#容器外壳访问" aria-hidden="true">#</a> 容器外壳访问</h3><p>要对 MySQL Server 容器进行 shell 访问，请使用 <code>docker exec -it</code> 命令启动 bash shell 容器内：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> mysql8 <span class="token function">bash</span>
</code></pre></div><p>然后，可以在容器内运行 Linux 命令。</p><h3 id="停止和删除-mysql-容器" tabindex="-1"><a class="header-anchor" href="#停止和删除-mysql-容器" aria-hidden="true">#</a> 停止和删除 MySQL 容器</h3><p>要停止我们创建的 MySQL 服务器容器，请使用 命令：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop mysql8
</code></pre></div><p><code>docker stop</code> 向 <code>mysqld</code> 进程发送 <code>SIGTERM</code> 信号，以便关闭服务器优雅地下来。</p><p>还要注意，当容器的主要进程（MySQL 服务器中的 mysqld 容器）停止，Docker 容器会自动停止。</p><p>要再次启动 MySQL 服务器容器，请执行以下操作：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> start mysql8
</code></pre></div><p>使用单个停止和重新启动 MySQL 服务器容器 命令：</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>docker restart mysql8
</code></pre></div><p>要删除 MySQL 容器，请先停止它，然后使用 <strong>docker rm</strong> 命令：</p><div class="language-terminal" data-ext="terminal"><pre class="language-terminal"><code>docker stop mysql8
docker rm mysql8
</code></pre></div><h2 id="yum" tabindex="-1"><a class="header-anchor" href="#yum" aria-hidden="true">#</a> Yum 安装 Mysql</h2><blockquote><p>在实际生产中，我们通过不会使用 Docker 方式安装 Mysql，主要是因为 Docker 镜像与宿主机之间的文件映射，会降低 Mysql 的效率；更常用的方式还是直接在 Linux 下安装 Mysql。</p></blockquote><h3 id="添加-mysql-yum-源" tabindex="-1"><a class="header-anchor" href="#添加-mysql-yum-源" aria-hidden="true">#</a> 添加 MySQL Yum 源</h3>`,48),v={href:"https://dev.mysql.com/downloads/repo/yum/",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>此步骤可以通过在虚机上执行以下命令直接下载到虚机上（替换为自己的 yum 源版本）：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://dev.mysql.com/get/mysql80-community-release-el8-<span class="token punctuation">{</span>version-number<span class="token punctuation">}</span>.noarch.rpm
</code></pre></div><p>然后在虚机上安装 yum 源，选择一个命令即可：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># yum 命令安装</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> mysql80-community-release-el8-<span class="token punctuation">{</span>version-number<span class="token punctuation">}</span>.noarch.rpm

<span class="token comment"># rpm 命令安装</span>
<span class="token function">sudo</span> <span class="token function">rpm</span> <span class="token parameter variable">-ivh</span> mysql80-community-release-el8-<span class="token punctuation">{</span>version-number<span class="token punctuation">}</span>.noarch.rpm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用以下命令可以检查 MySQL Yum 源是否已通过以下命令成功添加：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>yum repolist enabled <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;mysql.*-community.*&quot;</span>
</code></pre></div><h3 id="选择发行版本" tabindex="-1"><a class="header-anchor" href="#选择发行版本" aria-hidden="true">#</a> 选择发行版本</h3><p>使用 MySQL Yum 存储库时，最新的 GA 系列（当前为 MySQL 8.0）被选为 默认安装。有时你可能需要更改为其他版本，使用此命令可以查看 MySQL Yum 存储库中的所有子存储库，以及 查看其中哪些已启用或禁用：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>yum repolist all <span class="token operator">|</span> <span class="token function">grep</span> mysql
</code></pre></div><p>你可以使用命令更改需要安装的版本为 <code>--enable</code>，例如禁用 5.7 版本，启用 8.0 版本：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum-config-manager <span class="token parameter variable">--disable</span> mysql57-community
<span class="token function">sudo</span> yum-config-manager <span class="token parameter variable">--enable</span> mysql80-community
</code></pre></div><p>也可以手动修改 yum 源配置文件，通常它的路径是 <code>/etc/yum.repos.d/mysql-community.repo</code>，<strong>在修改之前一定要先备份</strong>：</p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code># Enable to use MySQL 8.0
[mysql80-community]
name=MySQL 8.0 Community Server
baseurl=http://repo.mysql.com/yum/mysql-8.0-community/el/6/$basearch/
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql-2022
       file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改你需要安装的版本的 <code>enabled=1</code>，不需要安装的自然是 <code>enabled=0</code> 啦。</p><h3 id="禁用默认的-mysql-模块" tabindex="-1"><a class="header-anchor" href="#禁用默认的-mysql-模块" aria-hidden="true">#</a> 禁用默认的 MySQL 模块</h3><p>（仅限 EL8 系统）基于 EL8 的系统，如 RHEL8 和 Oracle Linux 8 包含一个默认启用的 MySQL 模块。除非禁用此模块，否则它会屏蔽 MySQL 存储库。禁用包含的模块并使 MySQL 存储库包可见，请使用以下内容命令：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum module disable mysql
</code></pre></div><h3 id="安装-mysql" tabindex="-1"><a class="header-anchor" href="#安装-mysql" aria-hidden="true">#</a> 安装 MySQL</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> mysql-community-server
</code></pre></div><p>这个命令会安装一系列 Mysql 服务器所需要的包，需要耐心等待。</p>`,20),g={class:"hint-container tip"},b=s("p",{class:"hint-container-title"},"提示",-1),q=e(`<h3 id="启动-mysql-服务器" tabindex="-1"><a class="header-anchor" href="#启动-mysql-服务器" aria-hidden="true">#</a> 启动 MySQL 服务器</h3><p>使用以下命令启动 MySQL 服务器：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>systemctl start mysqld
</code></pre></div><p>查看状态：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>systemctl status mysqld
</code></pre></div><p>MySQL 第一次启动时会执行以下的操作：</p><ol><li>服务器的初始化;</li><li>data 目录会产生 SSL 证数和 key 文件;</li><li>安装 validate_password 组件并且生效;</li><li>创建超级账户 <code>&#39;root&#39;@&#39;localhost&#39;</code>，为超级账户生成密码并且把密码保存到错误日志中，通过以下命令获取密码：</li></ol><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token string">&#39;temporary password&#39;</span> /var/log/mysqld.log
</code></pre></div><h3 id="连接-mysql" tabindex="-1"><a class="header-anchor" href="#连接-mysql" aria-hidden="true">#</a> 连接 Mysql</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span>
</code></pre></div><p>输入查看到的 root 用户的密码即可登录，首次登录建议修改 root 用户密码。</p><h3 id="修改-root-密码-1" tabindex="-1"><a class="header-anchor" href="#修改-root-密码-1" aria-hidden="true">#</a> 修改 Root 密码</h3><p>通常，我们首次连接 mysql 后，都需要修改 root 用户的密码，使用以下命令（替换 password 为修改后的密码）：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;root&#39;</span><span class="token variable">@&#39;localhost&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>更改密码后需要刷新权限：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>flush privileges<span class="token punctuation">;</span>
</code></pre></div><h2 id="auth-config" tabindex="-1"><a class="header-anchor" href="#auth-config" aria-hidden="true">#</a> Mysql 权限设置</h2><blockquote><p>从 Mysql 8.0 起，root 用户默认只能本机登录，不能远程登录；所以通常我们需要创建新的用户，并授予数据库和表的操作权限。</p></blockquote><h3 id="查看账号" tabindex="-1"><a class="header-anchor" href="#查看账号" aria-hidden="true">#</a> 查看账号</h3><p>在创建用户之前，我们应该先看一下已有的用户：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token keyword">select</span> user,host from mysql.user<span class="token punctuation">;</span>
</code></pre></div><p><code>host</code> 列中，<code>localhost</code> 表示仅本地可以连接，<code>%</code> 表示可以远程连接。</p><h3 id="创建账号" tabindex="-1"><a class="header-anchor" href="#创建账号" aria-hidden="true">#</a> 创建账号</h3><p>我们来创建一个 test 用户，设置可以远程连接：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>create user <span class="token string">&#39;test&#39;</span>@<span class="token string">&#39;%&#39;</span> identified by <span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>参数说明：</p><ul><li>username：你将创建的用户名；</li><li>host：指定该用户在哪个主机上可以登录，如果是本地用户可用 localhost，如果想让该用户可以从任意远程主机登录，可以使用通配符%，还可以指定的 ip 地址范围；</li><li>password：给用户设置密码，<code>password</code>必须是明文。在将用户帐户保存到用户表之前，MySQL 将加密明文密码。</li></ul><p>再查看用户表，已经创建完成：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> user,host from mysql.user where <span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">;</span>
+------+------+
<span class="token operator">|</span> user <span class="token operator">|</span> <span class="token function">host</span> <span class="token operator">|</span>
+------+------+
<span class="token operator">|</span> <span class="token builtin class-name">test</span> <span class="token operator">|</span> %    <span class="token operator">|</span>
+------+------+
<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除账号" tabindex="-1"><a class="header-anchor" href="#删除账号" aria-hidden="true">#</a> 删除账号</h3><p>删除账号使用 <code>DROP</code> 命令：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">USER</span> <span class="token string">&#39;test&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="授予账号权限" tabindex="-1"><a class="header-anchor" href="#授予账号权限" aria-hidden="true">#</a> 授予账号权限</h3><p>数据库用户创建完成后，还需要添加对指定数据库的权限才可以访问或修改数据库的数据。</p><p>授权命令的语法如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">GRANT</span> <span class="token punctuation">[</span><span class="token keyword">privileges</span><span class="token punctuation">]</span>
  <span class="token keyword">ON</span> <span class="token punctuation">[</span><span class="token keyword">database</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">table</span><span class="token punctuation">]</span>
  <span class="token keyword">TO</span> <span class="token punctuation">[</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">]</span>@<span class="token punctuation">[</span><span class="token string">&#39;ip&#39;</span><span class="token punctuation">]</span>
  <span class="token keyword">WITH</span> <span class="token keyword">GRANT</span> <span class="token keyword">OPTION</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数说明：</p><ul><li><code>privileges</code>: 授予的静态权限标识；例如 <code>ALL</code> 表示全部权限，<code>CREATE</code> 表示数据库、表或索引的创建权限；多个权限间用 <code>,</code> 分割。</li><li><code>[database].[table]</code>: 可以进行指定权限操作的数据库和表的范围；例如 <code>*.*</code> 表示任意数据库的任意表，<code>test.*</code> 表示 test 数据库的任意表；</li><li><code>[&#39;user&#39;]@[&#39;ip&#39;]</code>: 授权的用户。</li><li><code>WITH GRANT OPTION</code>（可选）: 加上了该选项的用户可以对其他用户授权；未加的则不行。</li></ul>`,38),w={href:"https://dev.mysql.com/doc/refman/8.0/en/creating-accounts.html",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">// 授予用户 test 全部数据库的全部操作权限</span>
<span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;test&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 授予用户 test \`zeus_lowcode\` 数据库全部表的全部操作权限</span>
<span class="token keyword">GRANT</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> zeus_lowcode<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;test&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 授予用户 test 全部数据库的 SELECT,INSERT,UPDATE,DELETE,CREATE,DROP 权限</span>
<span class="token keyword">GRANT</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span><span class="token keyword">INSERT</span><span class="token punctuation">,</span><span class="token keyword">UPDATE</span><span class="token punctuation">,</span><span class="token keyword">DELETE</span><span class="token punctuation">,</span><span class="token keyword">CREATE</span><span class="token punctuation">,</span><span class="token keyword">DROP</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">TO</span> <span class="token string">&#39;test&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看帐户权限" tabindex="-1"><a class="header-anchor" href="#查看帐户权限" aria-hidden="true">#</a> 查看帐户权限</h3><p>使用 <code>SHOW GRANTS</code> 命令可以查看全部用户的权限；如果只需要查看指定用户的权限，可以使用如下命令：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>SHOW GRANTS FOR <span class="token string">&#39;test&#39;</span>@<span class="token string">&#39;%&#39;</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="撤销帐户权限" tabindex="-1"><a class="header-anchor" href="#撤销帐户权限" aria-hidden="true">#</a> 撤销帐户权限</h3><p>要撤消帐户权限，请使用 <code>REVOKE</code> 语句：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">REVOKE</span> <span class="token punctuation">[</span><span class="token keyword">privileges</span><span class="token punctuation">]</span>
  <span class="token keyword">ON</span> <span class="token punctuation">[</span><span class="token keyword">database</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span><span class="token keyword">table</span><span class="token punctuation">]</span>
  <span class="token keyword">FROM</span> <span class="token punctuation">[</span><span class="token string">&#39;user&#39;</span><span class="token punctuation">]</span>@<span class="token punctuation">[</span><span class="token string">&#39;ip&#39;</span><span class="token punctuation">]</span>
</code></pre></div><p>其参数与创建账号时的参数相对应。</p><p>示例：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">// 撤销用户 test 的全部权限</span>
<span class="token keyword">REVOKE</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&#39;test&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 撤销用户 test \`zeus_lowcode\` 数据库全部表的全部操作权限</span>
<span class="token keyword">REVOKE</span> <span class="token keyword">ALL</span> <span class="token keyword">ON</span> zeus_lowcode<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&#39;test&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 撤销用户 test 全部数据库的 SELECT,INSERT,UPDATE,DELETE,CREATE,DROP 权限</span>
<span class="token keyword">REVOKE</span> <span class="token keyword">SELECT</span><span class="token punctuation">,</span><span class="token keyword">INSERT</span><span class="token punctuation">,</span><span class="token keyword">UPDATE</span><span class="token punctuation">,</span><span class="token keyword">DELETE</span><span class="token punctuation">,</span><span class="token keyword">CREATE</span><span class="token punctuation">,</span><span class="token keyword">DROP</span> <span class="token keyword">ON</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token string">&#39;test&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改账号密码及格式" tabindex="-1"><a class="header-anchor" href="#修改账号密码及格式" aria-hidden="true">#</a> 修改账号密码及格式</h3><ul><li>修改密码的命令格式：</li></ul><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;test&#39;</span><span class="token variable">@&#39;%&#39;</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">;</span>
</code></pre></div><p>如果你已经登录，则可以使用 <code>USER()</code> 表示已登陆的账号：</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token keyword">USER</span><span class="token punctuation">(</span><span class="token punctuation">)</span> IDENTIFIED <span class="token keyword">BY</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">;</span>
</code></pre></div><ul><li>身份验证插件问题</li></ul><p>有时候，在进行远程连接的时候，你可能会看见这个错误：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>Error connecting to database: Authentication plugin ‘caching_sha2_password’ cannot be loaded
</code></pre></div><p>这是因为从 Mysql8.0 开始，默认采用了新的 <code>caching_sha2_password</code> 的身份验证方式，常规的老的 web 服务接口大多采用 <code>mysql_native_password</code> 方式，Mysql 升级到 8.0 后会导致采用 <code>mysql_native_password</code> 方式的 web 服务无法连接数据库。只需要修改一下配置让 Mysql8.0 连接方式默认为 <code>mysql_native_password</code> 方式，有两种方式修改：</p><ol><li>方法一：在修改密码时指定认证插件</li></ol><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">USER</span> <span class="token string">&#39;test&#39;</span><span class="token variable">@&#39;%&#39;</span> IDENTIFIED <span class="token keyword">WITH</span> mysql_native_password <span class="token keyword">BY</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">;</span>
</code></pre></div><ol start="2"><li>方法二：修改 mysql 配置文件 <code>my.cnf</code>，将默认的认证插件修改为 <code>mysql_native_password</code></li></ol><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>default_authentication_plugin=mysql_native_password
</code></pre></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,25),E={href:"https://dev.mysql.com/doc/refman/8.0/en/docker-mysql-getting-started.html",target:"_blank",rel:"noopener noreferrer"};function x(_,R){const o=l("ExternalLinkIcon"),p=l("RouterLink");return c(),r("div",null,[k,m,d(" more "),h,s("p",null,[a("首先，在 "),s("a",v,[a("Mysql yum 源网站"),n(o)]),a("，下载适合自己系统和版本的 Yum 源，并上传到需要安装的机器上。")]),y,s("div",g,[b,s("p",null,[a("如果你觉得下载速度太慢，可以考虑使用阿里云的 yum 源替换，具体做法参考："),n(p,{to:"/devops/linux/yum.html#yum-aliyun"},{default:i(()=>[a("配置阿里云 yum 源")]),_:1})])]),q,s("p",null,[a("完整的授权规则见 "),s("a",w,[a("官方文档 - 6.2.8 添加帐户、分配权限和删除帐户"),n(o)])]),f,s("ul",null,[s("li",null,[s("a",E,[a("Deploying MySQL on Linux with Docker Containers"),n(o)])])])])}const L=t(u,[["render",x],["__file","1.1-install.html.vue"]]);export{L as default};

const n=JSON.parse(`{"key":"v-0420b52b","path":"/advance/ds/unionfind.html","title":"图 - UnionFind 并查集","lang":"zh-CN","frontmatter":{"title":"图 - UnionFind 并查集","category":"数据结构","date":"2023-05-11T00:00:00.000Z","description":"1. 什么是并查集（Union-Find）算法 并查集（Union-Find）算法是一个专门针对 动态连通性 的算法。关于动态连通性，可以参见这篇文章：并查集（Union-Find）算法 用途：以非常简单且巧妙的存储方式、算法来解决图论中无向图的节点动态连通的问题。很多复杂的 DFS 算法问题，都可以利用 Union-Find 算法更漂亮地解决。","head":[["meta",{"property":"og:url","content":"https://github.com/AlexChen68/AlexChen68.github.io/advance/ds/unionfind.html"}],["meta",{"property":"og:site_name","content":"AlexChen's Blog"}],["meta",{"property":"og:title","content":"图 - UnionFind 并查集"}],["meta",{"property":"og:description","content":"1. 什么是并查集（Union-Find）算法 并查集（Union-Find）算法是一个专门针对 动态连通性 的算法。关于动态连通性，可以参见这篇文章：并查集（Union-Find）算法 用途：以非常简单且巧妙的存储方式、算法来解决图论中无向图的节点动态连通的问题。很多复杂的 DFS 算法问题，都可以利用 Union-Find 算法更漂亮地解决。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-11T02:32:15.000Z"}],["meta",{"property":"article:author","content":"AlexChen"}],["meta",{"property":"article:published_time","content":"2023-05-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-05-11T02:32:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"图 - UnionFind 并查集\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-05-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-05-11T02:32:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"AlexChen\\",\\"url\\":\\"https://github.com/AlexChen68\\"}]}"]]},"headers":[{"level":2,"title":"1. 什么是并查集（Union-Find）算法","slug":"_1-什么是并查集-union-find-算法","link":"#_1-什么是并查集-union-find-算法","children":[]},{"level":2,"title":"2. 实现 Union-Find 算法","slug":"_2-实现-union-find-算法","link":"#_2-实现-union-find-算法","children":[]},{"level":2,"title":"3. 优化 Union-Find 算法","slug":"_3-优化-union-find-算法","link":"#_3-优化-union-find-算法","children":[{"level":3,"title":"3.1 复杂度分析：","slug":"_3-1-复杂度分析","link":"#_3-1-复杂度分析","children":[]},{"level":3,"title":"3.2 平衡性优化","slug":"_3-2-平衡性优化","link":"#_3-2-平衡性优化","children":[]},{"level":3,"title":"3.3 路径压缩优化","slug":"_3-3-路径压缩优化","link":"#_3-3-路径压缩优化","children":[]}]},{"level":2,"title":"4. 参考资料","slug":"_4-参考资料","link":"#_4-参考资料","children":[]}],"git":{"createdTime":1683772335000,"updatedTime":1683772335000,"contributors":[{"name":"alexchen","email":"1274812218@qq.com","commits":1}]},"readingTime":{"minutes":6.18,"words":1855},"filePathRelative":"advance/ds/unionfind.md","localizedDate":"2023年5月11日","excerpt":"<h2> 1. 什么是并查集（Union-Find）算法</h2>\\n<p>并查集（Union-Find）算法是一个专门针对 <code>动态连通性</code> 的算法。关于动态连通性，可以参见这篇文章：<a href=\\"https://labuladong.github.io/algo/di-yi-zhan-da78c/shou-ba-sh-03a72/bing-cha-j-323f3/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">并查集（Union-Find）算法</a></p>\\n<p><strong>用途</strong>：以非常简单且巧妙的存储方式、算法来解决图论中<strong>无向图的节点动态连通</strong>的问题。很多复杂的 DFS 算法问题，都可以利用 Union-Find 算法更漂亮地解决。</p>","autoDesc":true}`);export{n as data};

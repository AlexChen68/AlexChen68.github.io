import{_ as o,V as d,W as t,X as i,Y as e,Z as a,$ as n,a0 as r,D as c}from"./framework-e50407a6.js";const l={},p=e("p",null,"Redis 的介绍和初步安装、卸载教程。",-1),h=r(`<h2 id="redis-简介" tabindex="-1"><a class="header-anchor" href="#redis-简介" aria-hidden="true">#</a> Redis 简介</h2><p>Redis 是完全开源的，遵守 BSD 协议，是一个高性能的 key-value 数据库。</p><p>Redis 与其他 key - value 缓存产品有以下三个特点：</p><p>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。 Redis支持数据的备份，即master-slave模式的数据备份。</p><h2 id="安装和卸载" tabindex="-1"><a class="header-anchor" href="#安装和卸载" aria-hidden="true">#</a> 安装和卸载</h2><h3 id="docker-安装-redis" tabindex="-1"><a class="header-anchor" href="#docker-安装-redis" aria-hidden="true">#</a> Docker 安装 Redis</h3><p>拉取 Redis 最新镜像</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull redis:latest
</code></pre></div><p>查看镜像</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> images
</code></pre></div><p>使用自定义的 <code>redis.conf</code> 启动 Redis 容器，并绑定端口，<code>[redis-container-name]</code>使用自定义的容器名称替换</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">-v</span> /root/redis:/usr/local/etc/redis <span class="token parameter variable">--name</span> <span class="token punctuation">[</span>redis-container-name<span class="token punctuation">]</span> <span class="token parameter variable">-d</span> redis redis-server /usr/local/etc/redis/redis.conf
</code></pre></div><p>查看容器是否启动</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token punctuation">[</span>redis-container-name<span class="token punctuation">]</span>
</code></pre></div><p>进入 redis 容器，使用 <code>redis-cli</code> 登录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token punctuation">[</span>redis-container-name<span class="token punctuation">]</span> <span class="token function">bash</span>
<span class="token comment"># 进入 redis 命令行界面</span>
redis-cli
<span class="token comment"># 鉴权登录,yourpassword 为在 redis.conf 中，使用 requirepass 配置的密码</span>
auth yourpassword
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="redis-配置" tabindex="-1"><a class="header-anchor" href="#redis-配置" aria-hidden="true">#</a> Redis 配置</h3><h4 id="redis-conf-配置文件" tabindex="-1"><a class="header-anchor" href="#redis-conf-配置文件" aria-hidden="true">#</a> redis.conf 配置文件</h4><p>Redis 可以通过在启动时，指定配置文件 <code>redis.conf</code> 来加载自定义配置。</p>`,19),u={href:"https://github.com/redis/redis/blob/unstable/redis.conf",target:"_blank",rel:"noopener noreferrer"},g=r(`<p>常见的配置项：</p><ul><li><p>指定 Redis 是否以守护进程的方式启动，默认为 no，表示不以守护进程的方式启动</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>daemonize yes
</code></pre></div></li><li><p>指定 Redis 监听端口，默认端口为 6379</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>port 6379
</code></pre></div></li><li><p>设置 Redis 连接密码，如果配置了连接密码，客户端在连接 Redis 时需要通过 <code>AUTH &lt;password&gt;</code> 命令提供密码，默认关闭</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>requirepass password
</code></pre></div></li><li><p>绑定主机地址；如果指定了bind，则说明只允许来自指定网卡的Redis请求。如果没有指定，就说明可以接受来自任意一个网卡的Redis请求，需要远程连接时，可以注释掉该配置</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>bind 127.0.0.1
</code></pre></div></li><li><p>当 Redis 以守护进程方式运行时，Redis 默认会把 pid 写入 /var/run/redis.pid 文件，可以通过 pidfile 指定</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>pidfile /var/run/redis.pid
</code></pre></div></li><li><p>当客户端闲置多长秒后关闭连接，如果指定为 0 ，表示关闭该功能</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>timeout 300
</code></pre></div></li><li><p>设置数据库的数量，默认数据库为0，可以使用SELECT 命令在连接上指定数据库id</p><div class="language-conf" data-ext="conf"><pre class="language-conf"><code>databases 16
</code></pre></div></li></ul>`,2),f={href:"https://redis.io/docs/manual/config/",target:"_blank",rel:"noopener noreferrer"},k=r(`<h4 id="redis-cli-命令行配置" tabindex="-1"><a class="header-anchor" href="#redis-cli-命令行配置" aria-hidden="true">#</a> Redis-cli 命令行配置</h4><p>在通过 Redis-cli 工具连接上 Redis 并通过 <code>auth [password]</code> 认证后，可以使用 <code>config set/get [param]</code> 命令设置或查询 Redis 配置。</p><p>查看全部配置</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>config get *
</code></pre></div><p>查询某个配置，例如查询密码</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>config get requirepass
</code></pre></div><p>设置某个配置，例如设置密码</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>config <span class="token builtin class-name">set</span> requirepass <span class="token punctuation">[</span>password<span class="token punctuation">]</span>
</code></pre></div><h3 id="docker-卸载-redis" tabindex="-1"><a class="header-anchor" href="#docker-卸载-redis" aria-hidden="true">#</a> Docker 卸载 Redis</h3><p>查看正在运行的 redis 容器</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token punctuation">[</span>redis-container-name<span class="token punctuation">]</span>
</code></pre></div><p>停止容器，[redis-container-name] 为容器名称</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop <span class="token punctuation">[</span>redis-container-name<span class="token punctuation">]</span>
</code></pre></div><p>查看 Redis 镜像</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> iamges
</code></pre></div><p>删除 Redis 镜像，<code>[redis-image-id]</code> 为 Redis 镜像的 <code>IMAGE ID</code></p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> image <span class="token function">rm</span> <span class="token punctuation">[</span>redis-image-id<span class="token punctuation">]</span>
</code></pre></div><h2 id="redis-数据类型" tabindex="-1"><a class="header-anchor" href="#redis-数据类型" aria-hidden="true">#</a> Redis 数据类型</h2><p>Redis所有的key（键）都是字符串。我们在谈基础数据结构时，讨论的是存储值的数据类型，主要包括常见的5种数据类型，分别是：<strong>String</strong>、<strong>List</strong>、<strong>Set</strong>、<strong>Zset</strong>、<strong>Hash</strong>。</p><p>此外，还有三种特殊的数据类型，分别是 <strong>HyperLogLogs</strong>（基数统计）， <strong>Bitmaps</strong> (位图) 和 <strong>geospatial</strong> （地理位置）。</p><p>Redis5.0 中还增加了一个数据类型Stream，它借鉴了Kafka的设计，是一个新的强大的支持多播的可持久化的消息队列</p><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3><p>Redis 字符串存储字节序列，包括文本、序列化对象和二进制数组。</p><p>因此，字符串是最基本的 Redis 数据类型。</p><p>它们通常用于缓存，但它们支持额外的功能，也可以实现计数器并执行按位操作。</p><p>默认情况下，单个 Redis 字符串最大为 512 MB。</p><h4 id="获取和设置字符串" tabindex="-1"><a class="header-anchor" href="#获取和设置字符串" aria-hidden="true">#</a> 获取和设置字符串</h4>`,27),b={href:"https://redis.io/commands/set",target:"_blank",rel:"noopener noreferrer"},m=e("code",null,"SET",-1),_={href:"https://redis.io/commands/setnx",target:"_blank",rel:"noopener noreferrer"},v=e("code",null,"SETNX",-1),x={href:"https://redis.io/commands/get",target:"_blank",rel:"noopener noreferrer"},R=e("code",null,"GET",-1),y={href:"https://redis.io/commands/mget",target:"_blank",rel:"noopener noreferrer"},w=e("code",null,"MGET",-1),E=e("h4",{id:"管理计数器",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#管理计数器","aria-hidden":"true"},"#"),a(" 管理计数器")],-1),B={href:"https://redis.io/commands/incrby",target:"_blank",rel:"noopener noreferrer"},N=e("code",null,"INCRBY",-1),S={href:"https://redis.io/commands/incrbyfloat",target:"_blank",rel:"noopener noreferrer"},T=e("h4",{id:"位运算",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#位运算","aria-hidden":"true"},"#"),a(" 位运算")],-1),L={href:"https://redis.io/docs/data-types/bitmaps",target:"_blank",rel:"noopener noreferrer"},I=e("h2",{id:"参考资料",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),a(" 参考资料")],-1),V={href:"https://redis.io/docs/",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.runoob.com/redis/redis-tutorial.html",target:"_blank",rel:"noopener noreferrer"};function D(q,G){const s=c("ExternalLinkIcon");return d(),t("div",null,[p,i(" more "),h,e("p",null,[a("该文件可以在 Redis 安装目录下找到，或者从 "),e("a",u,[a("Github"),n(s)]),a(" 下载。")]),g,e("p",null,[a("更多具体设置，见 "),e("a",f,[a("Redis 官方文档"),n(s)]),a("。")]),k,e("ul",null,[e("li",null,[e("a",b,[m,n(s)]),a("存储一个字符串值。")]),e("li",null,[e("a",_,[v,n(s)]),a("仅当键不存在时才存储字符串值。用于实现锁。")]),e("li",null,[e("a",x,[R,n(s)]),a("检索字符串值。")]),e("li",null,[e("a",y,[w,n(s)]),a("在单个操作中检索多个字符串值。")])]),E,e("ul",null,[e("li",null,[e("a",B,[N,n(s)]),a("以原子方式递增（并在传递负数时递减）存储在给定键处的计数器。")]),e("li",null,[a("浮点计数器存在另一个命令："),e("a",S,[a("INCRBYFLOAT"),n(s)]),a("。")])]),T,e("p",null,[a("要对字符串执行按位运算，请参阅"),e("a",L,[a("位图数据类型"),n(s)]),a("文档。")]),I,e("p",null,[e("a",V,[a("Redis官方文档"),n(s)]),e("a",C,[a("Redis教程｜菜鸟教程"),n(s)])])])}const H=o(l,[["render",D],["__file","started.html.vue"]]);export{H as default};

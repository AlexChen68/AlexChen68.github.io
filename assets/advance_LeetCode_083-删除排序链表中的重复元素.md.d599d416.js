import{_ as e,C as l,o as p,c as o,k as s,a,H as c,Q as t}from"./chunks/framework.01af844e.js";const f=JSON.parse('{"title":"083. 删除排序链表中的重复元素","description":"","frontmatter":{"title":"083. 删除排序链表中的重复元素","tag":["链表"],"date":"2023-03-18T00:00:00.000Z"},"headers":[],"relativePath":"advance/LeetCode/083-删除排序链表中的重复元素.md","filePath":"advance/LeetCode/083-删除排序链表中的重复元素.md","lastUpdated":1700132966000}'),r={name:"advance/LeetCode/083-删除排序链表中的重复元素.md"},i=s("h2",{id:"题目链接",tabindex:"-1"},[a("题目链接 "),s("a",{class:"header-anchor",href:"#题目链接","aria-label":'Permalink to "题目链接"'},"​")],-1),E=s("ul",null,[s("li",null,[s("a",{href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-list/",target:"_blank",rel:"noreferrer"},"083. 删除排序链表中的重复元素")])],-1),d={id:"题目描述",tabindex:"-1"},y=s("a",{class:"header-anchor",href:"#题目描述","aria-label":'Permalink to "题目描述 <Badge text="简单" type="tip"/>"'},"​",-1),u=t(`<p>给定一个已排序的链表的头 head，<em>删除所有重复的元素，使每个元素只出现一次</em>。返回<em>已排序的链表</em>。</p><p><strong>示例：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/01/04/list2.jpg" alt="Alt"></p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">输入：head = [1,1,2,3,3]</span></span>
<span class="line"><span style="color:#e1e4e8;">输出：[1,2,3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">输入：head = [1,1,2,3,3]</span></span>
<span class="line"><span style="color:#24292e;">输出：[1,2,3]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="解题思路" tabindex="-1">解题思路 <a class="header-anchor" href="#解题思路" aria-label="Permalink to &quot;解题思路&quot;">​</a></h2><p><strong>遍历法：</strong></p><p>由于给定的链表是排好序的，因此重复的元素在链表中出现的位置是<strong>连续</strong>的，因此我们只需要对链表进行一次遍历，就可以删除重复的元素。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于代码中为什么使用一个 <code>cur</code> 引用而不是直接使用 <code>head</code></p><p><code>cur</code> 不是新开的链表，<code>cur</code> 只是一个引用类型的变量，相当于一个内存指针，这里的 <code>head</code> 也是一个指针，它指向的是链表开始位置的内存，让 <code>cur = head</code>，表示 <code>cur</code> 和 <code>head</code> 指向了同一块内存，也就是说这俩指针都存储了相同的内存地址，如果直接操作 <code>head</code>，那么你就丢失了链表起始位置的内存地址，测试程序就没办法从头开始遍历链表了，所以需要使用 <code>cur</code> 来遍历链表，同时直接对指向的内存数据进行操作，这样返回的 <code>head</code> 仍然指向链表开始位置的内存，而这个链表其实已经使用 <code>cur</code> 这个指针进行了修改了。</p></div><h2 id="示例代码" tabindex="-1">示例代码 <a class="header-anchor" href="#示例代码" aria-label="Permalink to &quot;示例代码&quot;">​</a></h2><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Solution</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> ListNode </span><span style="color:#B392F0;">deleteDuplicates</span><span style="color:#E1E4E8;">(ListNode </span><span style="color:#FFAB70;">head</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (head </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> head;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        ListNode cur </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> head;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (cur.next </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cur.val </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> cur.next.val) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                cur.next </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cur.next.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                cur </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cur.next;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> head;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Solution</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> ListNode </span><span style="color:#6F42C1;">deleteDuplicates</span><span style="color:#24292E;">(ListNode </span><span style="color:#E36209;">head</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (head </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        ListNode cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (cur.next </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cur.val </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> cur.next.val) {</span></span>
<span class="line"><span style="color:#24292E;">                cur.next </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.next.next;</span></span>
<span class="line"><span style="color:#24292E;">            } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                cur </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cur.next;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> head;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="复杂度分析" tabindex="-1">复杂度分析 <a class="header-anchor" href="#复杂度分析" aria-label="Permalink to &quot;复杂度分析&quot;">​</a></h2><ul><li>时间复杂度：O(n)，其中 n 是链表的长度。</li><li>空间复杂度：O(1)。</li></ul>`,12);function h(b,m,_,v,g,F){const n=l("Badge");return p(),o("div",null,[i,E,s("h2",d,[a("题目描述 "),c(n,{text:"简单",type:"tip"}),a(),y]),u])}const k=e(r,[["render",h]]);export{f as __pageData,k as default};

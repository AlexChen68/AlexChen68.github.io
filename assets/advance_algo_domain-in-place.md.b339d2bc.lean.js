import{_ as t,o,c as r,k as e,a}from"./chunks/framework.01af844e.js";const P=JSON.parse('{"title":"原地算法","description":"","frontmatter":{"title":"原地算法","date":"2023-02-21T00:00:00.000Z","order":301},"headers":[],"relativePath":"advance/algo/domain-in-place.md","filePath":"advance/algo/domain-in-place.md","lastUpdated":1701689478000}'),n={name:"advance/algo/domain-in-place.md"},l=e("h2",{id:"原地算法-in-place-algorithm",tabindex:"-1"},[a("原地算法（In-Place Algorithm） "),e("a",{class:"header-anchor",href:"#原地算法-in-place-algorithm","aria-label":'Permalink to "原地算法（In-Place Algorithm）"'},"​")],-1),c=e("p",null,"原地算法：在计算机科学中，一个原地算法（in-place algorithm）是一种使用小的，固定数量的额外之空间来转换资料的算法。当算法执行时，输入的资料通常会被要输出的部分覆盖掉。不是原地算法有时候称为非原地（not-in-place）或不得其所（out-of-place）。",-1),s=e("p",null,"通俗的说法：就是一个算法，除了可以运用输入数据本身已开辟的空间外，就只可以用极小的辅助空间来进行运算了，一般 额外空间复杂度为 O (1)，也就是一个变量。(特殊情况除外)",-1),d=e("p",null,[a("示例：LeetCode 26 题 "),e("a",{href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/",target:"_blank",rel:"noreferrer"},"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/")],-1),i=[l,c,s,d];function p(m,_,h,f,u,g){return o(),r("div",null,i)}const b=t(n,[["render",p]]);export{P as __pageData,b as default};

import{_ as l,W as s,X as c,Y as e,Z as t,a1 as a,a0 as i,C as r}from"./framework-07dc8c78.js";const d={},h=i('<h2 id="什么是并发" tabindex="-1"><a class="header-anchor" href="#什么是并发" aria-hidden="true">#</a> 什么是并发？</h2><p>CPU、内存、I/O 设备的速度是有极大差异的，为了合理利用 CPU 的高性能，平衡这三者的速度差异，计算机体系结构、操作系统、编译程序都做出了贡献，主要体现为:</p><ul><li>CPU 增加了缓存，以均衡与内存的速度差异；// 导致<strong>可见性</strong>问题</li><li>操作系统增加了进程、线程，以分时复用 CPU，进而均衡 CPU 与 I/O 设备的速度差异；// 导致<strong>原子性</strong>问题</li><li>编译程序优化指令执行次序，使得缓存能够得到更加合理地利用。// 导致<strong>有序性</strong>问题</li></ul><h2 id="线程安全问题" tabindex="-1"><a class="header-anchor" href="#线程安全问题" aria-hidden="true">#</a> 线程安全问题</h2><ol><li><strong>可见性问题</strong></li></ol><blockquote><p>可见性：指当多个线程访问同一个变量时，一个线程修改了这个变量的值，其他线程能够立即看得到修改的值。</p></blockquote><p>在并发的时候，多个线程同时对一个共享变量进行修改操作，如果执行操作的两个线程不在一个 CPU 核心上，那么由于 CPU 高速缓存的存在，一个线程修改后的值，无法及时被另一个线程获知，导致最终结果不符合预期。</p><ol start="2"><li><strong>原子性问题</strong></li></ol><blockquote><p>原子性：即一个操作或者多个操作 要么全部执行并且执行的过程不会被任何因素打断，要么就都不执行。</p><p>原子操作：即不会被线程调度机制打断的操作，没有上下文切换。</p></blockquote><ol start="3"><li><strong>有序性问题</strong></li></ol><blockquote><p>有序性：即程序执行的顺序按照代码的先后顺序执行。</p></blockquote><hr><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',13),_={href:"https://pdai.tech/md/java/thread/java-thread-x-theorty.html",target:"_blank",rel:"noopener noreferrer"},p={href:"https://docs.oracle.com/javase/tutorial/essential/concurrency/index.html",target:"_blank",rel:"noopener noreferrer"},u={href:"https://blog.csdn.net/m0_73311735/article/details/127919267",target:"_blank",rel:"noopener noreferrer"};function g(f,m){const o=r("ExternalLinkIcon"),n=r("Badge");return s(),c("div",null,[h,e("ul",null,[e("li",null,[e("a",_,[t("Java 并发理论基础"),a(o)]),t(),a(n,{text:"强烈推荐",type:"warning"})]),e("li",null,[t("[ORACLE 官方并发文档]("),e("a",p,[t("Lesson: Concurrency (The Java™ Tutorials > Essential Java Classes) (oracle.com)"),a(o)]),t(")")]),e("li",null,[e("a",u,[t("Java 并发编程之可见性分析 volatile"),a(o)])])])])}const b=l(d,[["render",g],["__file","index.html.vue"]]);export{b as default};

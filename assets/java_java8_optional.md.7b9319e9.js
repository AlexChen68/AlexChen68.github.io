import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.419948d5.js";const d=JSON.parse('{"title":"Java 8 新特性之 Optional","description":"","frontmatter":{"title":"Java 8 新特性之 Optional","date":"2023-01-02T00:00:00.000Z"},"headers":[],"relativePath":"java/java8/optional.md","filePath":"java/java8/optional.md","lastUpdated":1697504416000}'),p={name:"java/java8/optional.md"},o=l(`<h2 id="_1-什么是-optional" tabindex="-1">1. 什么是 Optional？ <a class="header-anchor" href="#_1-什么是-optional" aria-label="Permalink to &quot;1. 什么是 Optional？&quot;">​</a></h2><p>Optional 类 Java 8 引入的一个很有趣的特性。Optional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException）。</p><p>本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Optional</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 通用的空对象，调用 empty() 时都会返回它</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> Optional&lt;</span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;">&gt; EMPTY </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Optional&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 用来存储实际的值</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">final</span><span style="color:#E1E4E8;"> T value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 构造方法私有，只能通过 of() 和 ofNullable 创建</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Optional</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Optional</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 通用的空对象，调用 empty() 时都会返回它</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> Optional&lt;</span><span style="color:#D73A49;">?</span><span style="color:#24292E;">&gt; EMPTY </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Optional&lt;&gt;();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 用来存储实际的值</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">final</span><span style="color:#24292E;"> T value;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 构造方法私有，只能通过 of() 和 ofNullable 创建</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Optional</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="_2-创建-optional-对象" tabindex="-1">2. 创建 Optional 对象 <a class="header-anchor" href="#_2-创建-optional-对象" aria-label="Permalink to &quot;2. 创建 Optional 对象&quot;">​</a></h2><h3 id="empty" tabindex="-1">empty <a class="header-anchor" href="#empty" aria-label="Permalink to &quot;empty&quot;">​</a></h3><blockquote><p>创建一个空的 Optional 对象返回</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; empty </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">empty</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; empty </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">empty</span><span style="color:#24292E;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="of" tabindex="-1">of <a class="header-anchor" href="#of" aria-label="Permalink to &quot;of&quot;">​</a></h3><blockquote><p>为非 null 的值创建一个 Optional。</p></blockquote><p>of 方法通过工厂方法创建 Optional 类。需要注意的是，创建对象时传入的参数不能为 null。如果传入参数为 null，则抛出 NullPointerException。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; optional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; optional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="ofnullable" tabindex="-1">ofNullable <a class="header-anchor" href="#ofnullable" aria-label="Permalink to &quot;ofNullable&quot;">​</a></h3><blockquote><p>为指定的值创建一个 Optional，如果指定的值为 null，则返回一个空的 Optional。</p></blockquote><p>ofNullable 与 of 方法相似，唯一的区别是可以接受参数为 null 的情况。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; nullOptional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; nullOptional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_3-使用-optional-类" tabindex="-1">3. 使用 Optional 类 <a class="header-anchor" href="#_3-使用-optional-类" aria-label="Permalink to &quot;3. 使用 Optional 类&quot;">​</a></h2><h3 id="ispresent" tabindex="-1">isPresent <a class="header-anchor" href="#ispresent" aria-label="Permalink to &quot;isPresent&quot;">​</a></h3><blockquote><p>如果值存在返回 true，否则返回 false。</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; nullOptional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; optional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(nullOptional.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(optional.</span><span style="color:#B392F0;">isPresent</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; nullOptional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; optional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(nullOptional.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// false</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(optional.</span><span style="color:#6F42C1;">isPresent</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="get" tabindex="-1">get <a class="header-anchor" href="#get" aria-label="Permalink to &quot;get&quot;">​</a></h3><blockquote><p>如果 Optional 有值则将其返回，否则抛出 NoSuchElementException。</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; nullOptional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; optional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(optional.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// hello world</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(nullOptional.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// java.util.NoSuchElementException: No value present</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; nullOptional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; optional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(optional.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// hello world</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(nullOptional.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// java.util.NoSuchElementException: No value present</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="ifpresent" tabindex="-1">ifPresent <a class="header-anchor" href="#ifpresent" aria-label="Permalink to &quot;ifPresent&quot;">​</a></h3><blockquote><p>如果 Optional 实例有值则为其调用 consumer，否则不做处理</p></blockquote><p><code>Consumer</code> 是一个函数式接口，接收一个参数，不返回任何值；可以使用 lambda 表达式简化。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">FunctionalInterface</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Consumer</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">accept</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">FunctionalInterface</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Consumer</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">accept</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">t</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; optional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">optional.</span><span style="color:#B392F0;">ifPresent</span><span style="color:#E1E4E8;">((value) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(value); </span><span style="color:#6A737D;">// hello world</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; optional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">optional.</span><span style="color:#6F42C1;">ifPresent</span><span style="color:#24292E;">((value) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(value); </span><span style="color:#6A737D;">// hello world</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="orelse" tabindex="-1">orElse <a class="header-anchor" href="#orelse" aria-label="Permalink to &quot;orElse&quot;">​</a></h3><blockquote><p>如果有值则将其返回，否则返回指定的其它值。</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; nullOptional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(nullOptional.</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;there is no value!&quot;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// there is no value!</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; nullOptional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(nullOptional.</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;there is no value!&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// there is no value!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="orelseget" tabindex="-1">orElseGet <a class="header-anchor" href="#orelseget" aria-label="Permalink to &quot;orElseGet&quot;">​</a></h3><blockquote><p>orElseGet 与 orElse 类似，区别在于 orElseGet 传入一个 Supplier 函数来生成默认值。</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">FunctionalInterface</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Supplier</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Gets a result.</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> a result</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#E1E4E8;">    T </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">FunctionalInterface</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Supplier</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    /**</span></span>
<span class="line"><span style="color:#6A737D;">     * Gets a result.</span></span>
<span class="line"><span style="color:#6A737D;">     *</span></span>
<span class="line"><span style="color:#6A737D;">     * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> a result</span></span>
<span class="line"><span style="color:#6A737D;">     */</span></span>
<span class="line"><span style="color:#24292E;">    T </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; nullOptional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(nullOptional.</span><span style="color:#B392F0;">orElseGet</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;default value&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">})); </span><span style="color:#6A737D;">// default value</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; nullOptional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(nullOptional.</span><span style="color:#6F42C1;">orElseGet</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;default value&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">})); </span><span style="color:#6A737D;">// default value</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="orelsethrow" tabindex="-1">orElseThrow <a class="header-anchor" href="#orelsethrow" aria-label="Permalink to &quot;orElseThrow&quot;">​</a></h3><blockquote><p>orElseThrow 与 orElseGet 的不同之处在于，不返回默认值，而是抛出由 Supplier 函数创建的异常。</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; nullOptional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    nullOptional.</span><span style="color:#B392F0;">orElseThrow</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">RuntimeException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;there is no value present!&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (Exception </span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(e.</span><span style="color:#B392F0;">getMessage</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// there is no value present!</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; nullOptional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">try</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    nullOptional.</span><span style="color:#6F42C1;">orElseThrow</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">RuntimeException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;there is no value present!&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">} </span><span style="color:#D73A49;">catch</span><span style="color:#24292E;"> (Exception </span><span style="color:#E36209;">e</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(e.</span><span style="color:#6F42C1;">getMessage</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// there is no value present!</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="map" tabindex="-1">map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;map&quot;">​</a></h3><blockquote><p>map 接收一个函数，通过其 apply 方法，将 optional 的值修改为另一个值，并通过 Optional.ofNullable 创建一个新的 Optional 对象返回。</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">FunctionalInterface</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Function</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">R</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  R </span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">FunctionalInterface</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Function</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">R</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  R </span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">t</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; optional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; newOptional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> optional.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((value) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;new &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> value);</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(newOptional.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// new hello world</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; optional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; newOptional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> optional.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((value) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;new &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> value);</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(newOptional.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// new hello world</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="flatmap" tabindex="-1">flatMap <a class="header-anchor" href="#flatmap" aria-label="Permalink to &quot;flatMap&quot;">​</a></h3><blockquote><p>如果有值并且满足断言条件返回包含该值的 Optional，否则返回空 Optional。 flatMap 和 map 的区别是：map 函数式接口返回的是值，而 flatMap 的函数式接口返回的是 Optional 对象。</p></blockquote><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; optional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">optional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> optional.</span><span style="color:#B392F0;">flatMap</span><span style="color:#E1E4E8;">((value) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (value </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;valid&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(optional.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">()); </span><span style="color:#6A737D;">// valid</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; optional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">optional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> optional.</span><span style="color:#6F42C1;">flatMap</span><span style="color:#24292E;">((value) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> value.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;valid&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(optional.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">()); </span><span style="color:#6A737D;">// valid</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="filter" tabindex="-1">filter <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;filter&quot;">​</a></h3><blockquote><p>如果有值并且满足断言条件返回包含该值的 Optional，否则返回空 Optional。</p></blockquote><p><code>filter</code> 方法接收一个 <code>Predicate</code> 参数，这是一个断言函数式接口，其 test 方法返回断言的结果。</p><p>如果断言成功，返回原来的 Optional 对象；如果断言失败，返回空的 Optional 对象。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">FunctionalInterface</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Predicate</span><span style="color:#E1E4E8;">&lt;</span><span style="color:#F97583;">T</span><span style="color:#E1E4E8;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">(T </span><span style="color:#FFAB70;">t</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">FunctionalInterface</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Predicate</span><span style="color:#24292E;">&lt;</span><span style="color:#D73A49;">T</span><span style="color:#24292E;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">(T </span><span style="color:#E36209;">t</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; nullOptional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">Optional&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; optional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello world&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">nullOptional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> nullOptional.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">((value) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">optional </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> optional.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">((value) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> value </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(nullOptional.</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The value is less than 6 characters&quot;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// The value is less than 6 characters</span></span>
<span class="line"><span style="color:#E1E4E8;">System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(optional.</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The value is less than 6 characters&quot;</span><span style="color:#E1E4E8;">)); </span><span style="color:#6A737D;">// hello world</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; nullOptional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">Optional&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; optional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello world&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">nullOptional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> nullOptional.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((value) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> value.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">optional </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> optional.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">((value) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> value </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> value.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(nullOptional.</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The value is less than 6 characters&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// The value is less than 6 characters</span></span>
<span class="line"><span style="color:#24292E;">System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(optional.</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The value is less than 6 characters&quot;</span><span style="color:#24292E;">)); </span><span style="color:#6A737D;">// hello world</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_4-optional-应用场景" tabindex="-1">4. Optional 应用场景 <a class="header-anchor" href="#_4-optional-应用场景" aria-label="Permalink to &quot;4. Optional 应用场景&quot;">​</a></h2><ol><li>场景一：判断空再赋值</li></ol><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">User user </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> userDao.</span><span style="color:#B392F0;">getUser</span><span style="color:#E1E4E8;">(id);</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (user</span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    user.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;张三&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 Optional 和函数式编程，一行搞定，而且像说话一样</span></span>
<span class="line"><span style="color:#E1E4E8;">Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(user).</span><span style="color:#B392F0;">ifPresent</span><span style="color:#E1E4E8;">(p </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> user.</span><span style="color:#B392F0;">setName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;李四&quot;</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">User user </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> userDao.</span><span style="color:#6F42C1;">getUser</span><span style="color:#24292E;">(id);</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (user</span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    user.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 Optional 和函数式编程，一行搞定，而且像说话一样</span></span>
<span class="line"><span style="color:#24292E;">Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(user).</span><span style="color:#6F42C1;">ifPresent</span><span style="color:#24292E;">(p </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> user.</span><span style="color:#6F42C1;">setName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;李四&quot;</span><span style="color:#24292E;">));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="2"><li>场景二：空值判断抛异常</li></ol><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test1</span><span style="color:#E1E4E8;">() throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Student student </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Student</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (student </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(student.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">())) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Exception</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    String name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> student.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 业务省略...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 使用 Optional 改造</span></span>
<span class="line"><span style="color:#E1E4E8;">    Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(student).</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(s </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(s.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">())).</span><span style="color:#B392F0;">orElseThrow</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Exception</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">(CharSequence str) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> str </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> str.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test1</span><span style="color:#24292E;">() throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">    Student student </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Student</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (student </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(student.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">())) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Exception</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    String name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> student.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 业务省略...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 使用 Optional 改造</span></span>
<span class="line"><span style="color:#24292E;">    Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(student).</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(s </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(s.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">())).</span><span style="color:#6F42C1;">orElseThrow</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Exception</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">(CharSequence str) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> str </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> str.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ol start="3"><li>场景三：多值判断抛异常</li></ol><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getChampionName</span><span style="color:#E1E4E8;">(Competition comp) throws IllegalArgumentException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (comp </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        CompResult result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> comp.</span><span style="color:#B392F0;">getResult</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (result </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            User champion </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> result.</span><span style="color:#B392F0;">getChampion</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (champion </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> champion.</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The value of param comp isn&#39;t available.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">getChampionName</span><span style="color:#E1E4E8;">(Competition comp) throws IllegalArgumentException {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(comp)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(Competition</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getResult)  </span><span style="color:#6A737D;">// 相当于 c -&gt; c.getResult()，下同</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(CompResult</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getChampion)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(User</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">getName)</span></span>
<span class="line"><span style="color:#E1E4E8;">            .</span><span style="color:#B392F0;">orElseThrow</span><span style="color:#E1E4E8;">(()</span><span style="color:#F97583;">-&gt;new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">IllegalArgumentException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;The value of param comp isn&#39;t available.&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getChampionName</span><span style="color:#24292E;">(Competition comp) throws IllegalArgumentException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (comp </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        CompResult result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> comp.</span><span style="color:#6F42C1;">getResult</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (result </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            User champion </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> result.</span><span style="color:#6F42C1;">getChampion</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (champion </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> champion.</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The value of param comp isn&#39;t available.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">getChampionName</span><span style="color:#24292E;">(Competition comp) throws IllegalArgumentException {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(comp)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(Competition</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getResult)  </span><span style="color:#6A737D;">// 相当于 c -&gt; c.getResult()，下同</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(CompResult</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getChampion)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(User</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">getName)</span></span>
<span class="line"><span style="color:#24292E;">            .</span><span style="color:#6F42C1;">orElseThrow</span><span style="color:#24292E;">(()</span><span style="color:#D73A49;">-&gt;new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">IllegalArgumentException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;The value of param comp isn&#39;t available.&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ol start="4"><li>场景四：类型之间的转换，并且当没有值的时候返回一个默认值</li></ol><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> timeout </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Optional.</span><span style="color:#B392F0;">ofNullable</span><span style="color:#E1E4E8;">(RedisProperties.</span><span style="color:#B392F0;">getTimeout</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                      .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(x </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> Long.</span><span style="color:#B392F0;">valueOf</span><span style="color:#E1E4E8;">(x.</span><span style="color:#B392F0;">toMillis</span><span style="color:#E1E4E8;">()).</span><span style="color:#B392F0;">intValue</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">                      .</span><span style="color:#B392F0;">orElse</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">int</span><span style="color:#24292E;"> timeout </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Optional.</span><span style="color:#6F42C1;">ofNullable</span><span style="color:#24292E;">(RedisProperties.</span><span style="color:#6F42C1;">getTimeout</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                      .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(x </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> Long.</span><span style="color:#6F42C1;">valueOf</span><span style="color:#24292E;">(x.</span><span style="color:#6F42C1;">toMillis</span><span style="color:#24292E;">()).</span><span style="color:#6F42C1;">intValue</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">                      .</span><span style="color:#6F42C1;">orElse</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_5-使用-optional-的用法和争议" tabindex="-1">5. 使用 Optional 的用法和争议 <a class="header-anchor" href="#_5-使用-optional-的用法和争议" aria-label="Permalink to &quot;5. 使用 Optional 的用法和争议&quot;">​</a></h2><p>其实到底该不该用 Optional，业界还是有不少争议的，一方面是 Optional 能强迫开发者处理 null 值，但另一方面是 Optional 又非常容易滥用，特别是一些开发者拿到 Optional 之后就直接调用 <code>get()</code> 或 <code>ifPresent()</code> 方法，这样几乎没解决任何问题，还加重了编码负担。</p><p>因此，我的建议是，在你不知道该不该使用 Optional 的场景，那就先别用。</p><p>下面是一些使用 Optional 的场景参考，如下：</p><ol><li>Optional 一般用于返回值</li></ol><blockquote><p>Optional 大多用于返回值，不推荐用在成员变量或方法参数中。</p></blockquote><ol start="2"><li>Optional 本身不判 null</li></ol><blockquote><p>永远都不要给 Optional 赋值 null，也不要判断 Optional 本身是否为 null，这是因为 Optional 本来就是解决 null 的，再引入 null 就没意思了，这应该成为业界共识。</p></blockquote><ol start="3"><li>集合不使用 Optional</li></ol><blockquote><p>因为集合有 <code>Collections.emptyList()</code> 等更好的处理方法了，没必要再使用 Optional。</p></blockquote><ol start="4"><li>函数式处理值</li></ol><blockquote><p>从上面的用法介绍中就能发现，Optional 提供了很多 lambda 函数式处理的方法，如 filter、map 等，这些是使用 Optional 时比较推荐使用的，因为 Optional 能帮你自动处理 null 值情况，避免 NPE 异常。</p></blockquote><ol start="5"><li>多层属性获取</li></ol><blockquote><p>前面举过这个代码样例，我觉得这是 Optional 使用收益最明显的一个场景。</p></blockquote><ol start="6"><li>不返回 null 胜过返回 Optional</li></ol><blockquote><p>返回 Optional 给调用方，会强制调用方处理 null 情况，会给调用方增加一些的编码负担，特别是复用度很高的函数。</p><p>但如果调用方大多数情况下都不期望获取到 null，那应该实现一个这样的方法，要么返回值，要么抛出异常。</p></blockquote><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/600254778" target="_blank" rel="noreferrer">Optional 使用场景</a></li><li><a href="https://www.jianshu.com/p/5b9b4f0aa2ce" target="_blank" rel="noreferrer">Optional 用法与争议点</a></li></ul>`,78),e=[o];function t(r,c,E,y,i,u){return n(),a("div",null,e)}const F=s(p,[["render",t]]);export{d as __pageData,F as default};

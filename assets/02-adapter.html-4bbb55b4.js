import{_ as t,W as p,X as c,$ as o,Y as n,Z as s,a1 as e,a0 as i,G as l}from"./framework-c6508e04.js";const d={},u=n("p",null,"设计模式之适配器模式",-1),r=i(`<h2 id="适配器-adapter" tabindex="-1"><a class="header-anchor" href="#适配器-adapter" aria-hidden="true">#</a> 适配器 (Adapter)</h2><p>与电源适配器相似，在适配器模式中引入了一个被称为适配器 (<code>Adapter</code>) 的包装类，而它所包装的对象称为适配者 (<code>Adaptee</code>)，即被适配的类。适配器的实现就是把客户类的请求转化为对适配者的相应接口的调用。也就是说：当客户类调用适配器的方法时，在适配器类的内部将调用适配者类的方法，而这个过程对客户类是透明的，客户类并不直接访问适配者类。因此，适配器让那些由于接口不兼容而不能交互的类可以一起工作。</p><blockquote><p>适配器模式 (<code>Adapter Pattern</code>): 将一个接口转换成期望的另一个接口，使接口不兼容的那些类可以一起工作，其别名为包装器 (<code>Wrapper</code>)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p></blockquote><p><em>注意：在适配器模式定义中所提及的接口是指广义的接口，它可以表示一个方法或者方法的集合。</em></p><h2 id="类图" tabindex="-1"><a class="header-anchor" href="#类图" aria-hidden="true">#</a> 类图</h2><p>把一个类接口转换成另一个用户需要的接口，示意图</p><p><img src="https://cdn.staticaly.com/gh/AlexChen68/image-hosting@master/blog/advance/adapter_pattern_1.png" alt="适配器模式示意图" loading="lazy"></p><p>类图</p><p><img src="https://cdn.staticaly.com/gh/AlexChen68/image-hosting@master/blog/advance/adapter_pattern_2.png" alt="适配器模式类图" loading="lazy"></p><p>在对象适配器模式类图中包含如下几个角色：</p><ul><li><code>Target（目标抽象类）</code>：目标抽象类定义客户所需接口，可以是一个抽象类或接口，也可以是具体类。</li><li><code>Adapter（适配器类）</code>：适配器可以调用另一个接口，作为一个转换器，对<code>Adaptee</code>和<code>Target</code>进行适配，适配器类是适配器模式的核心，在对象适配器中，它通过继承 (或者实现)<code>Target</code>并关联一个<code>Adaptee</code>对象使二者产生联系。</li><li><code>Adaptee（适配者类）</code>：适配者即被适配的角色，它定义了一个已经存在的接口，这个接口需要适配，适配者类一般是一个具体类，包含了客户希望使用的业务方法，在某些情况下可能没有适配者类的源代码。</li></ul><h2 id="伪代码" tabindex="-1"><a class="header-anchor" href="#伪代码" aria-hidden="true">#</a> 伪代码</h2><p>在<code>对象适配器</code>中，客户端需要调用<code>request()</code>方法，而适配者类<code>Adaptee</code>没有该方法，但是它所提供的<code>specificRequest()</code>方法却是客户端所需要的。为了使客户端能够使用适配者类，需要提供一个包装类<code>Adapter</code>，即适配器类。这个包装类包装了一个适配者的实例，从而将客户端与适配者衔接起来，在适配器的<code>request()</code>方法中调用适配者的<code>specificRequest()</code>方法。因为适配器类与适配者类是<code>关联关系</code>（也可称之为委派关系），所以这种适配器模式称为<code>对象适配器模式</code>。典型的对象适配器代码如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>
    <span class="token comment">// 维持一个对适配者对象的引用</span>
    <span class="token keyword">private</span> <span class="token class-name">Adaptee</span> adaptee<span class="token punctuation">;</span>

    <span class="token comment">// 构造注入适配者</span>
    <span class="token keyword">public</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token class-name">Adaptee</span> adaptee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>adaptee <span class="token operator">=</span> adaptee<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 转发调用</span>
        adaptee<span class="token punctuation">.</span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="适配器类别" tabindex="-1"><a class="header-anchor" href="#适配器类别" aria-hidden="true">#</a> 适配器类别</h2><h3 id="类适配器" tabindex="-1"><a class="header-anchor" href="#类适配器" aria-hidden="true">#</a> 类适配器</h3><p>类适配器<code>模式和</code>对象适配器<code>模式最大的区别在于适配器和适配者之间的关系不同，对象适配器模式中适配器和适配者之间是</code>关联关系<code>，而类适配器模式中适配器和适配者是</code>继承关系</p><p><img src="https://cdn.staticaly.com/gh/AlexChen68/image-hosting@master/blog/advance/adapter_pattern_class.png" alt="类适配器" loading="lazy"></p><p>适配器类实现了抽象目标类接口<code>Target</code>，并继承了适配者类，在适配器类的<code>request()</code>方法中调用所继承的适配者类的<code>specificRequest()</code>方法，实现了适配。 典型代码实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">extends</span> <span class="token class-name">Adaptee</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于<code>Java</code>、<code>C#</code>等语言不支持多重类继承，因此<code>类适配器</code>的使用受到很多限制，例如如果目标抽象类<code>Target</code>不是接口，而是一个类，就无法使用类适配器；此外，如果适配者<code>Adaptee</code>为最终 (<code>final</code>) 类，也无法使用类适配器。在 Java 等面向对象编程语言中，大部分情况下我们使用的是对象适配器，<code>类适配器</code>较少使用。</p><h3 id="双向适配器" tabindex="-1"><a class="header-anchor" href="#双向适配器" aria-hidden="true">#</a> 双向适配器</h3><p><code>双向适配器</code>: 在<code>对象适配器</code>的使用过程中，如果在适配器中同时包含对目标类和适配者类的引用，适配者可以通过它调用目标类中的方法，目标类也可以通过它调用适配者类中的方法，那么该适配器就是一个双向适配器。</p><p><img src="https://cdn.staticaly.com/gh/AlexChen68/image-hosting@master/blog/advance/adapter_pattern_double.png" alt="双向适配器" loading="lazy"></p><p>典型代码实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span><span class="token punctuation">,</span> <span class="token class-name">Adaptee</span> <span class="token punctuation">{</span>
    <span class="token comment">//同时维持对抽象目标类和适配者的引用</span>
    <span class="token keyword">private</span> <span class="token class-name">Target</span> target<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Adaptee</span> adaptee<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token class-name">Target</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token class-name">Adaptee</span> adaptee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>adaptee <span class="token operator">=</span> adaptee<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        adaptee<span class="token punctuation">.</span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        target<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实际开发中，我们很少使用双向适配器。违背了<strong>单一职责原则</strong>，相当于一个适配器承担了两个适配器的职责。</p><h3 id="缺省适配器" tabindex="-1"><a class="header-anchor" href="#缺省适配器" aria-hidden="true">#</a> 缺省适配器</h3><p><code>缺省适配器</code>模式是适配器模式的一种变体，其应用也较为广泛。</p><blockquote><p><code>缺省适配器模式(Default Adapter Pattern)</code>：当不需要实现一个接口所提供的所有方法时，可先设计一个抽象类实现该接口，并为接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可以选择性地覆盖父类的某些方法来实现需求，它适用于不想使用一个接口中的所有方法的情况，又称为<code>单接口适配器模式</code>。</p></blockquote><p><img src="https://cdn.staticaly.com/gh/AlexChen68/image-hosting@master/blog/advance/adapter_pattern_default.png" alt="缺省适配器" loading="lazy"></p><p>典型代码实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Adapter</span> <span class="token keyword">implements</span> <span class="token class-name">Target</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 空实现，让具体实现类去有选择地实现</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 空实现，让具体实现类去有选择地实现</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 空实现，让具体实现类去有选择地实现</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">Adapter</span> <span class="token punctuation">{</span>
    <span class="token comment">// 维持一个对适配者对象的引用</span>
    <span class="token keyword">private</span> <span class="token class-name">Adaptee</span> adaptee<span class="token punctuation">;</span>

    <span class="token comment">// 构造注入适配者</span>
    <span class="token keyword">public</span> <span class="token class-name">Adapter</span><span class="token punctuation">(</span><span class="token class-name">Adaptee</span> adaptee<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>adaptee <span class="token operator">=</span> adaptee<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">request1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 只实现 request1</span>
        adaptee<span class="token punctuation">.</span><span class="token function">specificRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="应用实例" tabindex="-1"><a class="header-anchor" href="#应用实例" aria-hidden="true">#</a> 应用实例</h2><p>在 JDK 中，<code>IO</code>类中也大量使用到了适配器模式。比如说<code>StringReader</code>将<code>String</code>适配到<code>Reader</code>，<code>InputStreamReader</code>将<code>InputStream</code>适配到<code>Reader</code>等等。</p><p>这里用<code>StringReader</code>来说明。这里的<code>StringReader</code>相当于上述的<code>Adapter</code>，<code>Reader</code>相当于上述的<code>Target</code>，<code>String</code>相当于上述的<code>Adaptee</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringReader</span> <span class="token keyword">extends</span> <span class="token class-name">Reader</span> <span class="token punctuation">{</span>

   <span class="token comment">// 维持对 adaptee 对象的引用</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> str<span class="token punctuation">;</span>
    
    <span class="token keyword">private</span> <span class="token keyword">int</span> length<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> next <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> mark <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 构造注入一个 String 用于之后的 read 操作
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> s<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  
  <span class="token comment">// 这里相当于是在做适配操作，转为目标对象所期望的请求</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">ensureOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">&gt;=</span> length<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>next<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h3 id="主要优点" tabindex="-1"><a class="header-anchor" href="#主要优点" aria-hidden="true">#</a> 主要优点</h3><p>无论是对象适配器模式还是类适配器模式都具有如下优点：</p><ul><li>将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，无须修改原有结构，提高了扩展性，符合“开闭原则”</li><li>增加了类的透明性和复用性，将具体的业务实现过程封装在适配者类中，对于客户端类而言是透明的，而且提高了适配者的复用性，同一个适配者类可以在多个不同的系统中复用。</li></ul><p>具体来说，<code>类适配器</code>模式还有如下优点：</p><p>由于适配器类是适配者类的子类，因此可以在适配器类中置换一些适配者的方法，使得适配器的灵活性更强。</p><p><code>对象适配器</code>模式还有如下优点：</p><ul><li>一个对象适配器可以把多个不同的适配者适配到同一个目标；</li><li>可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据“里氏代换原则”，适配者的子类也可通过该适配器进行适配。</li></ul><h3 id="主要缺点" tabindex="-1"><a class="header-anchor" href="#主要缺点" aria-hidden="true">#</a> 主要缺点</h3><p><code>类适配器</code>模式的缺点如下：</p><ul><li>对于Java、C#等不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者；</li><li>适配者类不能为最终类，如在Java中不能为final类，C#中不能为sealed类；</li><li>在Java、C#等语言中，类适配器模式中的目标抽象类只能为接口，不能为类，其使用有一定的局限性。</li></ul><p>对象适配器模式的缺点如下：</p><p>与类适配器模式相比，要在适配器中置换适配者类的某些方法比较麻烦 (比如说适配者类中的某些方法是<code>protected</code>,而我们做适配的时候刚好需要用到)。如果一定要置换掉适配者类的一个或多个方法，可以先做一个适配者类的子类，将适配者类的方法置换掉，然后再把适配者类的子类当做真正的适配者进行适配，实现过程较为复杂。</p><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h3><p>在以下情况下可以考虑使用适配器模式：</p><ul><li>系统需要使用 (复用) 一些现有的类，而这些类的接口（如方法名）不符合系统的需要，甚至没有这些类的源代码等等，可使用适配器模式协调诸多不兼容结构的场景。</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,54),k={href:"https://bytesfly.github.io/blog/#/DesignPattern/facade-pattern",target:"_blank",rel:"noopener noreferrer"},v={href:"https://pdai.tech/md/dev-spec/pattern/9_adapter.html",target:"_blank",rel:"noopener noreferrer"};function m(b,h){const a=l("ExternalLinkIcon");return p(),c("div",null,[u,o(" more "),r,n("ul",null,[n("li",null,[n("a",k,[s("适配器模式 (Adapter Pattern)——不兼容结构的协调"),e(a)])]),n("li",null,[n("a",v,[s("Java 全栈知识体系"),e(a)])])])])}const y=t(d,[["render",m],["__file","02-adapter.html.vue"]]);export{y as default};

import{_ as p,W as l,X as c,Y as n,$ as s,a1 as a,a0 as i,C as e}from"./framework-8d3a05fe.js";const d={},u={href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"},r={id:"题目描述",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#题目描述","aria-hidden":"true"},"#",-1),v=i(`<p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><p><strong>示例</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg" alt="Alt" loading="lazy"></p><div class="language-text" data-ext="text"><pre class="language-text"><code>输入：head = [1,2,3,4,5], n = 2
输出：[1,2,3,5]
</code></pre></div><h2 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路" aria-hidden="true">#</a> 解题思路</h2><p><strong>快慢指针法：</strong></p><p>使用两个指针 fast 和 slow，让 fast 超前 slow n 个结点：</p><ol><li>fast 先遍历 n 个结点后，fast 指向 null，说明删除的结点就是 head，直接返回 head.next;</li><li>slow 指向 head，fast 和 slow 同时开始遍历，直到 fast.next 为 null，表示当前 fast 已经是尾结点，slow.next 为需要删除的结点；</li><li>删除结点 slow.next；</li><li>返回 head。</li></ol><p><img src="https://assets.leetcode-cn.com/solution-static/19/p3.png" alt="示意图" loading="lazy"></p><h2 id="示例代码" tabindex="-1"><a class="header-anchor" href="#示例代码" aria-hidden="true">#</a> 示例代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            n<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 说明 n 等于链表大小，删除的是头结点</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token comment">// 停止条件，当 fast.next 为 null，表示当前 fast 已经是尾结点，slow.next 为需要删除的结点</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 删除结点 slow.next</span>
        slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="复杂度分析" tabindex="-1"><a class="header-anchor" href="#复杂度分析" aria-hidden="true">#</a> 复杂度分析</h2><ul><li><p>时间复杂度：O(n)，其中 n 是链表的长度。</p></li><li><p>空间复杂度：O(1)。</p></li></ul>`,13);function m(h,_){const t=e("ExternalLinkIcon"),o=e("Badge");return l(),c("div",null,[n("blockquote",null,[n("p",null,[s("LeetCode 传送门 "),n("a",u,[s("https://leetcode.cn/problems/remove-nth-node-from-end-of-list/"),a(t)])])]),n("h2",r,[k,s(" 题目描述 "),a(o,{text:"中等",type:"warning"})]),v])}const b=p(d,[["render",m],["__file","19-删除链表的倒数第 N 个结点.html.vue"]]);export{b as default};

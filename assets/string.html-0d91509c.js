import{_ as p,W as r,X as c,Y as n,Z as a,a0 as i,a1 as s,C as t}from"./framework-35f74cfc.js";const l={},u=s('<h2 id="string-概述" tabindex="-1"><a class="header-anchor" href="#string-概述" aria-hidden="true">#</a> String 概述</h2><p>String 内部使用<strong>字符数组</strong>实现，且 String 被声明为 <code>final</code>，不可以被继承，这意味着 value 数组初始化之后就不能再引用其它数组。并且 String 内部没有改变 value 数组的方法，因此可以保证 String 不可变。</p><p>当我们调用 String 类的任何方法（比如说 <code>trim()</code>、<code>substring()</code>、<code>toLowerCase()</code>）时，总会返回一个新的对象，而不影响之前的值。</p><p>Java 9 以前，String 是用 char 型数组实现的，之后改成了 byte 型数组实现，并增加了 <code>coder</code> 来表示编码。</p>',4),d={class:"hint-container tip"},g=n("p",{class:"hint-container-title"},"提示",-1),k=n("strong",null,"String 不可变的优点",-1),h=s('<ol><li><strong>可以缓存 hash 值</strong></li></ol><p>因为 String 的 hash 值经常被使用，例如 String 用做 HashMap 的 key。不可变的特性可以使得 hash 值也不可变，因此只需要进行一次计算。</p><ol start="2"><li><strong>String Pool 的需要</strong></li></ol><p>如果一个 String 对象已经被创建过了，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。</p><ol start="3"><li><strong>安全性</strong></li></ol><p>String 经常作为参数，String 不可变性可以保证参数不可变。例如在作为网络连接参数的情况下如果 String 是可变的，那么在网络连接过程中，String 被改变，改变 String 对象的那一方以为现在连接的是其它主机，而实际情况却不一定是。</p><ol start="4"><li><strong>线程安全</strong></li></ol><p>String 不可变性天生具备线程安全，可以在多个线程中安全地使用。</p>',8),m=s(`<h2 id="string-家族对比" tabindex="-1"><a class="header-anchor" href="#string-家族对比" aria-hidden="true">#</a> String 家族对比</h2><table><thead><tr><th>类型</th><th>可变</th><th>线程安全</th></tr></thead><tbody><tr><td>String</td><td>不可变</td><td>安全</td></tr><tr><td>StringBuilder</td><td>可变</td><td>不安全</td></tr><tr><td>StringBuffer</td><td>可变</td><td>安全，使用 synchronized 同步</td></tr></tbody></table><h2 id="string-intern" tabindex="-1"><a class="header-anchor" href="#string-intern" aria-hidden="true">#</a> <code>String.intern()</code></h2><p>使用 String.intern() 可以保证<strong>相同内容的字符串变量引用同一的内存对象</strong>。</p><p>下面示例中，s1 和 s2 采用 new String() 的方式新建了两个不同对象，而 s3 是通过 s1.intern() 方法取得一个对象引用。intern() 首先把 s1 引用的对象放到 String Pool(字符串常量池) 中，然后返回这个对象引用。因此 s3 和 s1 引用的是同一个字符串常量池的对象。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;aaa&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// false</span>
<span class="token class-name">String</span> s3 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果是采用 &quot;bbb&quot; 这种使用双引号的形式创建字符串实例，会自动地将新建的对象放入 <strong>String Pool</strong> 中。</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">&quot;bbb&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token string">&quot;bbb&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4 <span class="token operator">==</span> s5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
</code></pre></div><h2 id="string-pool-字符串常量池" tabindex="-1"><a class="header-anchor" href="#string-pool-字符串常量池" aria-hidden="true">#</a> String Pool 字符串常量池</h2><p>运行时常量池（Runtime Constant Pool）是虚拟机规范中是方法区的一部分，在加载类和结构到虚拟机后，就会创建对应的运行时常量池；而字符串常量池是这个过程中常量字符串的存放位置。所以从这个角度，字符串常量池属于虚拟机规范中的方法区，它是一个逻辑上的概念；而堆区，永久代以及元空间是实际的存放位置。</p><p>不同的虚拟机对虚拟机的规范（比如方法区）是不一样的，只有 HotSpot 才有永久代的概念，随着 HotSpot 的发展，在 JDK 8 中，取消了永久代，<em>类型信息、字段、方法、常量</em>保存在<strong>本地内存的元空间</strong>，但<em>字符串常量池、静态变量</em>仍在<strong>堆</strong>中。</p><hr><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,13),S={href:"https://pdai.tech/md/java/basic/java-basic-lan-basic.html",target:"_blank",rel:"noopener noreferrer"};function v(b,_){const e=t("Badge"),o=t("ExternalLinkIcon");return r(),c("div",null,[u,n("div",d,[g,n("p",null,[k,a(e,{text:"重要",type:"warning"})]),h]),m,n("ul",null,[n("li",null,[n("a",S,[i("Java 基础 - 知识点"),a(o)])])])])}const x=p(l,[["render",v],["__file","string.html.vue"]]);export{x as default};

import{_ as n,C as l,o as p,c as r,k as a,a as s,H as c,Q as e}from"./chunks/framework.01af844e.js";const v=JSON.parse('{"title":"Docker 基本概念","description":"","frontmatter":{"title":"Docker 基本概念","date":"2023-10-27T00:00:00.000Z","order":1},"headers":[],"relativePath":"devops/docker/intro.md","filePath":"devops/docker/intro.md","lastUpdated":1736475834000}'),t={name:"devops/docker/intro.md"},i=e(`<h1 id="docker-基本概念" tabindex="-1">Docker 基本概念 <a class="header-anchor" href="#docker-基本概念" aria-label="Permalink to &quot;Docker 基本概念&quot;">​</a></h1><h2 id="docker-架构" tabindex="-1">Docker 架构 <a class="header-anchor" href="#docker-架构" aria-label="Permalink to &quot;Docker 架构&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">基本概念</p><p>Docker 包含三个基本概念：</p><ul><li><p><strong>镜像</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。</p></li><li><p><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p></li><li><p><strong>仓库（Repository）</strong>：仓库可看着一个代码控制中心，用来保存镜像。</p></li></ul></div><h3 id="镜像-image" tabindex="-1">镜像（Image） <a class="header-anchor" href="#镜像-image" aria-label="Permalink to &quot;镜像（Image）&quot;">​</a></h3><p>我们都知道，操作系统分为 <strong>内核</strong> 和 <strong>用户空间</strong>。对于 <code>Linux</code> 而言，内核启动后，会挂载 <code>root</code> 文件系统为其提供用户空间支持。而 <strong>Docker 镜像</strong>（<code>Image</code>），就相当于是一个 <code>root</code> 文件系统。比如官方镜像 <code>ubuntu:18.04</code> 就包含了完整的一套 Ubuntu 18.04 最小系统的 <code>root</code> 文件系统。</p><p><strong>Docker 镜像</strong> 是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像 <strong>不包含</strong> 任何动态数据，其内容在构建之后也不会被改变。</p><p>因为镜像包含操作系统完整的 root 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用<code>Union FS</code>的技术，将其设计为<strong>分层存储</strong>的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。</p><p>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜 像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p><h3 id="容器-container" tabindex="-1">容器（Container） <a class="header-anchor" href="#容器-container" aria-label="Permalink to &quot;容器（Container）&quot;">​</a></h3><p>镜像（<code>Image</code>）和容器（<code>Container</code>）的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。</p><p>前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 <strong>容器存储层</strong>。</p><p>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</p><p>按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。</p><p>数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。</p><h3 id="仓库-repository" tabindex="-1">仓库（Repository） <a class="header-anchor" href="#仓库-repository" aria-label="Permalink to &quot;仓库（Repository）&quot;">​</a></h3><p>镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，<a href="https://vuepress.mirror.docker-practice.com/repository/registry.html" target="_blank" rel="noreferrer">Docker Registry</a> 就是这样的服务。</p><p>一个 <strong>Docker Registry</strong> 中可以包含多个 <strong>仓库</strong>（<code>Repository</code>）；每个仓库可以包含多个 <strong>标签</strong>（<code>Tag</code>）；每个标签对应一个镜像。</p><p>通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <code>&lt;仓库名&gt;:&lt;标签&gt;</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <code>latest</code> 作为默认标签。</p><p>以 Ubuntu 镜像为例，ubuntu 是仓库的名字，其内包含有不同的版本标签，如，16.04, 18.04。我们可以通过 ubuntu:16.04，或者 ubuntu:18.04 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 ubuntu，那将视为 ubuntu:latest。</p><p>仓库名经常以 <em>两段式路径</em> 形式出现，比如 <code>jwilder/nginx-proxy</code>，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。</p><p>Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务，官方的 <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub</a> 国内访问较慢，Docker 官方和国内很多云服务商都提供了国内加速器服务，比如：</p><ul><li>阿里云的加速器：<a href="https://help.aliyun.com/document_detail/60750.html" target="_blank" rel="noreferrer">https://help.aliyun.com/document_detail/60750.html</a></li><li>网易加速器：<a href="http://hub-mirror.c.163.com" target="_blank" rel="noreferrer">http://hub-mirror.c.163.com</a></li><li>Docker 官方中国加速器：<a href="https://registry.docker-cn.com" target="_blank" rel="noreferrer">https://registry.docker-cn.com</a></li><li>ustc 的镜像：<a href="https://docker.mirrors.ustc.edu.cn" target="_blank" rel="noreferrer">https://docker.mirrors.ustc.edu.cn</a></li><li>daocloud：<a href="https://www.daocloud.io/mirror#accelerator-doc%EF%BC%88%E6%B3%A8%E5%86%8C%E5%90%8E%E4%BD%BF%E7%94%A8%EF%BC%89" target="_blank" rel="noreferrer">https://www.daocloud.io/mirror#accelerator-doc（注册后使用）</a></li></ul><p>当然了，在内部项目中，还可以自己搭建私有的 Docker Registry 服务，官方提供了 <a href="https://hub.docker.com/_/registry/" target="_blank" rel="noreferrer">Docker Register</a> 镜像。</p><h2 id="docker-镜像-image" tabindex="-1">Docker 镜像（Image） <a class="header-anchor" href="#docker-镜像-image" aria-label="Permalink to &quot;Docker 镜像（Image）&quot;">​</a></h2><h3 id="获取镜像" tabindex="-1">获取镜像 <a class="header-anchor" href="#获取镜像" aria-label="Permalink to &quot;获取镜像&quot;">​</a></h3><p>从 Docker 镜像仓库获取镜像的命令是 <code>docker pull</code>。其命令格式为：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pull</span><span style="color:#E1E4E8;"> [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>具体的选项可以通过 <code>docker pull --help</code> 命令看到，这里我们说一下镜像名称的格式。</p><ul><li>Docker 镜像仓库地址：地址的格式一般是 <code>&lt;域名/IP&gt;[:端口号]</code>。如果不指定仓库地址，会使用 Docker 配置的仓库地址，默认地址是 Docker Hub(<code>docker.io</code>)。</li><li>仓库名：如之前所说，这里的仓库名是两段式名称，即 <code>&lt;用户名&gt;/&lt;软件名&gt;</code>。对于 Docker Hub，如果不给出用户名，则默认为 <code>library</code>，也就是官方镜像。</li></ul><p>示例：<code>docker pull ubuntu:18.04</code></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[root@VM-16-13-centos </span><span style="color:#F97583;">~</span><span style="color:#E1E4E8;">]# docker pull ubuntu:18.04</span></span>
<span class="line"><span style="color:#B392F0;">18.04:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Pulling</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">library/ubuntu</span></span>
<span class="line"><span style="color:#B392F0;">40dd5be53814:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Pull</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">complete</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#镜像是分层存储的，前面为每层的 ID 的前 12 位</span></span>
<span class="line"><span style="color:#B392F0;">Digest:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sha256:d21b6ba9e19feffa328cb3864316e6918e30acfd55e285b5d3df1d8ca3c7fd3f</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#镜像完整的 sha256 的摘要</span></span>
<span class="line"><span style="color:#B392F0;">Status:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Downloaded</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">newer</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">image</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ubuntu:18.04</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#下载结果</span></span>
<span class="line"><span style="color:#B392F0;">docker.io/library/ubuntu:18.04</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">#完整镜像名称</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[root@VM-16-13-centos </span><span style="color:#D73A49;">~</span><span style="color:#24292E;">]# docker pull ubuntu:18.04</span></span>
<span class="line"><span style="color:#6F42C1;">18.04:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Pulling</span><span style="color:#24292E;"> </span><span style="color:#032F62;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">library/ubuntu</span></span>
<span class="line"><span style="color:#6F42C1;">40dd5be53814:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">complete</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#镜像是分层存储的，前面为每层的 ID 的前 12 位</span></span>
<span class="line"><span style="color:#6F42C1;">Digest:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sha256:d21b6ba9e19feffa328cb3864316e6918e30acfd55e285b5d3df1d8ca3c7fd3f</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#镜像完整的 sha256 的摘要</span></span>
<span class="line"><span style="color:#6F42C1;">Status:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Downloaded</span><span style="color:#24292E;"> </span><span style="color:#032F62;">newer</span><span style="color:#24292E;"> </span><span style="color:#032F62;">image</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ubuntu:18.04</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#下载结果</span></span>
<span class="line"><span style="color:#6F42C1;">docker.io/library/ubuntu:18.04</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">#完整镜像名称</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="使用镜像" tabindex="-1">使用镜像 <a class="header-anchor" href="#使用镜像" aria-label="Permalink to &quot;使用镜像&quot;">​</a></h3><p>有了基础镜像之后，可以通过 <code>docker run</code>命令基于镜像启动容器，当启动容器时，如果本地不存在该镜像，Docker 还会先从镜像仓库下载该镜像，然后再启动容器，具体的容器相关见 <a href="#Docker-容器">Docker 容器</a>。</p><h3 id="查看镜像" tabindex="-1">查看镜像 <a class="header-anchor" href="#查看镜像" aria-label="Permalink to &quot;查看镜像&quot;">​</a></h3><p>列举本地已经下载的镜像使用 <code>docker image ls</code>命令，其信息包含了 <code>仓库名</code>、<code>标签</code>、<code>镜像 ID</code>、<code>创建时间</code> 以及 <code>所占用的空间</code>（镜像实际大小，镜像库中的为压缩后的大小）。</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">image</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ls</span></span>
<span class="line"><span style="color:#B392F0;">REPOSITORY</span><span style="color:#E1E4E8;">           </span><span style="color:#9ECBFF;">TAG</span><span style="color:#E1E4E8;">                 </span><span style="color:#9ECBFF;">IMAGE</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ID</span><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">CREATED</span><span style="color:#E1E4E8;">             </span><span style="color:#9ECBFF;">SIZE</span></span>
<span class="line"><span style="color:#B392F0;">redis</span><span style="color:#E1E4E8;">                </span><span style="color:#9ECBFF;">latest</span><span style="color:#E1E4E8;">              </span><span style="color:#79B8FF;">5</span><span style="color:#9ECBFF;">f515359c7f8</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">days</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ago</span><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">183</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">MB</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">$</span><span style="color:#24292E;"> </span><span style="color:#032F62;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">image</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ls</span></span>
<span class="line"><span style="color:#6F42C1;">REPOSITORY</span><span style="color:#24292E;">           </span><span style="color:#032F62;">TAG</span><span style="color:#24292E;">                 </span><span style="color:#032F62;">IMAGE</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ID</span><span style="color:#24292E;">            </span><span style="color:#032F62;">CREATED</span><span style="color:#24292E;">             </span><span style="color:#032F62;">SIZE</span></span>
<span class="line"><span style="color:#6F42C1;">redis</span><span style="color:#24292E;">                </span><span style="color:#032F62;">latest</span><span style="color:#24292E;">              </span><span style="color:#005CC5;">5</span><span style="color:#032F62;">f515359c7f8</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#032F62;">days</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ago</span><span style="color:#24292E;">          </span><span style="color:#005CC5;">183</span><span style="color:#24292E;"> </span><span style="color:#032F62;">MB</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以使用 <code>docker system df</code> 命令查询镜像实际占用的大小，不同镜像可能复用了多层存储中的部分层，因此实际占用硬盘大小会小于显示大小。</p><p><strong>虚悬镜像</strong></p><p>有些镜像原本是有镜像名和标签的，随着官方镜像维护，发布了新版本后，重新 <code>docker pull</code>时，镜像名被转移到了新下载的镜像身上，而旧的镜像上的这个名称则被取消，标签会变成 <code>&lt;none&gt;</code>，这种镜像称为”虚悬镜像“，可以通过<code>docker image ls -f dangling=true</code>命令查看虚悬镜像，一般来说，虚悬镜像已经失去了存在的价值，是可以随意删除的。</p><p>更多镜像相关命令可通过<code>docker image ls --help</code>查看。</p><h3 id="删除镜像" tabindex="-1">删除镜像 <a class="header-anchor" href="#删除镜像" aria-label="Permalink to &quot;删除镜像&quot;">​</a></h3><p><strong>删除命令</strong></p><p>如果要删除本地的镜像，可以使用 <code>docker image rm</code> 命令，其格式为：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">image</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> [选项] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">镜像</span><span style="color:#F97583;">1&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">镜像2</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> ...]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">image</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> [选项] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">镜像</span><span style="color:#D73A49;">1&gt;</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">镜像2</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> ...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中的镜像可以为<code>镜像短 ID</code>、<code>镜像长 ID</code>、<code>镜像名</code> 或者 <code>镜像摘要</code>。</p><p><strong>当镜像删除时，会出现如下几种情况：</strong></p><ol><li>删除的镜像仅有一个标签，命令执行结果显示 <code>Deleted</code>，表示删除；</li><li>仅删除了某个标签的镜像，此时会看到命令执行结果中，显示的不是 <code>Deleted</code> 而是 <code>Untagged</code>，因为还有别的标签指向了这个镜像；</li><li>删除了一个镜像的全部标签，但是由于镜像是多层存储复用的，可能有别的镜像依赖当前镜像的某一层，依旧不会触发删除该层的行为，也是为什么有时候会发现所删除的层数和自己 <code>docker pull</code> 看到的层数不一样的原因；</li><li>当删除的镜像有容器依赖其时，需要先删除容器，然后才可以删除镜像。</li></ol><p><strong>镜像删除命令还可以结合镜像查看命令，删除符合查询条件的镜像</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">image</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">docker</span><span style="color:#9ECBFF;"> image ls [选项])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">image</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">docker</span><span style="color:#032F62;"> image ls [选项])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,51),d={id:"docker-commit",tabindex:"-1"},y=a("a",{class:"header-anchor",href:"#docker-commit","aria-label":'Permalink to "Docker commit <Badge text="不推荐" type="warning"/>"'},"​",-1),E=e(`<p>当我们使用一个镜像运行了一个容器，并且进入容器内部进行了修改的时候，可能需要将修改后的镜像保存，<code>docker commit</code> 命令可以将容器打包成为一个新的镜像，具体命令格式：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commit</span><span style="color:#E1E4E8;"> [选项] </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">容器ID或容器名</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">仓库名</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">[:</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">标签</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commit</span><span style="color:#24292E;"> [选项] </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">容器ID或容器名</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">仓库名</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">[:</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">标签</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">]]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>docker commit</code> 虽然可以制作镜像，但是并不推荐使用，如果使用 <code>docker diff</code> 命令查询容器的改动后会发现，容器运行后，除了本身的改动外，由于命令的执行，还有很多文件被改动或添加了；另一方面，镜像所使用的分层存储的概念，除当前层外，之前的每一层都是不会发生改变的，换句话说，任何修改的结果仅仅是在当前层进行标记、添加、修改，而不会改动上一层，一次次的 <code>docker commit</code> 只会让镜像越来越臃肿，因此更加推荐使用 <code>dockerfile</code> 构建镜像。</p><p>使用 dockerfile 制作镜像可以参考 <a href="./docker-file.html">dockerfile</a>。</p><h3 id="镜像版本选择" tabindex="-1">镜像版本选择 <a class="header-anchor" href="#镜像版本选择" aria-label="Permalink to &quot;镜像版本选择&quot;">​</a></h3><h4 id="官方镜像" tabindex="-1">官方镜像 <a class="header-anchor" href="#官方镜像" aria-label="Permalink to &quot;官方镜像&quot;">​</a></h4><p>官方默认镜像（不带其他后缀的镜像）使用最新的稳定 Debian 操作系统发行版，它的缺点是打包后的体积过大，但它通常是最安全的选择。</p><p>示例：openjdk:8u312-jre</p><h4 id="debian-发行版镜像" tabindex="-1">Debian 发行版镜像 <a class="header-anchor" href="#debian-发行版镜像" aria-label="Permalink to &quot;Debian 发行版镜像&quot;">​</a></h4><p>带有 bullseye、buster、stretch 或 jessie 标签的镜像是不同 Debian 发行版的代号，对应情况如下：</p><ul><li>bullseye:Debian 11</li><li>buster:Debian 10</li><li>stretch:Debian 9</li><li>jessie:Debian 8</li></ul><p>示例：openjdk:8u312-jre-slim-buster</p><h4 id="slim-镜像" tabindex="-1">slim 镜像 <a class="header-anchor" href="#slim-镜像" aria-label="Permalink to &quot;slim 镜像&quot;">​</a></h4><p>slim 的镜像是完整镜像的配对版本。这个镜像通常只安装运行特定工具所需的最小包。以 python 为例，就是运行 python 的最小包，node.js 同理。</p><p>通过省去较少使用的工具，镜像会更小。如果有空间限制且不需要完整版本，请使用此镜像。</p><p>** 但是，在使用这个镜像时，一定要进行彻底的测试！** 如果您遇到无法解释的错误，请尝试切换到完整的镜像，看看是否能够解决问题。</p><h4 id="alpine-镜像" tabindex="-1">alpine 镜像 <a class="header-anchor" href="#alpine-镜像" aria-label="Permalink to &quot;alpine 镜像&quot;">​</a></h4><p>alipine 镜像基于 alpine linux 项目，这是一个专门为容器内部使用而构建的操作系统。在很长一段时间里，这些是最受欢迎的镜像变体，因为它们的尺寸很小。</p><p>然而，一些团队正在弃用 alpine 镜像，因为这些镜像可能会导致难以调试的兼容性问题。具体来说，如果使用 python 镜像，一些 wheels 将被构建成与 Debian 兼容，并且需要重新编译，才能与基于 apline 的镜像一起工作。</p><p>使用 alpine 镜像的主要原因是使你得到的镜像尽可能小。基础镜像将小于 5MB。python 基础镜像 (将 python 添加到基础 alpine 镜像) 目前是 78.9MB。这仍然很小。</p><p>如果考虑到空间问题，强烈推荐使用此镜像。</p><p>它的缺点是不包含一些你可能会需要的包。主要是，它使用了一个更小的 musl lib 代替 glibc。如果您的应用程序有特定的 libc 需求，您可能会遇到问题。</p><p>如果你发现 Alpine 镜像缺少你需要的东西，你可以直接在 Dockerfile 中安装它，这样能确保镜像只包含你需要的内容。需要注意，如果您正在安装外部包，您的 Dockerfile 将会更改。主要的区别是，您将使用 apk 而不是 apt-get 来安装包。</p><p>对 alpine 镜像的使用有很多担心之处，所以你需要充分了解它。需要充分阅读文档并研究。同样，如果您在构建 Dockerfile 时遇到了无法解释的问题，请尝试切换到完整的镜像，看看是否能解决问题。</p><p>示例：openjdk:8u171-jdk-alpine3.7</p><h4 id="windowsservercore-镜像" tabindex="-1">windowsservercore 镜像 <a class="header-anchor" href="#windowsservercore-镜像" aria-label="Permalink to &quot;windowsservercore 镜像&quot;">​</a></h4><p>windowsservercore 是使用 windows 操作系统打包的镜像。</p><p>示例：openjdk:8u312-jre-windowsservercore-ltsc2022</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>选择镜像时应该根据实际情况选择镜像，不要求镜像大小限制就选择稳定的官方镜像；</li><li>使用 slim 镜像时应该做全面的测试；</li><li>如果有极端的空间限制，可以尝试使用 alpine 镜像，但是可能会导致更长的构建时间和不确定的 bug；</li><li>不要在生产环境中使用 <code>&lt;image&gt;:latest</code> 使用最新的镜像，而是使用具体版本并进行全面的测试。</li></ul></div><h2 id="docker-容器-container" tabindex="-1">Docker 容器（Container） <a class="header-anchor" href="#docker-容器-container" aria-label="Permalink to &quot;Docker 容器（Container）&quot;">​</a></h2><p>容器是 Docker 又一核心概念。</p><p>简单的说，容器是独立运行的一个或一组应用，以及它们的运行态环境。对应的，虚拟机可以理解为模拟运行的一整套操作系统（提供了运行态环境和其他系统环境）和跑在上面的应用。</p><h3 id="启动容器" tabindex="-1">启动容器 <a class="header-anchor" href="#启动容器" aria-label="Permalink to &quot;启动容器&quot;">​</a></h3><p>启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（exited）的容器重新启动。</p><p>因为 Docker 的容器实在太轻量级了，很多时候用户都是随时删除和新创建容器。</p><p>使用以下命令来启动一个新容器：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> [OPTIONS] IMAGE[:TAG</span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;">@DIGEST] [COMMAND] [ARG...]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> [OPTIONS] IMAGE[:TAG</span><span style="color:#D73A49;">|</span><span style="color:#24292E;">@DIGEST] [COMMAND] [ARG...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过 <code>docker run</code> 指定一个镜像及版本来启动对应版本的镜像，如果不指定镜像版本，默认使用 latest 版本。</p><p>另外，可以使用 OPTIONS 来覆盖镜像的默认设置，常用的参数有：</p><ul><li><code>-t</code>: 选项让 Docker 分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上</li><li><code>-i</code>: 让容器的标准输入保持打开</li><li><code>-d</code>: 后台运行容器，打印容器的 id</li><li><code>--name {name}</code>: 给启动的容器指定名称，如果冲突会创建失败</li><li><code>--rm</code>: 在容器运行结束后自动删除容器</li><li><code>-p</code>: 为启动的容器与宿主机做端口映射，例如：-p 80:8080，让宿主机的 80 端口与容器内的 8080 端口映射</li><li><code>-v</code>: 设置宿主机目录与容器内目录的映射</li><li><code>--network</code>: 为启动的容器指定网络，如果是自定义网络，需要先使用 <code>docker network create NETWORK</code> 创建网络</li><li><code>--restart</code>: 设置容器的重启策略，例如：<code>--restart=always</code> 为守护进程启动时自动启动该容器，且该容器非正常停止后自动重启</li></ul><p>更多 <code>docker run</code> 参数可以参考 <a href="https://docs.docker.com/engine/reference/commandline/run/" target="_blank" rel="noreferrer">Reference - docker run</a></p><p>还可以使用 <code>docker start</code> 启动一个处于停止状态的容器：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> [OPTIONS] CONTAINER [CONTAINER...]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> [OPTIONS] CONTAINER [CONTAINER...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>当然，也可以重启一个正在运行的重启：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">restart</span><span style="color:#E1E4E8;"> [OPTIONS] CONTAINER [CONTAINER...]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">restart</span><span style="color:#24292E;"> [OPTIONS] CONTAINER [CONTAINER...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="查看容器" tabindex="-1">查看容器 <a class="header-anchor" href="#查看容器" aria-label="Permalink to &quot;查看容器&quot;">​</a></h3><p>查看正在运行的容器：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ps</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ps</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>查看全部容器：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ps</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-a</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ps</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="进入容器" tabindex="-1">进入容器 <a class="header-anchor" href="#进入容器" aria-label="Permalink to &quot;进入容器&quot;">​</a></h3><p>在使用 -d 参数时，容器启动后会进入后台。</p><p>某些时候需要进入容器进行操作，包括使用 <code>docker attach</code> 命令或 <code>docker exec</code> 命令，推荐大家使用 <code>docker exec</code> 命令，因为使用 <code>docker attach</code> 命令退出后，容器会停止。</p><p>示例：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exec</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3630</span><span style="color:#9ECBFF;">fb4ce831</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">bash</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3630</span><span style="color:#032F62;">fb4ce831</span><span style="color:#24292E;"> </span><span style="color:#032F62;">bash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>进入容器后，输入 <code>exit</code> 可以退出容器。</p><h3 id="停止容器" tabindex="-1">停止容器 <a class="header-anchor" href="#停止容器" aria-label="Permalink to &quot;停止容器&quot;">​</a></h3><p>使用以下命令停止容器：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">stop</span><span style="color:#E1E4E8;"> [OPTIONS] CONTAINER [CONTAINER...]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">stop</span><span style="color:#24292E;"> [OPTIONS] CONTAINER [CONTAINER...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可以使用 <code>-t</code> 参数，来等待一段时间后停止容器（以秒为单位）。</p><h3 id="删除容器" tabindex="-1">删除容器 <a class="header-anchor" href="#删除容器" aria-label="Permalink to &quot;删除容器&quot;">​</a></h3><p>使用命令删除容器，前提是容器已经停止：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> [OPTIONS] CONTAINER [CONTAINER...]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">或者</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">container</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rm</span><span style="color:#E1E4E8;"> [OPTIONS] CONTAINER [CONTAINER...]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> [OPTIONS] CONTAINER [CONTAINER...]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">或者</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">container</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rm</span><span style="color:#24292E;"> [OPTIONS] CONTAINER [CONTAINER...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>删除所有处于停止状态的容器：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">container</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">prune</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">container</span><span style="color:#24292E;"> </span><span style="color:#032F62;">prune</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="docker-仓库-repository" tabindex="-1">Docker 仓库 (Repository)？ <a class="header-anchor" href="#docker-仓库-repository" aria-label="Permalink to &quot;Docker 仓库 (Repository)？&quot;">​</a></h2><p>仓库（Repository）是集中存放镜像的地方。</p><p>一个容易混淆的概念是注册服务器（Registry）。实际上注册服务器是管理仓库的具体服务器，每个服务器上可以有多个仓库，而每个仓库下面有多个镜像。从这方面来说，仓库可以被认为是一个具体的项目或目录。例如对于仓库地址 docker.io/ubuntu 来说，docker.io 是注册服务器地址，ubuntu 是仓库名。</p><p>大部分时候，并不需要严格区分这两者的概念。</p><h3 id="docker-hub" tabindex="-1">Docker Hub <a class="header-anchor" href="#docker-hub" aria-label="Permalink to &quot;Docker Hub&quot;">​</a></h3><p>Docker Hub 是 Docker 官方维护的一个公共仓库，大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。</p><p>Docker hub 的地址 <a href="https://hub.docker.com" target="_blank" rel="noreferrer">https://hub.docker.com</a>，你需要注册一个 Docker hub 账号，才能在 Docker Hub 上面创建自己的镜像仓库。</p><p>在本地的 Dcoker cli 中，你可以通过 <code>docker login</code> 来登录 Docker hub、<code>docker logout</code> 来注销登录。</p><h3 id="私有仓库" tabindex="-1">私有仓库 <a class="header-anchor" href="#私有仓库" aria-label="Permalink to &quot;私有仓库&quot;">​</a></h3><p>有时候使用 Docker Hub 这样的公共仓库可能不方便，用户可以创建一个本地仓库供私人使用。</p><p><a href="https://docs.docker.com/registry/" target="_blank" rel="noreferrer">docker-registry</a> 是官方提供的工具，可以用于构建私有的镜像仓库。</p><p>具体案例可以参考 <a href="https://docs.docker.com/registry/#basic-commands" target="_blank" rel="noreferrer">Reference - Docekr registry</a>。</p><h3 id="nexus3-x-的私有仓库" tabindex="-1">Nexus3.x 的私有仓库 <a class="header-anchor" href="#nexus3-x-的私有仓库" aria-label="Permalink to &quot;Nexus3.x 的私有仓库&quot;">​</a></h3><p>使用 Docker 官方的 Registry 创建的仓库面临一些维护问题。比如某些镜像删除以后空间默认是不会回收的，需要一些命令去回收空间然后重启 Registry。在企业中把内部的一些工具包放入 Nexus 中是比较常见的做法，最新版本 Nexus3.x 全面支持 Docker 的私有镜像。所以使用 Nexus3.x (opens new window) 一个软件来管理 Docker , Maven , Yum , PyPI 等是一个明智的选择。</p><p><strong>启动一个 nexus3 容器：</strong></p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-d</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-it</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--name</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nexus3</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--restart=always</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8081</span><span style="color:#9ECBFF;">:8081</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-p</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5000</span><span style="color:#9ECBFF;">:5000</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">sonatype/nexus3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-d</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-it</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--name</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nexus3</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--restart=always</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8081</span><span style="color:#032F62;">:8081</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-p</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5000</span><span style="color:#032F62;">:5000</span><span style="color:#24292E;"> </span><span style="color:#032F62;">sonatype/nexus3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这里的 8081 为 Nexus3 的网页开放端口，5000 是为 Docker 仓库预留的端口。</p><p>容器启动后，打开 localhost:8081 访问 Nexus 界面，可以从右上角点击登录，用户名为 admin，密码需要使用如下命令获取：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">exec</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">nexus3</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cat</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">/nexus-data/admin.password</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">exec</span><span style="color:#24292E;"> </span><span style="color:#032F62;">nexus3</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cat</span><span style="color:#24292E;"> </span><span style="color:#032F62;">/nexus-data/admin.password</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>首次登录后需要更改密码，并设置匿名访问策略。</p><p><strong>之后，我们就可以创建 Docker 仓库了：</strong></p><p>创建一个私有仓库的方法： <code>Repository-&gt;Repositories</code> 点击右边菜单 <code>Create repository</code> 选择 <code>docker (hosted)</code></p><ul><li><strong>Name</strong>: 仓库的名称</li><li><strong>HTTP</strong>: 仓库单独的访问端口（例如：<strong>5000</strong>）</li><li><strong>Hosted -&gt; Deployment pollcy</strong>: 请选择 <strong>Allow redeploy</strong> 否则无法上传 Docker 镜像。</li></ul><p>其它的仓库创建方法请各位自己摸索，还可以创建一个 <code>docker (proxy)</code> 类型的仓库链接到 DockerHub 上。再创建一个 <code>docker (group)</code> 类型的仓库把刚才的 <code>hosted</code> 与 <code>proxy</code> 添加在一起。主机在访问的时候默认下载私有仓库中的镜像，如果没有将链接到 DockerHub 中下载并缓存到 Nexus 中。</p><p><strong>此外，我们还需要添加用户和访问权限：</strong></p><ul><li><p>菜单 <code>Security-&gt;Realms</code> 把 Docker Bearer Token Realm 移到右边的框中保存。</p></li><li><p>添加用户规则：菜单 <code>Security-&gt;Roles</code>-&gt;<code>Create role</code> 在 <code>Privlleges</code> 选项搜索 docker 把相应的规则移动到右边的框中然后保存。</p></li><li><p>添加用户：菜单 <code>Security-&gt;Users</code>-&gt;<code>Create local user</code> 在 <code>Roles</code> 选项中选中刚才创建的规则移动到右边的窗口保存。</p></li></ul><p><strong>接下来，我们来测试一下，上传一个镜像到 Nexus 的 Docker 仓库</strong></p><ol><li>拉取一个 ubuntu 镜像</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pull</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ubuntu</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ubuntu</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>标记 ubuntu 镜像，归入在 Nexus 创建的 Docker 仓库</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">image</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tag</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ubuntu</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">localhost:5000/myfirstimage</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">image</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tag</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ubuntu</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:5000/myfirstimage</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>登录该 Docker 仓库；输入用户名和密码，具体参考上面的<strong>添加用户和权限</strong></li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">login</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">localhost:5000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">login</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:5000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="4"><li>push 镜像到 Docker 仓库</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">push</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">localhost:5000/myfirstimage</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">push</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:5000/myfirstimage</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行完成就可以在 nexus 看到镜像了。</p><ol start="5"><li>pull 镜像到本地 (先删除本地镜像再拉取)</li></ol><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">删除本地镜像</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">rmi</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">localhost:5000/myfirstimage</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">//</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">从</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">Nexus</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">拉取镜像</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">pull</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">localhost:5000/myfirstimage</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">删除本地镜像</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">rmi</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:5000/myfirstimage</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//</span><span style="color:#24292E;"> </span><span style="color:#032F62;">从</span><span style="color:#24292E;"> </span><span style="color:#032F62;">Nexus</span><span style="color:#24292E;"> </span><span style="color:#032F62;">拉取镜像</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">pull</span><span style="color:#24292E;"> </span><span style="color:#032F62;">localhost:5000/myfirstimage</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://docs.docker.com/engine/reference/run/" target="_blank" rel="noreferrer">DockerHub 官方文档</a></li><li><a href="https://vuepress.mirror.docker-practice.com/container/" target="_blank" rel="noreferrer">Docker 从入门到实践</a></li></ul>`,105);function u(h,b,k,g,F,m){const o=l("Badge");return p(),r("div",null,[i,a("h3",d,[s("Docker commit "),c(o,{text:"不推荐",type:"warning"}),s(),y]),E])}const B=n(t,[["render",u]]);export{v as __pageData,B as default};

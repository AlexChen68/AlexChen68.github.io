import{_ as a,o as e,c as t,Q as r}from"./chunks/framework.01af844e.js";const m=JSON.parse('{"title":"分布式缓存","description":"","frontmatter":{"title":"分布式缓存","date":"2023-11-03T00:00:00.000Z","order":3},"headers":[],"relativePath":"architecture/distributed/cache.md","filePath":"architecture/distributed/cache.md","lastUpdated":1700567703000}'),i={name:"architecture/distributed/cache.md"},l=r('<h1 id="分布式缓存" tabindex="-1">分布式缓存 <a class="header-anchor" href="#分布式缓存" aria-label="Permalink to &quot;分布式缓存&quot;">​</a></h1><h2 id="本地缓存和分布式缓存" tabindex="-1">本地缓存和分布式缓存 <a class="header-anchor" href="#本地缓存和分布式缓存" aria-label="Permalink to &quot;本地缓存和分布式缓存&quot;">​</a></h2><ul><li><p><strong>本地缓存</strong>：指的是在应用中的缓存组件，其最大的优点是应用和 cache 是在同一个进程内部，请求缓存非常快速，没有过多的网络开销等，在单应用不需要集群支持或者集群情况下各节点无需互相通知的场景下使用本地缓存较合适；同时，它的缺点也是应为缓存跟应用程序耦合，多个应用程序无法直接的共享缓存，各应用或集群的各节点都需要维护自己的单独缓存，对内存是一种浪费。</p></li><li><p><strong>分布式缓存</strong>：指的是与应用分离的缓存组件或服务，其最大的优点是自身就是一个独立的应用，与本地应用隔离，多个应用可直接的共享缓存。</p></li></ul><h2 id="分布式缓存实现方案" tabindex="-1">分布式缓存实现方案 <a class="header-anchor" href="#分布式缓存实现方案" aria-label="Permalink to &quot;分布式缓存实现方案&quot;">​</a></h2><h3 id="" tabindex="-1"><a class="header-anchor" href="#" aria-label="Permalink to &quot;&quot;">​</a></h3><h2 id="常见的问题和解决方案" tabindex="-1">常见的问题和解决方案 <a class="header-anchor" href="#常见的问题和解决方案" aria-label="Permalink to &quot;常见的问题和解决方案&quot;">​</a></h2><ul><li>缓存穿透问题</li><li>缓存击穿问题</li><li>缓存雪崩问题</li><li>数据库和缓存一致性问题</li></ul>',7),o=[l];function c(h,s,d,n,_,u){return e(),t("div",null,o)}const b=a(i,[["render",c]]);export{m as __pageData,b as default};

import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.01af844e.js";const F=JSON.parse('{"title":"Spring Security 实践","description":"","frontmatter":{"title":"Spring Security 实践","date":"2023-11-23T00:00:00.000Z","order":10},"headers":[],"relativePath":"spring/springsecurity/security-demo.md","filePath":"spring/springsecurity/security-demo.md","lastUpdated":1736475834000}'),l={name:"spring/springsecurity/security-demo.md"},o=p(`<h1 id="spring-security-实践" tabindex="-1">Spring Security 实践 <a class="header-anchor" href="#spring-security-实践" aria-label="Permalink to &quot;Spring Security 实践&quot;">​</a></h1><h2 id="准备工作" tabindex="-1">准备工作 <a class="header-anchor" href="#准备工作" aria-label="Permalink to &quot;准备工作&quot;">​</a></h2><ol><li><p>创建一个 SpringBoot 项目</p></li><li><p>添加依赖</p></li></ol><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">&lt;!-- spring security --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-security&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- web --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.springframework.boot&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">   &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;spring-boot-starter-web&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">&lt;!-- spring security --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-security&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#6A737D;">&lt;!-- web --&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.springframework.boot&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">   &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;spring-boot-starter-web&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="3"><li>创建一个 controller，用于测试</li></ol><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RestController</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HelloController</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">GetMapping</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/hello&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> String </span><span style="color:#B392F0;">hello</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;hello&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RestController</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HelloController</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">GetMapping</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/hello&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> String </span><span style="color:#6F42C1;">hello</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;hello&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ol start="4"><li>配置端口</li></ol><div class="language-yml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">server</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">port</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">9000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">server</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">port</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">9000</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="表单登陆" tabindex="-1">表单登陆 <a class="header-anchor" href="#表单登陆" aria-label="Permalink to &quot;表单登陆&quot;">​</a></h2><h3 id="spring-security-默认配置" tabindex="-1">spring security 默认配置 <a class="header-anchor" href="#spring-security-默认配置" aria-label="Permalink to &quot;spring security 默认配置&quot;">​</a></h3><ul><li>在未配置任何 spring security 配置项时，启动 springboot 项目，在控制台会输出一个 uuid 作为默认的密码（默认用户名为：user）。</li></ul><p>示例：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">Using</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">generated</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">security</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">password:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">05492</span><span style="color:#9ECBFF;">df7-3f1f-4ec9-b1d6-db24cb8eab2e</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">Using</span><span style="color:#24292E;"> </span><span style="color:#032F62;">generated</span><span style="color:#24292E;"> </span><span style="color:#032F62;">security</span><span style="color:#24292E;"> </span><span style="color:#032F62;">password:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">05492</span><span style="color:#032F62;">df7-3f1f-4ec9-b1d6-db24cb8eab2e</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这意味着，你不需要配置什么东西，spring security 会自动配置，当你访问系统的接口时，<strong>未登陆用户</strong>会被重定向到 <code>/login</code> 界面进行登陆。</p><p>试着访问 <code>http://localhost:9000/hello</code>，会被重定向到一个默认的登陆界面（可能由于网络原因，无法下载 css 文件）；使用用户名 user 和生成的密码登陆后，会在 cookie 中存储一个 JSESSIONID。</p><p>登陆成功后，会重定向到之前访问的 <code>hello</code> 接口，返回 &quot;hello&quot;。</p><ul><li>使用自定义的用户和密码</li></ul><p>在 <code>application.yml</code> 中，添加 <code>spring security</code> 的配置，可以配置默认的用户名和密码</p><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">spring</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#85E89D;">security</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#85E89D;">user</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">name</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">admin</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#85E89D;">password</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">123456</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">spring</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#22863A;">security</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#22863A;">user</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">name</span><span style="color:#24292E;">: </span><span style="color:#032F62;">admin</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#22863A;">password</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">123456</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>重启应用，再次访问 <code>http://localhost:9000/hello</code>，输入配置的帐号和密码测试。</p><h2 id="basic-认证" tabindex="-1">Basic 认证 <a class="header-anchor" href="#basic-认证" aria-label="Permalink to &quot;Basic 认证&quot;">​</a></h2><blockquote><p>Basic 认证是一种 HTTP 认证协议，用于在客户端和服务器之间进行身份验证。它是一种简单的基于用户名和密码的认证机制，被广泛用于 Web 应用程序和 API 的安全访问控制。</p></blockquote><p>在 Basic 认证中，客户端发送一个 HTTP 请求到服务器，并在请求头中包含一个 <code>Authorization</code> 字段。该字段包含了经过 Base64 编码的用户名和密码组合，格式为 <code>username:password</code>，例如：<code>--header &#39;Authorization: Basic YWRtaW46MTIzNDU2&#39;</code></p><p>服务器收到请求后，解码 Authorization 字段，然后验证提供的用户名和密码是否与其记录的凭据匹配。</p><p>Spring Security 开启 Basic 参考：<a href="https://springdoc.cn/spring-security/servlet/authentication/passwords/basic.html" target="_blank" rel="noreferrer">Basic 认证</a>。</p><h3 id="配置开启-basic-认证" tabindex="-1">配置开启 Basic 认证 <a class="header-anchor" href="#配置开启-basic-认证" aria-label="Permalink to &quot;配置开启 Basic 认证&quot;">​</a></h3><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Order</span><span style="color:#E1E4E8;">(Ordered.HIGHEST_PRECEDENCE)</span></span>
<span class="line"><span style="color:#E1E4E8;">SecurityFilterChain </span><span style="color:#B392F0;">securityFilterChain</span><span style="color:#E1E4E8;">(HttpSecurity http) throws Exception {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 开启 Basic 认证</span></span>
<span class="line"><span style="color:#E1E4E8;">   http.</span><span style="color:#B392F0;">httpBasic</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">withDefaults</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> http.</span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Order</span><span style="color:#24292E;">(Ordered.HIGHEST_PRECEDENCE)</span></span>
<span class="line"><span style="color:#24292E;">SecurityFilterChain </span><span style="color:#6F42C1;">securityFilterChain</span><span style="color:#24292E;">(HttpSecurity http) throws Exception {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#6A737D;">// 开启 Basic 认证</span></span>
<span class="line"><span style="color:#24292E;">   http.</span><span style="color:#6F42C1;">httpBasic</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">withDefaults</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> http.</span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>重启应用，按下图的配置请求，请求通过会响应结果。</p><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/images/2023/spring-security-2023-11-24-17-06-11.png" alt="spring-security-2023-11-24-17-06-11"></p><h2 id="密码编码器" tabindex="-1">密码编码器 <a class="header-anchor" href="#密码编码器" aria-label="Permalink to &quot;密码编码器&quot;">​</a></h2><p>通常，为了安全考虑，我们不会直接在数据库存储明文密码，而是存储加密后的密码；在用户登陆时，将用户的明文密码使用同一个编码器进行加密，然后比对加密后的密文是否匹配即可。</p><p>Spring Security 提供了多种加密方式的密码编码器，你也可以通过实现 <code>PasswordEncoder</code> 接口来自定义密码编码器。常用编码器有：</p><ul><li><code>NoOpPasswordEncoder</code>: 直接使用明文密码，也是默认的编码器，通常只有在简单测试时使用，生产上不使用。</li><li><code>BCryptPasswordEncoder</code>: 使用广泛支持的 bcrypt 算法对密码进行散列。</li><li><code>DelegatingPasswordEncoder</code>: 一个委托代理编码器，<code>PasswordEncoderFactories</code> 这个工厂的静态构造方法把常用的几种密码方案都注入到了缓存 Map 中，默认注入的 encodingId 对应的是 BCryptPasswordEncoder 加密方案，这样系统就可以达到在新存储密码可以使用 BCrypt Password Encoder 加密方案进行加密，但是对于数据库里面以前用其他方式加密的密码也支持比对。</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> PasswordEncoder </span><span style="color:#B392F0;">createDelegatingPasswordEncoder</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   String encodingId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;bcrypt&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">   Map&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">PasswordEncoder</span><span style="color:#E1E4E8;">&gt; encoders </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HashMap</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">   encoders.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(encodingId, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BCryptPasswordEncoder</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   encoders.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ldap&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">LdapShaPasswordEncoder</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   encoders.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MD4&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Md4PasswordEncoder</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   encoders.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MD5&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageDigestPasswordEncoder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;MD5&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">   encoders.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;noop&quot;</span><span style="color:#E1E4E8;">, NoOpPasswordEncoder.</span><span style="color:#B392F0;">getInstance</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   encoders.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pbkdf2&quot;</span><span style="color:#E1E4E8;">, Pbkdf2PasswordEncoder.</span><span style="color:#B392F0;">defaultsForSpringSecurity_v5_5</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   encoders.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;pbkdf2@SpringSecurity_v5_8&quot;</span><span style="color:#E1E4E8;">, Pbkdf2PasswordEncoder.</span><span style="color:#B392F0;">defaultsForSpringSecurity_v5_8</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   encoders.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;scrypt&quot;</span><span style="color:#E1E4E8;">, SCryptPasswordEncoder.</span><span style="color:#B392F0;">defaultsForSpringSecurity_v4_1</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   encoders.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;scrypt@SpringSecurity_v5_8&quot;</span><span style="color:#E1E4E8;">, SCryptPasswordEncoder.</span><span style="color:#B392F0;">defaultsForSpringSecurity_v5_8</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   encoders.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SHA-1&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageDigestPasswordEncoder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SHA-1&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">   encoders.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SHA-256&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MessageDigestPasswordEncoder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;SHA-256&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">   encoders.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;sha256&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StandardPasswordEncoder</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   encoders.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;argon2&quot;</span><span style="color:#E1E4E8;">, Argon2PasswordEncoder.</span><span style="color:#B392F0;">defaultsForSpringSecurity_v5_2</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   encoders.</span><span style="color:#B392F0;">put</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;argon2@SpringSecurity_v5_8&quot;</span><span style="color:#E1E4E8;">, Argon2PasswordEncoder.</span><span style="color:#B392F0;">defaultsForSpringSecurity_v5_8</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DelegatingPasswordEncoder</span><span style="color:#E1E4E8;">(encodingId, encoders);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> PasswordEncoder </span><span style="color:#6F42C1;">createDelegatingPasswordEncoder</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   String encodingId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;bcrypt&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">   Map&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">PasswordEncoder</span><span style="color:#24292E;">&gt; encoders </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HashMap</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">   encoders.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(encodingId, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BCryptPasswordEncoder</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   encoders.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ldap&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">LdapShaPasswordEncoder</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   encoders.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MD4&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Md4PasswordEncoder</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   encoders.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MD5&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageDigestPasswordEncoder</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;MD5&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">   encoders.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;noop&quot;</span><span style="color:#24292E;">, NoOpPasswordEncoder.</span><span style="color:#6F42C1;">getInstance</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   encoders.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pbkdf2&quot;</span><span style="color:#24292E;">, Pbkdf2PasswordEncoder.</span><span style="color:#6F42C1;">defaultsForSpringSecurity_v5_5</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   encoders.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;pbkdf2@SpringSecurity_v5_8&quot;</span><span style="color:#24292E;">, Pbkdf2PasswordEncoder.</span><span style="color:#6F42C1;">defaultsForSpringSecurity_v5_8</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   encoders.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;scrypt&quot;</span><span style="color:#24292E;">, SCryptPasswordEncoder.</span><span style="color:#6F42C1;">defaultsForSpringSecurity_v4_1</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   encoders.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;scrypt@SpringSecurity_v5_8&quot;</span><span style="color:#24292E;">, SCryptPasswordEncoder.</span><span style="color:#6F42C1;">defaultsForSpringSecurity_v5_8</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   encoders.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SHA-1&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageDigestPasswordEncoder</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SHA-1&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">   encoders.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SHA-256&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MessageDigestPasswordEncoder</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;SHA-256&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">   encoders.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;sha256&quot;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">StandardPasswordEncoder</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   encoders.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;argon2&quot;</span><span style="color:#24292E;">, Argon2PasswordEncoder.</span><span style="color:#6F42C1;">defaultsForSpringSecurity_v5_2</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   encoders.</span><span style="color:#6F42C1;">put</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;argon2@SpringSecurity_v5_8&quot;</span><span style="color:#24292E;">, Argon2PasswordEncoder.</span><span style="color:#6F42C1;">defaultsForSpringSecurity_v5_8</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DelegatingPasswordEncoder</span><span style="color:#24292E;">(encodingId, encoders);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>在 SpringSecurity 中，我们通常使用 Java 配置来注册一个编码器实例，比如：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Bean</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> PasswordEncoder </span><span style="color:#B392F0;">passwordEncoder</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> PasswordEncoderFactories.</span><span style="color:#B392F0;">createDelegatingPasswordEncoder</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Bean</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> PasswordEncoder </span><span style="color:#6F42C1;">passwordEncoder</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> PasswordEncoderFactories.</span><span style="color:#6F42C1;">createDelegatingPasswordEncoder</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在使用了密码编码之后，如果你的用户信息存储到数据库，那么相应的密码也要存储为加密后的密文，以防止数据库被入侵后用户密码泄漏。</p><h2 id="自定义-userdetailsservice" tabindex="-1">自定义 UserDetailsService <a class="header-anchor" href="#自定义-userdetailsservice" aria-label="Permalink to &quot;自定义 UserDetailsService&quot;">​</a></h2><p>通常我们只有在简单测试时将用户信息保存在应用内存中，生产上会存储到数据库中，比如 Mysql，那么我们就需要根据用户的输入，从数据库找到对应的用户信息进行比对，来确定用户是否有权限访问应用。</p><p>我们可以通过实现 Spring Security 的 <code>UserDetailsService</code> 接口，重写 <code>loadUserByUsername</code> 方法来实现自己的逻辑。比如：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Component</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CustomUserDetailService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UserDetailsService</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> UserDetails </span><span style="color:#B392F0;">loadUserByUsername</span><span style="color:#E1E4E8;">(String </span><span style="color:#FFAB70;">username</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">throws</span><span style="color:#E1E4E8;"> UsernameNotFoundException {</span></span>
<span class="line"><span style="color:#E1E4E8;">        System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;CustomUserDetailService - loadUserByUsername&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (username </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">username.</span><span style="color:#B392F0;">equals</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;admin&quot;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">UsernameNotFoundException</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;用户名 &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> username </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot; 不存在&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        String encodePassword </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BCryptPasswordEncoder</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">encode</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;123456&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">User</span><span style="color:#E1E4E8;">(username, encodePassword, AuthorityUtils.</span><span style="color:#B392F0;">createAuthorityList</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ROLE_ADMIN&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Component</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CustomUserDetailService</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UserDetailsService</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> UserDetails </span><span style="color:#6F42C1;">loadUserByUsername</span><span style="color:#24292E;">(String </span><span style="color:#E36209;">username</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">throws</span><span style="color:#24292E;"> UsernameNotFoundException {</span></span>
<span class="line"><span style="color:#24292E;">        System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;CustomUserDetailService - loadUserByUsername&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (username </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#24292E;">username.</span><span style="color:#6F42C1;">equals</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;admin&quot;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">UsernameNotFoundException</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;用户名 &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> username </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot; 不存在&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        String encodePassword </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BCryptPasswordEncoder</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">encode</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;123456&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">User</span><span style="color:#24292E;">(username, encodePassword, AuthorityUtils.</span><span style="color:#6F42C1;">createAuthorityList</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ROLE_ADMIN&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>如果只有一个 <code>UserDetailsService</code> 实现，你可以通过 <code>@Component</code> 或者 Java 配置注册到 Spring 容器中，让 Spring Security 采用你的自定义实现；如果有多个，你可能会实现自己的 <code>AuthenticationProvider</code>，每个 <code>AuthenticationProvider</code> 使用对应的 <code>UserDetailsService</code> 实现。</p>`,42),e=[o];function r(t,c,E,y,i,d){return n(),a("div",null,e)}const b=s(l,[["render",r]]);export{F as __pageData,b as default};

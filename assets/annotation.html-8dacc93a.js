import{_ as n,W as s,X as a,Z as t,$ as e}from"./framework-1a5da1a9.js";const p={},o=e(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>注解是JDK1.5版本开始引入的一个特性，用于对代码进行说明，可以对包、类、接口、字段、方法参数、局部变量等进行注解。</p><p><strong>注解的优点</strong>：</p><ol><li>通过使用注解，你可以将元数据保存在 Java 源代码中。</li><li>简单易读的代码。</li><li>编译器类型检查。</li><li>使用 annotation API 为自己的注解构造处理工具。</li></ol><p>在 <code>java.lang</code> 包中，<strong>内置</strong>了一些注解：</p><ul><li><code>@Override</code>:表示当前的方法定义将覆盖基类的方法。如果你不小心拼写错误，或者方法签名被错误拼写的时候，编译器就会发出错误提示。</li><li><code>@Deprecated</code>:如果使用该注解的元素被调用，编译器就会发出警告信息。</li><li><code>@SuppressWarnings</code>:关闭不当的编译器警告信息。</li><li><code>@SafeVarargs</code>:在 Java 7 中加入用于禁止对具有泛型 varargs 参数的方法或构造函数的调用方发出警告。</li><li><code>@FunctionalInterface</code>:Java 8 中加入用于表示类型声明为函数式接口。</li></ul><p>此外，在 <code>java.lang.annotaion</code> 包下还有几种<strong>元注解</strong>用于创造新的注解：</p><ul><li><code>@Target</code> 定义你的注解可以应用在哪里(例如是方法还是字段)。</li><li><code>@Retention</code> 定义了注解在哪里可用，在源代码中(SOURCE)，class 文件(CLASS)中或者是在运行时(RUNTIME)。</li><li><code>@Inherited</code> 用于标明注解可继承。</li><li><code>@Documented</code> 用于标明是否生成 javadoc 文档。</li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><p>注解是不可以<strong>继承</strong>的，编译后会自动继承 <code>java.lang.annotation.Annotation</code> 接口</p></div><h2 id="元注解" tabindex="-1"><a class="header-anchor" href="#元注解" aria-hidden="true">#</a> 元注解</h2><ol><li><code>@Target</code></li></ol><p><code>@Target</code> 的作用：描述注解的使用范围，即注明被修饰的注解可以用在什么地方，其包含一个类型为 ElementType 数组的 value 属性 <code>ElementType[] value();</code></p><p><code>ElementType</code> 的枚举如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ElementType</span> <span class="token punctuation">{</span>
 
    <span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token comment">// 类、接口、枚举类</span>
 
    <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token comment">// 成员变量（包括：枚举常量）</span>
 
    <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token comment">// 成员方法</span>
 
    <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token comment">// 方法参数</span>
 
    <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token comment">// 构造方法</span>
 
    <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span> <span class="token comment">// 局部变量</span>
 
    <span class="token constant">ANNOTATION_TYPE</span><span class="token punctuation">,</span> <span class="token comment">// 注解类</span>
 
    <span class="token constant">PACKAGE</span><span class="token punctuation">,</span> <span class="token comment">// 可用于修饰：包</span>
 
    <span class="token constant">TYPE_PARAMETER</span><span class="token punctuation">,</span> <span class="token comment">// 类型参数，JDK 1.8 新增</span>
 
    <span class="token constant">TYPE_USE</span> <span class="token comment">// 使用类型的任何地方，JDK 1.8 新增</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>@Retention</code></li></ol><p><code>@Retention</code> 的作用: 描述注解保留的时间范围，即被描述的注解在它所修饰的类中可以被保留到何时，共有三种策略，定义在 <code>RetentionPolicy</code> 枚举中:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RetentionPolicy</span> <span class="token punctuation">{</span>
 
    <span class="token constant">SOURCE</span><span class="token punctuation">,</span>    <span class="token comment">// 源文件保留</span>
    <span class="token constant">CLASS</span><span class="token punctuation">,</span>       <span class="token comment">// 编译期保留，默认值</span>
    <span class="token constant">RUNTIME</span>   <span class="token comment">// 运行期保留，可通过反射去获取注解信息</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><code>@Documented</code></li></ol><p><code>@Documented</code> 的作用：描述在使用 javadoc 工具为类生成帮助文档时是否要保留其注解信息。</p><p>这个很好理解，加了这个元注解的注解，会出现在 javadoc 生成的文档中。</p><ol start="4"><li><code>@Inherited</code></li></ol><p><code>@Inherited</code> 的作用：被它修饰的注解将具有继承性。</p><p>如果某个类使用了被 <code>@Inherited</code> 修饰的注解，则其子类将自动具有该注解。</p><ol start="5"><li><code>@Repeatable</code> (Java8)</li></ol><p>允许在同一申明类型(类，属性，或方法)的多次使用同一个注解。</p><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span><span class="token class-name">Authorities</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Authority</span> <span class="token punctuation">{</span>
     <span class="token class-name">String</span> <span class="token function">role</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Authorities</span> <span class="token punctuation">{</span>
    <span class="token class-name">Authority</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RepeatAnnotationUseNewVersion</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Authority</span><span class="token punctuation">(</span>role<span class="token operator">=</span><span class="token string">&quot;Admin&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Authority</span><span class="token punctuation">(</span>role<span class="token operator">=</span><span class="token string">&quot;Manager&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li><code>@Native</code> (Java8)</li></ol><p>使用 @Native 注解修饰成员变量，则表示这个变量可以被本地代码引用，常常被代码生成工具使用。</p><h2 id="自定义注解" tabindex="-1"><a class="header-anchor" href="#自定义注解" aria-hidden="true">#</a> 自定义注解</h2><p>如下是一个注解的定义。注解的定义看起来很像接口的定义。事实上，它们和其他 Java 接口一样，也会被编译成 class 文件。</p><p>示例，定义一个日志注解：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Log</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 描述
     * <span class="token keyword">@return</span> <span class="token punctuation">{</span>String<span class="token punctuation">}</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * spel 表达式
     * <span class="token keyword">@return</span> 日志描述
     */</span>
    <span class="token class-name">String</span> <span class="token function">expression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="反射获取注解信息" tabindex="-1"><a class="header-anchor" href="#反射获取注解信息" aria-hidden="true">#</a> 反射获取注解信息</h2><p>使用注解，可以将一些元信息存储在源代码中，通常，我们会在另外的地方，通过 Java 反射机制获取注解中的信息。</p><p>在 Java 的反射包 <code>java.lang.reflect</code> 的 <code>AnnotatedElement</code> 接口中，提供了获取注解对象的方法；</p><p>我们可以通过先获取 <code>class</code> 或者 <code>method</code> 对象（它们都实现了 <code>AnnotatedElement</code> 接口），再从中获取到注解对象，进行从注解对象中获取注解的元数据。</p><p>以上面的 <code>@Log</code> 注解为例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectDemo</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Log</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;反射测试&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">annotationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取 Class 对象</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ReflectDemo</span><span class="token punctuation">&gt;</span></span> serviceClass <span class="token operator">=</span> <span class="token class-name">ReflectDemo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取 Method 对象</span>
        <span class="token class-name">Method</span> method <span class="token operator">=</span> serviceClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">&quot;annotationTest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取 Log 注解对象</span>
        <span class="token class-name">Log</span> annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>只有注解被定义为 <strong>RUNTIME</strong> 后，该注解才能是运行时可见，当 class 文件被装载时被保存在 class 文件中的 Annotation 才会被虚拟机读取。</p></div><h2 id="自定义注解结合-aop" tabindex="-1"><a class="header-anchor" href="#自定义注解结合-aop" aria-hidden="true">#</a> 自定义注解结合 AOP</h2><p>SpringBoot AOP 最常见的实践就是使用自定义的日志注解，通过切面编程将操作日志进行统一处理。</p><p>其伪代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SysLog</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysLogAspect</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ApplicationEventPublisher</span> publisher<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(sysLog)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> point<span class="token punctuation">,</span> <span class="token class-name">SysLog</span> sysLog<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取切点信息</span>
        <span class="token class-name">String</span> className <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> methodName <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;[类名]:{},[方法]:{}&quot;</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Object</span> result<span class="token punctuation">;</span>
        <span class="token class-name">SysLogInfo</span> logInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysLogInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logInfo<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span>sysLog<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行切点代码</span>
        <span class="token class-name">Long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            result <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            logInfo<span class="token punctuation">.</span><span class="token function">setLogType</span><span class="token punctuation">(</span><span class="token class-name">LogTypeEnum</span><span class="token punctuation">.</span><span class="token constant">ERROR</span><span class="token punctuation">.</span><span class="token function">getTypeId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            logInfo<span class="token punctuation">.</span><span class="token function">setException</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token class-name">Long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            logInfo<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 发布事件，由 SysLogListener 异步处理</span>
            publisher<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SysLogEvent</span><span class="token punctuation">(</span>logInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2><ul><li><a href="%5Bhttps://%5D(https://pdai.tech/md/java/basic/java-basic-x-annotation.html)">注解机制详解 - Java 全栈知识体系</a></li></ul>`,48);function c(l,i){return s(),a("div",null,[t(" more "),o])}const d=n(p,[["render",c],["__file","annotation.html.vue"]]);export{d as default};

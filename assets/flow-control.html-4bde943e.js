import{_ as s,W as e,X as t,Z as p,Y as n,$ as o,a1 as c,a0 as l,C as i}from"./framework-8d3a05fe.js";const u={},r=n("p",null,"介绍 Java 常用的流程控制语句。",-1),d=l(`<h2 id="if-else-语句" tabindex="-1"><a class="header-anchor" href="#if-else-语句" aria-hidden="true">#</a> if-else 语句</h2><p><code>if-else</code> 语句语法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
  <span class="token comment">// 条件1 为 true 时执行的代码</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
  <span class="token comment">// 条件2 为 true 时执行的代码</span>
<span class="token punctuation">}</span>  
<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  
  <span class="token comment">// 条件3 为 true 时执行的代码</span>
<span class="token punctuation">}</span>  
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  
<span class="token keyword">else</span><span class="token punctuation">{</span>  
  <span class="token comment">// 以上条件均为 false 时执行的代码</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常，当 <code>if-else</code> 的条件过多时，可以常用使用 <code>switch</code> 语法改造，或者通过设计模式重构，增强代码的可维护性。</p><h2 id="switch-语句" tabindex="-1"><a class="header-anchor" href="#switch-语句" aria-hidden="true">#</a> switch 语句</h2><p>switch 语句用来判断变量与多个值之间的相等性。</p><p>switch 语句的格式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span> <span class="token punctuation">{</span>    
  <span class="token keyword">case</span> 可选值<span class="token number">1</span><span class="token operator">:</span>    
    <span class="token comment">// 可选值1匹配后执行的代码;    </span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// 该关键字是可选项</span>
  <span class="token keyword">case</span> 可选值<span class="token number">2</span><span class="token operator">:</span>    
    <span class="token comment">// 可选值2匹配后执行的代码;    </span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// 该关键字是可选项</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    
<span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment">// 该关键字是可选项     </span>
  <span class="token comment">// 所有可选值都不匹配后执行的代码 </span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>switch 语句变量支持的类型：</p><ol><li>byte、short、int、char以及对应的包装器类型 Byte、Short、Integer、Character；</li><li>String 字符串（JDK 7+ 开始支持）</li><li>Enum 枚举类（JDK 5+开始支持）</li></ol><div class="hint-container warning"><p class="hint-container-title">特别注意</p><p>注意：switch 变量不支持 long、float、double 及其包装类。</p></div><h2 id="for-循环" tabindex="-1"><a class="header-anchor" href="#for-循环" aria-hidden="true">#</a> for 循环</h2><ol><li>普通 for 循环</li></ol><p>格式：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span>初始变量<span class="token punctuation">;</span>条件<span class="token punctuation">;</span>自增<span class="token operator">/</span>自减<span class="token punctuation">)</span><span class="token punctuation">{</span>  
   <span class="token comment">// 循环体</span>
<span class="token punctuation">}</span>  
</code></pre></div><ol start="2"><li>增强 for 循环</li></ol><p>for-each 循环通常用于遍历数组和集合，它的使用规则比普通的 for 循环还要简单，不需要初始变量，不需要条件，不需要下标来自增或者自减。</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span>元素类型 元素 <span class="token operator">:</span> 数组或集合<span class="token punctuation">)</span><span class="token punctuation">{</span>  
   <span class="token comment">// 要执行的代码</span>
<span class="token punctuation">}</span>  
</code></pre></div><p>例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;python&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;go&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str <span class="token operator">:</span> strings<span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="while-循环" tabindex="-1"><a class="header-anchor" href="#while-循环" aria-hidden="true">#</a> while 循环</h2><p>while 循环的格式：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span>  
   <span class="token comment">//循环体  </span>
<span class="token punctuation">}</span>  
</code></pre></div><h2 id="do-while-循环" tabindex="-1"><a class="header-anchor" href="#do-while-循环" aria-hidden="true">#</a> do-while 循环</h2><p>do-while 循环的格式：</p><div class="language-java" data-ext="java"><pre class="language-java"><code><span class="token keyword">do</span><span class="token punctuation">{</span>  
   <span class="token comment">// 循环体</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>提交<span class="token punctuation">)</span><span class="token punctuation">;</span>  
</code></pre></div><h2 id="break" tabindex="-1"><a class="header-anchor" href="#break" aria-hidden="true">#</a> break</h2><p>break 关键字通常用于中断循环或 switch 语句，它在指定条件下中断程序的当前流程。如果是内部循环，则仅中断内部循环。</p><p>可以将 break 关键字用于所有类型循环语句中，比如说 for 循环、while 循环，以及 do-while 循环。</p><h2 id="continue" tabindex="-1"><a class="header-anchor" href="#continue" aria-hidden="true">#</a> continue</h2><p>当我们需要在 for 循环或者 （do）while 循环中立即跳转到下一个循环时，就可以使用 continue 关键字，通常用于跳过指定条件下的循环体，如果循环是嵌套的，仅跳过当前循环。</p><hr><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,33),k={href:"https://tobebetterjavaer.com/basic-grammar/flow-control.html",target:"_blank",rel:"noopener noreferrer"};function v(m,h){const a=i("ExternalLinkIcon");return e(),t("div",null,[r,p(" more "),d,n("ul",null,[n("li",null,[n("a",k,[o("Java 程序员进阶之路"),c(a)])])])])}const w=s(u,[["render",v],["__file","flow-control.html.vue"]]);export{w as default};

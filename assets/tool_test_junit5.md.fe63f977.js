import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.419948d5.js";const d=JSON.parse('{"title":"单元测试 - JUnit5","description":"","frontmatter":{"title":"单元测试 - JUnit5","date":"2023-02-21T00:00:00.000Z"},"headers":[],"relativePath":"tool/test/junit5.md","filePath":"tool/test/junit5.md","lastUpdated":1698370952000}'),p={name:"tool/test/junit5.md"},o=l(`<blockquote><p>JUnit 5 是 JUnit 的下一代，目标是为JVM上的开发人员端测试创建一个最新的基础。</p><p>这包括专注于Java 8及更高版本，以及启用许多不同风格的测试。</p></blockquote><h2 id="junit5-简介" tabindex="-1">JUnit5 简介 <a class="header-anchor" href="#junit5-简介" aria-label="Permalink to &quot;JUnit5 简介&quot;">​</a></h2><p>JUnit5 由三个子项目中的不同模块组成：</p><blockquote><p>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</p></blockquote><ul><li><p><code>JUnit Platform</code> 是基于 JVM 的运行测试的基础框架在，它定义了开发运行在这个测试框架上的 TestEngine API。此外该平台提供了一个控制台启动器，可以从命令行启动平台，可以为Gradle 和 Maven 构建插件，同时提供基于 JUnit 4 的 Runner。</p></li><li><p><code>JUnit Jupiter</code> 是在 JUnit 5 中编写测试和扩展的新编程模型和扩展模型的组合。Jupiter子项目提供了一个 TestEngine 在平台上运行基于 Jupiter 的测试。</p></li><li><p><code>JUnit Vintage</code> 提供了一个 TestEngine 在平台上运行基于 JUnit 3 和 JUnit 4 的测试。</p></li></ul><p><img src="https://pdai.tech/images/develop/ut/dev-ut-1.png" alt="JUnit5"></p><h2 id="常用注解" tabindex="-1">常用注解 <a class="header-anchor" href="#常用注解" aria-label="Permalink to &quot;常用注解&quot;">​</a></h2><p>JUnit Jupiter 支持以下注解来配置测试和扩展框架。 除非另有说明，否则所有核心注解都位于模块 <code>junit-jupiter-api</code> 的 <code>org.junit.jupiter.api</code> 包中。</p><table><thead><tr><th style="text-align:left;">注解</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>@Test</code></td><td style="text-align:left;">表示方法是测试方法。与 JUnit 4 的注解不同，此注解不声明任何属性，因为 JUnit Jupiter 中的测试扩展基于它们自己的专用注解运行。</td></tr><tr><td style="text-align:left;"><code>@ParameterizedTest</code></td><td style="text-align:left;">表示方法是<a href="#参数化测试">参数化测试</a>。</td></tr><tr><td style="text-align:left;"><code>@RepeatedTest</code></td><td style="text-align:left;">表示方法是<a href="#重复测试">重复测试</a>。</td></tr><tr><td style="text-align:left;"><code>@TestFactory</code></td><td style="text-align:left;">表示方法是<a href="#动态测试">动态测试工厂</a>。</td></tr><tr><td style="text-align:left;"><code>@DisplayName</code></td><td style="text-align:left;">声明测试类或测试方法的自定义显示名称。此类批注不会<em>继承</em>。</td></tr><tr><td style="text-align:left;"><code>@BeforeEach</code></td><td style="text-align:left;">类似于 JUnit 4 的 <code>@Before</code>，被标注的方法应在当前类中的每个测试方法<strong>之前</strong>执行;</td></tr><tr><td style="text-align:left;"><code>@AfterEach</code></td><td style="text-align:left;">类似于 JUnit 4 的 <code>@After</code>，被标注的方法应在当前类中的每个测试方法<strong>之后</strong>执行;</td></tr><tr><td style="text-align:left;"><code>@BeforeAll</code></td><td style="text-align:left;">类似于 JUnit 4 的 <code>@BeforeClass</code>，被标注的方法应在当前类中的每个测试方法<strong>之前</strong>执行;</td></tr><tr><td style="text-align:left;"><code>@AfterAll</code></td><td style="text-align:left;">类似于 JUnit 4 的 <code>@AfterClass</code>，被标注的方法应在当前类中的每个测试方法<strong>之后</strong>执行;</td></tr><tr><td style="text-align:left;"><code>@Nested</code></td><td style="text-align:left;">表示带注解的类是嵌套的非静态测试类，<code>@BeforeAll</code>和 <code>@AfterAll</code>方法<strong>不能</strong>直接在 <code>@Nested</code> 测试类中使用，除非修改测试实例生命周期。</td></tr><tr><td style="text-align:left;"><code>@Tag</code></td><td style="text-align:left;">用于在类或方法级别声明用于过滤测试的标记。</td></tr><tr><td style="text-align:left;"><code>@Disabled</code></td><td style="text-align:left;">类似于 JUnit 4 的 <code>@Ignore</code>，用于禁用测试类或测试方法。</td></tr><tr><td style="text-align:left;"><code>@Timeout</code></td><td style="text-align:left;">用于在测试、测试工厂、测试模板或生命周期方法的执行超过给定持续时间时使其失败。</td></tr><tr><td style="text-align:left;"><code>@ExtendWith</code></td><td style="text-align:left;">用于以声明方式注册自定义扩展。</td></tr><tr><td style="text-align:left;"><code>@TempDir</code></td><td style="text-align:left;">用于在生命周期方法或测试方法中通过字段注入或参数注入提供临时目录;位于包 <code>org.junit.jupiter.api.io</code> 中。</td></tr></tbody></table><h2 id="编写单元测试" tabindex="-1">编写单元测试 <a class="header-anchor" href="#编写单元测试" aria-label="Permalink to &quot;编写单元测试&quot;">​</a></h2><h3 id="maven-依赖" tabindex="-1">Maven 依赖 <a class="header-anchor" href="#maven-依赖" aria-label="Permalink to &quot;Maven 依赖&quot;">​</a></h3><p>最新的 Maven 依赖：<a href="https://junit.org/junit5/docs/current/user-guide/#running-tests" target="_blank" rel="noreferrer">Click Here</a></p><div class="language-xml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- junit 平台，包含了 junit-platform-engine --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.junit.platform&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;junit-platform-launcher&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;test&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- 新的 Junit 引擎，包含了 junit-jupiter-api（JUnit5 主要使用的包）--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.junit.jupiter&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;junit-jupiter-engine&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;test&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- 兼容旧 Junit 的引擎，包含 junit4 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.junit.vintage&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;junit-vintage-engine&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;test&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">&lt;!-- JUnit 参数化测试 --&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.junit.jupiter&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;junit-jupiter-params&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;test&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">dependencyManagement</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;org.junit&lt;/</span><span style="color:#85E89D;">groupId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;junit-bom&lt;/</span><span style="color:#85E89D;">artifactId</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;5.9.2&lt;/</span><span style="color:#85E89D;">version</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">&gt;pom&lt;/</span><span style="color:#85E89D;">type</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;import&lt;/</span><span style="color:#85E89D;">scope</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">dependency</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">dependencies</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">dependencyManagement</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependencies</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- junit 平台，包含了 junit-platform-engine --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.junit.platform&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;junit-platform-launcher&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;test&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 新的 Junit 引擎，包含了 junit-jupiter-api（JUnit5 主要使用的包）--&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.junit.jupiter&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;junit-jupiter-engine&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;test&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- 兼容旧 Junit 的引擎，包含 junit4 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.junit.vintage&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;junit-vintage-engine&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;test&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">&lt;!-- JUnit 参数化测试 --&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.junit.jupiter&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;junit-jupiter-params&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;test&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependencies</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">dependencyManagement</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">dependencies</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;org.junit&lt;/</span><span style="color:#22863A;">groupId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;junit-bom&lt;/</span><span style="color:#22863A;">artifactId</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;5.9.2&lt;/</span><span style="color:#22863A;">version</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">type</span><span style="color:#24292E;">&gt;pom&lt;/</span><span style="color:#22863A;">type</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;import&lt;/</span><span style="color:#22863A;">scope</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">dependency</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">dependencies</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">&lt;/</span><span style="color:#22863A;">dependencyManagement</span><span style="color:#24292E;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h3 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h3><p>JUnit5 有一套与 JUnit4 相对应的生命周期注解，具体见 <a href="#常用注解">常用注解</a>。</p><p>代码示例：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">BeforeAll</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">initAll</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;initAll&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">BeforeEach</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">init</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;init&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">succeedingTest</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;succeedingTest&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">failingTest</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failingTest&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">fail</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;a failing test&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Disabled</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;for demonstration purposes&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">skippedTest</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// not executed</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;skippedTest&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">abortedTest</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;abortedTest&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assumeTrue</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;abc&quot;</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Z&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">fail</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test should have been aborted&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AfterEach</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tearDown</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tearDown&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">AfterAll</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tearDownAll</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;tearDownAll&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">BeforeAll</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">initAll</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;initAll&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">BeforeEach</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">init</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;init&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">succeedingTest</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;succeedingTest&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">failingTest</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failingTest&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">fail</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;a failing test&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Disabled</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;for demonstration purposes&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">skippedTest</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// not executed</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;skippedTest&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">abortedTest</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abortedTest&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assumeTrue</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;abc&quot;</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Z&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">fail</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test should have been aborted&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AfterEach</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tearDown</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tearDown&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">AfterAll</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tearDownAll</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;tearDownAll&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>执行结果：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">initAll</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">init</span></span>
<span class="line"><span style="color:#E1E4E8;">succeedingTest</span></span>
<span class="line"><span style="color:#E1E4E8;">tearDown</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">init</span></span>
<span class="line"><span style="color:#E1E4E8;">failingTest</span></span>
<span class="line"><span style="color:#E1E4E8;">tearDown</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">org.opentest4j.AssertionFailedError</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> a failing test</span></span>
<span class="line"><span style="color:#E1E4E8;">	at org.junit.jupiter.api.AssertionUtils.</span><span style="color:#B392F0;">fail</span><span style="color:#E1E4E8;">(AssertionUtils.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">38</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at org.junit.jupiter.api.Assertions.</span><span style="color:#B392F0;">fail</span><span style="color:#E1E4E8;">(Assertions.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">135</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at StandardTests.</span><span style="color:#B392F0;">failingTest</span><span style="color:#E1E4E8;">(StandardTests.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> demonstration purposes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">init</span></span>
<span class="line"><span style="color:#E1E4E8;">abortedTest</span></span>
<span class="line"><span style="color:#E1E4E8;">tearDown</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">org.opentest4j.TestAbortedException</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> Assumption failed</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> assumption is not </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">	at org.junit.jupiter.api.Assumptions.</span><span style="color:#B392F0;">throwAssumptionFailed</span><span style="color:#E1E4E8;">(Assumptions.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">316</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at org.junit.jupiter.api.Assumptions.</span><span style="color:#B392F0;">assumeTrue</span><span style="color:#E1E4E8;">(Assumptions.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">115</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at org.junit.jupiter.api.Assumptions.</span><span style="color:#B392F0;">assumeTrue</span><span style="color:#E1E4E8;">(Assumptions.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">66</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	at StandardTests.</span><span style="color:#B392F0;">abortedTest</span><span style="color:#E1E4E8;">(StandardTests.java</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">43</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">tearDownAll</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">initAll</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">init</span></span>
<span class="line"><span style="color:#24292E;">succeedingTest</span></span>
<span class="line"><span style="color:#24292E;">tearDown</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">init</span></span>
<span class="line"><span style="color:#24292E;">failingTest</span></span>
<span class="line"><span style="color:#24292E;">tearDown</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">org.opentest4j.AssertionFailedError</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> a failing test</span></span>
<span class="line"><span style="color:#24292E;">	at org.junit.jupiter.api.AssertionUtils.</span><span style="color:#6F42C1;">fail</span><span style="color:#24292E;">(AssertionUtils.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">38</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at org.junit.jupiter.api.Assertions.</span><span style="color:#6F42C1;">fail</span><span style="color:#24292E;">(Assertions.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">135</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at StandardTests.</span><span style="color:#6F42C1;">failingTest</span><span style="color:#24292E;">(StandardTests.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">30</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> demonstration purposes</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">init</span></span>
<span class="line"><span style="color:#24292E;">abortedTest</span></span>
<span class="line"><span style="color:#24292E;">tearDown</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">org.opentest4j.TestAbortedException</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> Assumption failed</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> assumption is not </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">	at org.junit.jupiter.api.Assumptions.</span><span style="color:#6F42C1;">throwAssumptionFailed</span><span style="color:#24292E;">(Assumptions.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">316</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at org.junit.jupiter.api.Assumptions.</span><span style="color:#6F42C1;">assumeTrue</span><span style="color:#24292E;">(Assumptions.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">115</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at org.junit.jupiter.api.Assumptions.</span><span style="color:#6F42C1;">assumeTrue</span><span style="color:#24292E;">(Assumptions.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">66</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	at StandardTests.</span><span style="color:#6F42C1;">abortedTest</span><span style="color:#24292E;">(StandardTests.java</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">43</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">tearDownAll</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="断言测试" tabindex="-1">断言测试 <a class="header-anchor" href="#断言测试" aria-label="Permalink to &quot;断言测试&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>一般的断言，无非是检查一个实例的属性（比如，判空与判非空等），或者对两个实例进行比较（比如，检查两个实例对象是否相等）等。</p><p>无论哪种检查，断言方法都可以接受一个字符串作为最后一个可选参数，它会在断言失败时提供必要的描述信息。</p><p>如果提供出错信息的过程比较复杂，它也可以被包装在一个 lambda 表达式中，这样，只有到真正失败的时候，消息才会真正被构造出来。</p></div><p>在 JUnit5 中，提供了强大的断言类 <code>Assertions</code>，通过该类中的 <code>assert*</code> 的方法，可以推断出该方法的断言条件；</p><p>相比于 JUnit4，提供了几个特殊的断言方法。</p><ul><li><code>fail()</code>: 显式地使单元测试失败；</li><li><code>assertThrows(Class\\&lt;T\\&gt; expectedType, Executable executable)</code>: 断言 <code>executable</code> 的操作抛出 <code>expectedType</code> 指定的异常；</li><li><code>assertTimeout(Duration timeout, Executable executable)</code>: 断言 <code>executable</code> 的操作超过 <code>timeout</code> 指定的时间，会在测试方法执行完毕后才断言失败；</li><li><code>assertTimeoutPreemptively(Duration timeout, Executable executable)</code>: 断言 <code>executable</code> 的操作超过 <code>timeout</code> 指定的时间，会在测试方法超时时立即断言失败。</li></ul><h3 id="嵌套测试" tabindex="-1">嵌套测试 <a class="header-anchor" href="#嵌套测试" aria-label="Permalink to &quot;嵌套测试&quot;">​</a></h3><p>嵌套测试给测试编写者更多的能力，来表达几组测试之间的关系；</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;A stack&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NestedTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    Stack stack;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;is instantiated with new Stack()&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isInstantiatedWithNew</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Stack&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Nested</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;when new&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WhenNew</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">BeforeEach</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createNewStack</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            stack </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Stack&lt;&gt;();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;is empty&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">assertTrue</span><span style="color:#E1E4E8;">(stack.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;throws EmptyStackException when popped&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">throwsExceptionWhenPopped</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">assertThrows</span><span style="color:#E1E4E8;">(EmptyStackException.class, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> stack.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;throws EmptyStackException when peeked&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">throwsExceptionWhenPeeked</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">assertThrows</span><span style="color:#E1E4E8;">(EmptyStackException.class, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> stack.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">Nested</span></span>
<span class="line"><span style="color:#E1E4E8;">        @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;after pushing an element&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AfterPushing</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            String anElement </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;an element&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">BeforeEach</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pushAnElement</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                stack.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(anElement);</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;it is no longer empty&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">isNotEmpty</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">assertFalse</span><span style="color:#E1E4E8;">(stack.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;returns the element when popped and is empty&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">returnElementWhenPopped</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(anElement, stack.</span><span style="color:#B392F0;">pop</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">assertTrue</span><span style="color:#E1E4E8;">(stack.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Test</span></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;returns the element when peeked but remains not empty&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">returnElementWhenPeeked</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(anElement, stack.</span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">assertFalse</span><span style="color:#E1E4E8;">(stack.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">());</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;A stack&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NestedTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    Stack stack;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;is instantiated with new Stack()&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isInstantiatedWithNew</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Stack&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Nested</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;when new&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WhenNew</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">BeforeEach</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createNewStack</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            stack </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Stack&lt;&gt;();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;is empty&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">assertTrue</span><span style="color:#24292E;">(stack.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;throws EmptyStackException when popped&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">throwsExceptionWhenPopped</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">assertThrows</span><span style="color:#24292E;">(EmptyStackException.class, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> stack.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;throws EmptyStackException when peeked&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">throwsExceptionWhenPeeked</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6F42C1;">assertThrows</span><span style="color:#24292E;">(EmptyStackException.class, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> stack.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">Nested</span></span>
<span class="line"><span style="color:#24292E;">        @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;after pushing an element&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AfterPushing</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">            String anElement </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;an element&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">BeforeEach</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pushAnElement</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                stack.</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(anElement);</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;it is no longer empty&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">isNotEmpty</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">assertFalse</span><span style="color:#24292E;">(stack.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;returns the element when popped and is empty&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">returnElementWhenPopped</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(anElement, stack.</span><span style="color:#6F42C1;">pop</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">assertTrue</span><span style="color:#24292E;">(stack.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Test</span></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;returns the element when peeked but remains not empty&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">returnElementWhenPeeked</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(anElement, stack.</span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">assertFalse</span><span style="color:#24292E;">(stack.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">());</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br></div></div><p>执行结果：</p><p><img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/blog/devops/junit5_nested.png" alt="嵌套测试执行结果"></p><h3 id="重复测试" tabindex="-1">重复测试 <a class="header-anchor" href="#重复测试" aria-label="Permalink to &quot;重复测试&quot;">​</a></h3><p>@RepeatedTest 表示该测试方法可以重复执行测试，它有两个属性：</p><ul><li><code>value</code>: 指定重复执行的次数；</li><li><code>name</code>: 自定义显示名称，支持以下占位符 <ul><li><code>{displayName}</code>: 测试方法的显示名称</li><li><code>{currentRepetition}</code>: 当前重复次数</li><li><code>{totalRepetitions}</code>: 重复的总次数</li></ul></li></ul><p>代码示例：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//   @RepeatedTest(value = 3, name = &quot;{displayName} {currentRepetition}/{totalRepetitions}&quot;)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">RepeatedTest</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> LONG_DISPLAY_NAME)</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">DisplayName</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;RepeatTest&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">customDisplayName</span><span style="color:#E1E4E8;">(TestInfo testInfo, RepetitionInfo repetitionInfo) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> currentRepetition </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> repetitionInfo.</span><span style="color:#B392F0;">getCurrentRepetition</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> totalRepetitions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> repetitionInfo.</span><span style="color:#B392F0;">getTotalRepetitions</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    String methodName </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> testInfo.</span><span style="color:#B392F0;">getTestMethod</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">getName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    System.out.</span><span style="color:#B392F0;">println</span><span style="color:#E1E4E8;">(String.</span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;About to execute repetition %d of %d for %s&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#E1E4E8;">            currentRepetition, totalRepetitions, methodName));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//   @RepeatedTest(value = 3, name = &quot;{displayName} {currentRepetition}/{totalRepetitions}&quot;)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">RepeatedTest</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> LONG_DISPLAY_NAME)</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">DisplayName</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;RepeatTest&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">customDisplayName</span><span style="color:#24292E;">(TestInfo testInfo, RepetitionInfo repetitionInfo) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> currentRepetition </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> repetitionInfo.</span><span style="color:#6F42C1;">getCurrentRepetition</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> totalRepetitions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> repetitionInfo.</span><span style="color:#6F42C1;">getTotalRepetitions</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    String methodName </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> testInfo.</span><span style="color:#6F42C1;">getTestMethod</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">getName</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    System.out.</span><span style="color:#6F42C1;">println</span><span style="color:#24292E;">(String.</span><span style="color:#6F42C1;">format</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;About to execute repetition %d of %d for %s&quot;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//</span></span>
<span class="line"><span style="color:#24292E;">            currentRepetition, totalRepetitions, methodName));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>执行结果： <img src="https://cdn.jsdelivr.net/gh/AlexChen68/OSS@master/blog/devops/junit5_repeat.png" alt="重复测试执行结果"></p><h3 id="参数化测试" tabindex="-1">参数化测试 <a class="header-anchor" href="#参数化测试" aria-label="Permalink to &quot;参数化测试&quot;">​</a></h3><p>JUnit5 在 <code>org.junit.jupiter.params.provider</code> 包中提供了很多 <strong>resource</strong> 注解：</p><ul><li>@ValueSource</li></ul><p>@ValueSource 可以通过指定原生类型数组，为测试提供一组参数，每次测试使用一个参数，例如一个 int 数组参数可以设置为：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ParameterizedTest</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ValueSource</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">ints</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testWithValueSource</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> argument) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertNotNull</span><span style="color:#E1E4E8;">(argument);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ParameterizedTest</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ValueSource</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">ints</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testWithValueSource</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> argument) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertNotNull</span><span style="color:#24292E;">(argument);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>@EnumSource</li></ul><p>@EnumSource 用来指定一个枚举类作为参数，可以通过 <code>names</code> 属性指定需要参与测试的枚举值，如果不指定，则默认全部参与测试：</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ParameterizedTest</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnumSource</span><span style="color:#E1E4E8;">(TimeUnit.class)</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testWithEnumSource</span><span style="color:#E1E4E8;">(TimeUnit timeUnit) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertNotNull</span><span style="color:#E1E4E8;">(timeUnit);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ParameterizedTest</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">EnumSource</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> TimeUnit.class, </span><span style="color:#79B8FF;">names</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#9ECBFF;">&quot;DAYS&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;HOURS&quot;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testWithEnumSourceInclude</span><span style="color:#E1E4E8;">(TimeUnit timeUnit) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertTrue</span><span style="color:#E1E4E8;">(EnumSet.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(TimeUnit.DAYS, TimeUnit.HOURS).</span><span style="color:#B392F0;">contains</span><span style="color:#E1E4E8;">(timeUnit));</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ParameterizedTest</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnumSource</span><span style="color:#24292E;">(TimeUnit.class)</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testWithEnumSource</span><span style="color:#24292E;">(TimeUnit timeUnit) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertNotNull</span><span style="color:#24292E;">(timeUnit);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ParameterizedTest</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">EnumSource</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> TimeUnit.class, </span><span style="color:#005CC5;">names</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#032F62;">&quot;DAYS&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;HOURS&quot;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testWithEnumSourceInclude</span><span style="color:#24292E;">(TimeUnit timeUnit) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertTrue</span><span style="color:#24292E;">(EnumSet.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(TimeUnit.DAYS, TimeUnit.HOURS).</span><span style="color:#6F42C1;">contains</span><span style="color:#24292E;">(timeUnit));</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>此外，还可以通过指定 <code>mode</code> 属性来设置一个匹配模式，用来排除一些枚举值，或者使用正则表达式获取匹配的枚举，具体可参考注解的属性注释。</p><ul><li>@MethodSource</li></ul><p>@MethodSource 用来指定其他的测试方法，来为参数化测试提供参数。指定的方法必须是返回 <code>Stream</code>，<code>Iterable</code>，<code>Iterator</code>或者参数数组 的无参函数，而且是静态的（除非测试类用@TestInstance(Lifecycle.PER_CLASS)注解）。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ParameterizedTest</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">MethodSource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;stringProvider&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testWithSimpleMethodSource</span><span style="color:#E1E4E8;">(String argument) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertNotNull</span><span style="color:#E1E4E8;">(argument);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> Stream</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">String</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">stringProvider</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Stream.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ParameterizedTest</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">MethodSource</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;stringProvider&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testWithSimpleMethodSource</span><span style="color:#24292E;">(String argument) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertNotNull</span><span style="color:#24292E;">(argument);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> Stream</span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">String</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">stringProvider</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Stream.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>@CsvSource</li></ul><p>指定一个 CSV 文件作为参数数组。</p><ul><li>@ArgumentsSource</li></ul><p>指定一个 <code>ArgumentsProvider</code> 的实现类作为参数数组的提供者。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ParameterizedTest</span></span>
<span class="line"><span style="color:#E1E4E8;">@</span><span style="color:#F97583;">ArgumentsSource</span><span style="color:#E1E4E8;">(MyArgumentsProvider.class)</span></span>
<span class="line"><span style="color:#F97583;">void</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testWithArgumentsSource</span><span style="color:#E1E4E8;">(String argument) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">assertNotNull</span><span style="color:#E1E4E8;">(argument);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">MyArgumentsProvider</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">implements</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ArgumentsProvider</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Stream&lt; </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">Arguments</span><span style="color:#E1E4E8;"> &gt; </span><span style="color:#B392F0;">provideArguments</span><span style="color:#E1E4E8;">(ExtensionContext </span><span style="color:#FFAB70;">context</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Stream.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;foo&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;bar&quot;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(Arguments</span><span style="color:#F97583;">::</span><span style="color:#E1E4E8;">of);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ParameterizedTest</span></span>
<span class="line"><span style="color:#24292E;">@</span><span style="color:#D73A49;">ArgumentsSource</span><span style="color:#24292E;">(MyArgumentsProvider.class)</span></span>
<span class="line"><span style="color:#D73A49;">void</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testWithArgumentsSource</span><span style="color:#24292E;">(String argument) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">assertNotNull</span><span style="color:#24292E;">(argument);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">static</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">MyArgumentsProvider</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">implements</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ArgumentsProvider</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Stream&lt; </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">Arguments</span><span style="color:#24292E;"> &gt; </span><span style="color:#6F42C1;">provideArguments</span><span style="color:#24292E;">(ExtensionContext </span><span style="color:#E36209;">context</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Stream.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;foo&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;bar&quot;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(Arguments</span><span style="color:#D73A49;">::</span><span style="color:#24292E;">of);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="动态测试" tabindex="-1">动态测试 <a class="header-anchor" href="#动态测试" aria-label="Permalink to &quot;动态测试&quot;">​</a></h3><p>除了这些标准测试外，JUnit Jupiter 还引入了一种全新的测试编程模型。这种新的测试是动态测试，它是由 <code>@TestFactory</code> 注解的工厂方法在运行时生成的。</p><p>与 @Test 方法相比，@TestFactory 方法本身不是测试用例，而是测试用例的工厂。因此，动态测试是工厂的产物。从技术上讲，@TestFactory 方法必须返回 <code>DynamicNode</code> 实例的 Stream，Collection，Iterable 或 Iterator。 DynamicNode 的可实例化的子类是 <code>DynamicContainer</code> 和 Dynam<code>icTest。 </code>DynamicContainer\` 实例由一个显示名称和一个动态子节点列表组成，可以创建任意嵌套的动态节点层次结构。然后，DynamicTest 实例将被延迟执行，从而实现测试用例的动态甚至非确定性生成。</p><p>任何由 @TestFactory 返回的 Stream 都要通过调用 <code>stream.close()</code> 来正确关闭，使得使用诸如 <code>Files.lines()</code> 之类的资源变得安全。</p><p>与 @Test 方法一样，@TestFactory 方法不能是 private 或 static，并且可以选择声明参数，以便通过 <code>ParameterResolvers</code> 解析。</p><p>DynamicTest 是运行时生成的测试用例。它由显示名称和 <code>Executable</code> 组成。 <code>Executable</code> 是 <code>@FunctionalInterface</code>，这意味着动态测试的实现可以作为 lambda 表达式或方法引用来提供。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.DynamicNode;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.DynamicTest;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.TestFactory;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.function.ThrowingConsumer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.function.Function;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.stream.IntStream;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> java.util.stream.Stream;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.Assertions.</span><span style="color:#79B8FF;">*</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.DynamicContainer.dynamicContainer;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">static</span><span style="color:#E1E4E8;"> org.junit.jupiter.api.DynamicTest.dynamicTest;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Dynamic Test.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DynamicsTest</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// This will result in a JUnitException!</span></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">    List&lt;</span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">dynamicTestsWithInvalidReturnType</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">    Collection&lt;</span><span style="color:#F97583;">DynamicTest</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">dynamicTestsFromCollection</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">dynamicTest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;1st dynamic test&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assertTrue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">dynamicTest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;2nd dynamic test&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">    Iterable&lt;</span><span style="color:#F97583;">DynamicTest</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">dynamicTestsFromIterable</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">dynamicTest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;3rd dynamic test&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assertTrue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">dynamicTest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;4th dynamic test&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        );</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">    Iterator&lt;</span><span style="color:#F97583;">DynamicTest</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">dynamicTestsFromIterator</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Arrays.</span><span style="color:#B392F0;">asList</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">dynamicTest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;5th dynamic test&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assertTrue</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">dynamicTest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;6th dynamic test&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assertEquals</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">        ).</span><span style="color:#B392F0;">iterator</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">    Stream&lt;</span><span style="color:#F97583;">DynamicTest</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">dynamicTestsFromStream</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Stream.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;A&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;B&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;C&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(str </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dynamicTest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> str, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#E1E4E8;"> }));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">    Stream&lt;</span><span style="color:#F97583;">DynamicTest</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">dynamicTestsFromIntStream</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Generates tests for the first 10 even integers.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> IntStream.</span><span style="color:#B392F0;">iterate</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, n </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">limit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">mapToObj</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dynamicTest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;test&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> n, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assertTrue</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">    Stream&lt;</span><span style="color:#F97583;">DynamicTest</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">generateRandomNumberOfTests</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Generates random positive integers between 0 and 100 until</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// a number evenly divisible by 7 is encountered.</span></span>
<span class="line"><span style="color:#E1E4E8;">        Iterator&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; inputGenerator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Iterator&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="color:#E1E4E8;">            Random random </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Random</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;"> current;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">hasNext</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                current </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> random.</span><span style="color:#B392F0;">nextInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> current </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            @</span><span style="color:#F97583;">Override</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> Integer </span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> current;</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Generates display names like: input:5, input:37, input:85, etc.</span></span>
<span class="line"><span style="color:#E1E4E8;">        Function&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">String</span><span style="color:#E1E4E8;">&gt; displayNameGenerator </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (input) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;input:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> input;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Executes tests based on the current input value.</span></span>
<span class="line"><span style="color:#E1E4E8;">        ThrowingConsumer&lt;</span><span style="color:#F97583;">Integer</span><span style="color:#E1E4E8;">&gt; testExecutor </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (input) </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assertTrue</span><span style="color:#E1E4E8;">(input </span><span style="color:#F97583;">%</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Returns a stream of dynamic tests.</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> DynamicTest.</span><span style="color:#B392F0;">stream</span><span style="color:#E1E4E8;">(inputGenerator, displayNameGenerator, testExecutor);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    @</span><span style="color:#F97583;">TestFactory</span></span>
<span class="line"><span style="color:#E1E4E8;">    Stream&lt;</span><span style="color:#F97583;">DynamicNode</span><span style="color:#E1E4E8;">&gt; </span><span style="color:#B392F0;">dynamicTestsWithContainers</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> Stream.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;A&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;B&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;C&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                .</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(input </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">dynamicContainer</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Container &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> input, Stream.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#B392F0;">dynamicTest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;not null&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assertNotNull</span><span style="color:#E1E4E8;">(input)),</span></span>
<span class="line"><span style="color:#E1E4E8;">                        </span><span style="color:#B392F0;">dynamicContainer</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;properties&quot;</span><span style="color:#E1E4E8;">, Stream.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#B392F0;">dynamicTest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;length &gt; 0&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assertTrue</span><span style="color:#E1E4E8;">(input.</span><span style="color:#B392F0;">length</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)),</span></span>
<span class="line"><span style="color:#E1E4E8;">                                </span><span style="color:#B392F0;">dynamicTest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;not empty&quot;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">-&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">assertFalse</span><span style="color:#E1E4E8;">(input.</span><span style="color:#B392F0;">isEmpty</span><span style="color:#E1E4E8;">()))</span></span>
<span class="line"><span style="color:#E1E4E8;">                        ))</span></span>
<span class="line"><span style="color:#E1E4E8;">                )));</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.DynamicNode;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.DynamicTest;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.TestFactory;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> org.junit.jupiter.api.function.ThrowingConsumer;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.function.Function;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.stream.IntStream;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> java.util.stream.Stream;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> org.junit.jupiter.api.Assertions.</span><span style="color:#005CC5;">*</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> org.junit.jupiter.api.DynamicContainer.dynamicContainer;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">static</span><span style="color:#24292E;"> org.junit.jupiter.api.DynamicTest.dynamicTest;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * Dynamic Test.</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DynamicsTest</span><span style="color:#24292E;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// This will result in a JUnitException!</span></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestFactory</span></span>
<span class="line"><span style="color:#24292E;">    List&lt;</span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">dynamicTestsWithInvalidReturnType</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestFactory</span></span>
<span class="line"><span style="color:#24292E;">    Collection&lt;</span><span style="color:#D73A49;">DynamicTest</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">dynamicTestsFromCollection</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">dynamicTest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;1st dynamic test&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assertTrue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">dynamicTest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;2nd dynamic test&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestFactory</span></span>
<span class="line"><span style="color:#24292E;">    Iterable&lt;</span><span style="color:#D73A49;">DynamicTest</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">dynamicTestsFromIterable</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">dynamicTest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;3rd dynamic test&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assertTrue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">dynamicTest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;4th dynamic test&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        );</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestFactory</span></span>
<span class="line"><span style="color:#24292E;">    Iterator&lt;</span><span style="color:#D73A49;">DynamicTest</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">dynamicTestsFromIterator</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Arrays.</span><span style="color:#6F42C1;">asList</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">dynamicTest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;5th dynamic test&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assertTrue</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#6F42C1;">dynamicTest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;6th dynamic test&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assertEquals</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">        ).</span><span style="color:#6F42C1;">iterator</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestFactory</span></span>
<span class="line"><span style="color:#24292E;">    Stream&lt;</span><span style="color:#D73A49;">DynamicTest</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">dynamicTestsFromStream</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Stream.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;B&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;C&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(str </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dynamicTest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> str, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">/* ... */</span><span style="color:#24292E;"> }));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestFactory</span></span>
<span class="line"><span style="color:#24292E;">    Stream&lt;</span><span style="color:#D73A49;">DynamicTest</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">dynamicTestsFromIntStream</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Generates tests for the first 10 even integers.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> IntStream.</span><span style="color:#6F42C1;">iterate</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, n </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">limit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">mapToObj</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dynamicTest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;test&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> n, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assertTrue</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestFactory</span></span>
<span class="line"><span style="color:#24292E;">    Stream&lt;</span><span style="color:#D73A49;">DynamicTest</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">generateRandomNumberOfTests</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Generates random positive integers between 0 and 100 until</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// a number evenly divisible by 7 is encountered.</span></span>
<span class="line"><span style="color:#24292E;">        Iterator&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; inputGenerator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Iterator&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt;() {</span></span>
<span class="line"><span style="color:#24292E;">            Random random </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Random</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">int</span><span style="color:#24292E;"> current;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">boolean</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">hasNext</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                current </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> random.</span><span style="color:#6F42C1;">nextInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">100</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> current </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            @</span><span style="color:#D73A49;">Override</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> Integer </span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> current;</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Generates display names like: input:5, input:37, input:85, etc.</span></span>
<span class="line"><span style="color:#24292E;">        Function&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">String</span><span style="color:#24292E;">&gt; displayNameGenerator </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (input) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;input:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> input;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Executes tests based on the current input value.</span></span>
<span class="line"><span style="color:#24292E;">        ThrowingConsumer&lt;</span><span style="color:#D73A49;">Integer</span><span style="color:#24292E;">&gt; testExecutor </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (input) </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assertTrue</span><span style="color:#24292E;">(input </span><span style="color:#D73A49;">%</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">7</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Returns a stream of dynamic tests.</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> DynamicTest.</span><span style="color:#6F42C1;">stream</span><span style="color:#24292E;">(inputGenerator, displayNameGenerator, testExecutor);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    @</span><span style="color:#D73A49;">TestFactory</span></span>
<span class="line"><span style="color:#24292E;">    Stream&lt;</span><span style="color:#D73A49;">DynamicNode</span><span style="color:#24292E;">&gt; </span><span style="color:#6F42C1;">dynamicTestsWithContainers</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> Stream.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;A&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;B&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;C&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                .</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(input </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">dynamicContainer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Container &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> input, Stream.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">dynamicTest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;not null&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assertNotNull</span><span style="color:#24292E;">(input)),</span></span>
<span class="line"><span style="color:#24292E;">                        </span><span style="color:#6F42C1;">dynamicContainer</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;properties&quot;</span><span style="color:#24292E;">, Stream.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#6F42C1;">dynamicTest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;length &gt; 0&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assertTrue</span><span style="color:#24292E;">(input.</span><span style="color:#6F42C1;">length</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)),</span></span>
<span class="line"><span style="color:#24292E;">                                </span><span style="color:#6F42C1;">dynamicTest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;not empty&quot;</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">-&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">assertFalse</span><span style="color:#24292E;">(input.</span><span style="color:#6F42C1;">isEmpty</span><span style="color:#24292E;">()))</span></span>
<span class="line"><span style="color:#24292E;">                        ))</span></span>
<span class="line"><span style="color:#24292E;">                )));</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br></div></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://junit.org/junit5/docs/current/user-guide/#overview" target="_blank" rel="noreferrer">JUnit5 官方文档</a></li><li><a href="https://pdai.tech/md/develop/ut/dev-ut-x-junit5.html" target="_blank" rel="noreferrer">Java 全栈知识体系</a></li></ul>`,61),e=[o];function t(r,c,E,y,i,u){return n(),a("div",null,e)}const b=s(p,[["render",t]]);export{d as __pageData,b as default};

import{_ as r,W as n,X as t,Z as e,$ as s,a0 as a,a1 as c,C as l}from"./framework-ea95e8eb.js";const d={},i=e("h2",{id:"什么是-docker-repository",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#什么是-docker-repository","aria-hidden":"true"},"#"),s(" 什么是 Docker Repository？")],-1),p=e("p",null,"仓库（Repository）是集中存放镜像的地方。",-1),u=e("p",null,"一个容易混淆的概念是注册服务器（Registry）。实际上注册服务器是管理仓库的具体服务器，每个服务器上可以有多个仓库，而每个仓库下面有多个镜像。从这方面来说，仓库可以被认为是一个具体的项目或目录。例如对于仓库地址 docker.io/ubuntu 来说，docker.io 是注册服务器地址，ubuntu 是仓库名。",-1),h=e("p",null,"大部分时候，并不需要严格区分这两者的概念。",-1),g=e("h2",{id:"docker-hub",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#docker-hub","aria-hidden":"true"},"#"),s(" Docker Hub")],-1),k=e("p",null,"Docker Hub 是 Docker 官方维护的一个公共仓库，大部分需求都可以通过在 Docker Hub 中直接下载镜像来实现。",-1),b={href:"https://hub.docker.com",target:"_blank",rel:"noopener noreferrer"},m=e("p",null,[s("在本地的 Dcoker cli 中，你可以通过 "),e("code",null,"docker login"),s(" 来登录 Docker hub、"),e("code",null,"docker logout"),s(" 来注销登录。")],-1),_=e("h2",{id:"私有仓库",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#私有仓库","aria-hidden":"true"},"#"),s(" 私有仓库")],-1),x=e("p",null,"有时候使用 Docker Hub 这样的公共仓库可能不方便，用户可以创建一个本地仓库供私人使用。",-1),v={href:"https://docs.docker.com/registry/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://docs.docker.com/registry/#basic-commands",target:"_blank",rel:"noopener noreferrer"},y=c(`<h2 id="nexus3-x-的私有仓库" tabindex="-1"><a class="header-anchor" href="#nexus3-x-的私有仓库" aria-hidden="true">#</a> Nexus3.x 的私有仓库</h2><p>使用 Docker 官方的 Registry 创建的仓库面临一些维护问题。比如某些镜像删除以后空间默认是不会回收的，需要一些命令去回收空间然后重启 Registry。在企业中把内部的一些工具包放入 Nexus 中是比较常见的做法，最新版本 Nexus3.x 全面支持 Docker 的私有镜像。所以使用 Nexus3.x (opens new window) 一个软件来管理 Docker , Maven , Yum , PyPI 等是一个明智的选择。</p><p><strong>启动一个 nexus3 容器：</strong></p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> nexus3 <span class="token parameter variable">--restart</span><span class="token operator">=</span>always <span class="token parameter variable">-p</span> <span class="token number">8081</span>:8081 <span class="token parameter variable">-p</span> <span class="token number">5000</span>:5000 sonatype/nexus3
</code></pre></div><p>这里的 8081 为 Nexus3 的网页开放端口，5000 是为 Docker 仓库预留的端口。</p><p>容器启动后，打开 localhost:8081 访问 Nexus 界面，可以从右上角点击登录，用户名为 admin，密码需要使用如下命令获取：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> nexus3 <span class="token function">cat</span> /nexus-data/admin.password
</code></pre></div><p>首次登录后需要更改密码，并设置匿名访问策略。</p><p><strong>之后，我们就可以创建 Docker 仓库了：</strong></p><p>创建一个私有仓库的方法： <code>Repository-&gt;Repositories</code> 点击右边菜单 <code>Create repository</code> 选择 <code>docker (hosted)</code></p><ul><li><strong>Name</strong>: 仓库的名称</li><li><strong>HTTP</strong>: 仓库单独的访问端口（例如：<strong>5000</strong>）</li><li><strong>Hosted -&gt; Deployment pollcy</strong>: 请选择 <strong>Allow redeploy</strong> 否则无法上传 Docker 镜像。</li></ul><p>其它的仓库创建方法请各位自己摸索，还可以创建一个 <code>docker (proxy)</code> 类型的仓库链接到 DockerHub 上。再创建一个 <code>docker (group)</code> 类型的仓库把刚才的 <code>hosted</code> 与 <code>proxy</code> 添加在一起。主机在访问的时候默认下载私有仓库中的镜像，如果没有将链接到 DockerHub 中下载并缓存到 Nexus 中。</p><p><strong>此外，我们还需要添加用户和访问权限：</strong></p><ul><li><p>菜单 <code>Security-&gt;Realms</code> 把 Docker Bearer Token Realm 移到右边的框中保存。</p></li><li><p>添加用户规则：菜单 <code>Security-&gt;Roles</code>-&gt;<code>Create role</code> 在 <code>Privlleges</code> 选项搜索 docker 把相应的规则移动到右边的框中然后保存。</p></li><li><p>添加用户：菜单 <code>Security-&gt;Users</code>-&gt;<code>Create local user</code> 在 <code>Roles</code> 选项中选中刚才创建的规则移动到右边的窗口保存。</p></li></ul><p><strong>接下来，我们来测试一下，上传一个镜像到 Nexus 的 Docker 仓库</strong></p><ol><li>拉取一个 ubuntu 镜像</li></ol><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull ubuntu
</code></pre></div><ol start="2"><li>标记 ubuntu 镜像，归入在 Nexus 创建的 Docker 仓库</li></ol><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> image tag ubuntu localhost:5000/myfirstimage
</code></pre></div><ol start="3"><li>登录该 Docker 仓库；输入用户名和密码，具体参考上面的<strong>添加用户和权限</strong></li></ol><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> login localhost:5000
</code></pre></div><ol start="4"><li>push 镜像到 Docker 仓库</li></ol><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> push localhost:5000/myfirstimage
</code></pre></div><p>执行完成就可以在 nexus 看到镜像了。</p><ol start="5"><li>pull 镜像到本地 (先删除本地镜像再拉取)</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 删除本地镜像
<span class="token function">docker</span> rmi localhost:5000/myfirstimage

// 从 Nexus 拉取镜像
<span class="token function">docker</span> pull localhost:5000/myfirstimage
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>`,27),D={href:"https://vuepress.mirror.docker-practice.com/repository/nexus3_registry/",target:"_blank",rel:"noopener noreferrer"},N={href:"https://docs.docker.com/registry/",target:"_blank",rel:"noopener noreferrer"};function R(H,w){const o=l("ExternalLinkIcon");return n(),t("div",null,[i,p,u,h,g,k,e("p",null,[s("Docker hub 的地址 "),e("a",b,[s("https://hub.docker.com"),a(o)]),s("，你需要注册一个 Docker hub 账号，才能在 Docker Hub 上面创建自己的镜像仓库。")]),m,_,x,e("p",null,[e("a",v,[s("docker-registry"),a(o)]),s(" 是官方提供的工具，可以用于构建私有的镜像仓库。")]),e("p",null,[s("具体案例可以参考 "),e("a",f,[s("Reference - Docekr registry"),a(o)]),s("。")]),y,e("ul",null,[e("li",null,[e("a",D,[s("Docker 从入门到实践"),a(o)])]),e("li",null,[e("a",N,[s("Docker Reference - registry"),a(o)])])])])}const B=r(d,[["render",R],["__file","1.6-registry.html.vue"]]);export{B as default};

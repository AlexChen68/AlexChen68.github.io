import{_ as n,W as a,X as r,a0 as l,Y as e,Z as t,$ as c,G as s}from"./framework-d9a58575.js";const d={},i=e("p",null,"其他常用的算法集合",-1),_=e("h2",{id:"原地算法-in-place-algorithm",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#原地算法-in-place-algorithm","aria-hidden":"true"},"#"),t(" 原地算法（In-Place Algorithm）")],-1),h=e("p",null,"原地算法：在计算机科学中，一个原地算法（in-place algorithm）是一种使用小的，固定数量的额外之空间来转换资料的算法。当算法执行时，输入的资料通常会被要输出的部分覆盖掉。不是原地算法有时候称为非原地（not-in-place）或不得其所（out-of-place）。",-1),p=e("p",null,"通俗的说法：就是一个算法，除了可以运用输入数据本身已开辟的空间外，就只可以用极小的辅助空间来进行运算了，一般 额外空间复杂度为 O (1)，也就是一个变量。(特殊情况除外)",-1),m={href:"https://leetcode.cn/problems/remove-duplicates-from-sorted-array/",target:"_blank",rel:"noopener noreferrer"},u=e("h2",{id:"页面置换算法",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#页面置换算法","aria-hidden":"true"},"#"),t(" 页面置换算法")],-1),f=e("p",null,[e("code",null,"LRU"),t(" 是 Least Recently Used 的缩写，即最近最少使用，是一种常用的页面置换算法，选择最近最久未使用的页面予以淘汰。")],-1),x=e("p",null,"该算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 t，当须淘汰一个页面时，选择现有页面中其 t 值最大的，即最近最少使用的页面予以淘汰",-1);function g(k,L){const o=s("ExternalLinkIcon");return a(),r("div",null,[i,l(" more "),_,h,p,e("p",null,[t("例如："),e("a",m,[t("LeetCode 26题"),c(o)])]),u,f,x])}const v=n(d,[["render",g],["__file","other.html.vue"]]);export{v as default};
